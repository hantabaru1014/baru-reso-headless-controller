// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hosts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHost = `-- name: CreateHost :one
INSERT INTO hosts (
    id,
    name,
    status,
    account_id,
    owner_id,
    last_startup_config,
    last_startup_config_schema_version,
    connector_type,
    connect_string,
    started_at,
    auto_update_policy,
    memo
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, name, status, account_id, owner_id, last_startup_config, last_startup_config_schema_version, connector_type, connect_string, started_at, memo, auto_update_policy, created_at, updated_at
`

type CreateHostParams struct {
	ID                             string
	Name                           string
	Status                         int32
	AccountID                      string
	OwnerID                        pgtype.Text
	LastStartupConfig              []byte
	LastStartupConfigSchemaVersion int32
	ConnectorType                  string
	ConnectString                  string
	StartedAt                      pgtype.Timestamptz
	AutoUpdatePolicy               int32
	Memo                           pgtype.Text
}

func (q *Queries) CreateHost(ctx context.Context, arg CreateHostParams) (Host, error) {
	row := q.db.QueryRow(ctx, createHost,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.AccountID,
		arg.OwnerID,
		arg.LastStartupConfig,
		arg.LastStartupConfigSchemaVersion,
		arg.ConnectorType,
		arg.ConnectString,
		arg.StartedAt,
		arg.AutoUpdatePolicy,
		arg.Memo,
	)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.AccountID,
		&i.OwnerID,
		&i.LastStartupConfig,
		&i.LastStartupConfigSchemaVersion,
		&i.ConnectorType,
		&i.ConnectString,
		&i.StartedAt,
		&i.Memo,
		&i.AutoUpdatePolicy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHost = `-- name: DeleteHost :exec
DELETE FROM hosts WHERE id = $1
`

func (q *Queries) DeleteHost(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteHost, id)
	return err
}

const getHost = `-- name: GetHost :one
SELECT id, name, status, account_id, owner_id, last_startup_config, last_startup_config_schema_version, connector_type, connect_string, started_at, memo, auto_update_policy, created_at, updated_at FROM hosts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHost(ctx context.Context, id string) (Host, error) {
	row := q.db.QueryRow(ctx, getHost, id)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.AccountID,
		&i.OwnerID,
		&i.LastStartupConfig,
		&i.LastStartupConfigSchemaVersion,
		&i.ConnectorType,
		&i.ConnectString,
		&i.StartedAt,
		&i.Memo,
		&i.AutoUpdatePolicy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHosts = `-- name: ListHosts :many
SELECT id, name, status, account_id, owner_id, last_startup_config, last_startup_config_schema_version, connector_type, connect_string, started_at, memo, auto_update_policy, created_at, updated_at FROM hosts ORDER BY started_at DESC
`

func (q *Queries) ListHosts(ctx context.Context) ([]Host, error) {
	rows, err := q.db.Query(ctx, listHosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Host
	for rows.Next() {
		var i Host
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.AccountID,
			&i.OwnerID,
			&i.LastStartupConfig,
			&i.LastStartupConfigSchemaVersion,
			&i.ConnectorType,
			&i.ConnectString,
			&i.StartedAt,
			&i.Memo,
			&i.AutoUpdatePolicy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHostsByStatus = `-- name: ListHostsByStatus :many
SELECT id, name, status, account_id, owner_id, last_startup_config, last_startup_config_schema_version, connector_type, connect_string, started_at, memo, auto_update_policy, created_at, updated_at FROM hosts WHERE status = $1 ORDER BY started_at DESC
`

func (q *Queries) ListHostsByStatus(ctx context.Context, status int32) ([]Host, error) {
	rows, err := q.db.Query(ctx, listHostsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Host
	for rows.Next() {
		var i Host
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.AccountID,
			&i.OwnerID,
			&i.LastStartupConfig,
			&i.LastStartupConfigSchemaVersion,
			&i.ConnectorType,
			&i.ConnectString,
			&i.StartedAt,
			&i.Memo,
			&i.AutoUpdatePolicy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHostAutoUpdatePolicy = `-- name: UpdateHostAutoUpdatePolicy :exec
UPDATE hosts SET auto_update_policy = $2 WHERE id = $1
`

type UpdateHostAutoUpdatePolicyParams struct {
	ID               string
	AutoUpdatePolicy int32
}

func (q *Queries) UpdateHostAutoUpdatePolicy(ctx context.Context, arg UpdateHostAutoUpdatePolicyParams) error {
	_, err := q.db.Exec(ctx, updateHostAutoUpdatePolicy, arg.ID, arg.AutoUpdatePolicy)
	return err
}

const updateHostConnectString = `-- name: UpdateHostConnectString :exec
UPDATE hosts SET connect_string = $2 WHERE id = $1
`

type UpdateHostConnectStringParams struct {
	ID            string
	ConnectString string
}

func (q *Queries) UpdateHostConnectString(ctx context.Context, arg UpdateHostConnectStringParams) error {
	_, err := q.db.Exec(ctx, updateHostConnectString, arg.ID, arg.ConnectString)
	return err
}

const updateHostLastStartupConfig = `-- name: UpdateHostLastStartupConfig :exec
UPDATE hosts SET last_startup_config = $2 WHERE id = $1
`

type UpdateHostLastStartupConfigParams struct {
	ID                string
	LastStartupConfig []byte
}

func (q *Queries) UpdateHostLastStartupConfig(ctx context.Context, arg UpdateHostLastStartupConfigParams) error {
	_, err := q.db.Exec(ctx, updateHostLastStartupConfig, arg.ID, arg.LastStartupConfig)
	return err
}

const updateHostMemo = `-- name: UpdateHostMemo :exec
UPDATE hosts SET memo = $2 WHERE id = $1
`

type UpdateHostMemoParams struct {
	ID   string
	Memo pgtype.Text
}

func (q *Queries) UpdateHostMemo(ctx context.Context, arg UpdateHostMemoParams) error {
	_, err := q.db.Exec(ctx, updateHostMemo, arg.ID, arg.Memo)
	return err
}

const updateHostName = `-- name: UpdateHostName :exec
UPDATE hosts SET name = $2 WHERE id = $1
`

type UpdateHostNameParams struct {
	ID   string
	Name string
}

func (q *Queries) UpdateHostName(ctx context.Context, arg UpdateHostNameParams) error {
	_, err := q.db.Exec(ctx, updateHostName, arg.ID, arg.Name)
	return err
}

const updateHostStartedAt = `-- name: UpdateHostStartedAt :exec
UPDATE hosts SET started_at = $2 WHERE id = $1
`

type UpdateHostStartedAtParams struct {
	ID        string
	StartedAt pgtype.Timestamptz
}

func (q *Queries) UpdateHostStartedAt(ctx context.Context, arg UpdateHostStartedAtParams) error {
	_, err := q.db.Exec(ctx, updateHostStartedAt, arg.ID, arg.StartedAt)
	return err
}

const updateHostStatus = `-- name: UpdateHostStatus :exec
UPDATE hosts SET status = $2 WHERE id = $1
`

type UpdateHostStatusParams struct {
	ID     string
	Status int32
}

func (q *Queries) UpdateHostStatus(ctx context.Context, arg UpdateHostStatusParams) error {
	_, err := q.db.Exec(ctx, updateHostStatus, arg.ID, arg.Status)
	return err
}
