name: Release

on:
  release:
    types: [published]

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          run_install: true

      - name: Build frontend
        run: pnpm run build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:latest, ghcr.io/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Make dummy front assets
        run: mkdir -p ./front/dist && touch ./front/dist/index.html

      # ビルド時間を考えるとまだjobをmatrix strategyで分割する必要はなさそう
      - name: Build CLI (amd64)
        run: GOOS=linux GOARCH=amd64 go build -o brhcli-amd64 cmd/cli/main.go

      - name: Build CLI (arm64)
        run: GOOS=linux GOARCH=arm64 go build -o brhcli-arm64 cmd/cli/main.go

      - name: Upload assets
        run: gh release upload ${{ github.event.release.tag_name }} brhcli-amd64 brhcli-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
