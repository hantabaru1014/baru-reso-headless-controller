syntax = "proto3";

package hdlctrl.v1;

import "headless/v1/headless.proto";
import "google/protobuf/timestamp.proto";

service ControllerService {
  rpc ListHeadlessHost(ListHeadlessHostRequest) returns (ListHeadlessHostResponse);
  rpc GetHeadlessHost(GetHeadlessHostRequest) returns (GetHeadlessHostResponse);
  rpc GetHeadlessHostLogs(GetHeadlessHostLogsRequest) returns (GetHeadlessHostLogsResponse);
  rpc ShutdownHeadlessHost(ShutdownHeadlessHostRequest) returns (ShutdownHeadlessHostResponse);
  rpc UpdateHeadlessHostSettings(UpdateHeadlessHostSettingsRequest) returns (UpdateHeadlessHostSettingsResponse);
  rpc PullLatestHostImage(PullLatestHostImageRequest) returns (PullLatestHostImageResponse);
  rpc RestartHeadlessHost(RestartHeadlessHostRequest) returns (RestartHeadlessHostResponse);

  rpc FetchWorldInfo(FetchWorldInfoRequest) returns (headless.v1.FetchWorldInfoResponse);
  rpc SearchUserInfo(SearchUserInfoRequest) returns (headless.v1.SearchUserInfoResponse);

  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);
  rpc GetSessionDetails(GetSessionDetailsRequest) returns (GetSessionDetailsResponse);
  rpc StartWorld(StartWorldRequest) returns (StartWorldResponse);
  rpc StopSession(StopSessionRequest) returns (StopSessionResponse);
  rpc SaveSessionWorld(SaveSessionWorldRequest) returns (SaveSessionWorldResponse);
  rpc InviteUser(InviteUserRequest) returns (InviteUserResponse);
  rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse);
  rpc UpdateSessionParameters(UpdateSessionParametersRequest) returns (UpdateSessionParametersResponse);
  rpc ListUsersInSession(ListUsersInSessionRequest) returns (ListUsersInSessionResponse);
  rpc KickUser(KickUserRequest) returns (KickUserResponse);
  rpc BanUser(BanUserRequest) returns (BanUserResponse);
}

message RestartHeadlessHostRequest {
  string host_id = 1;
  bool with_update = 2;
}

message RestartHeadlessHostResponse {
  optional string new_host_id = 1;
}

message PullLatestHostImageRequest {}

message PullLatestHostImageResponse {
  string logs = 1;
}

message UpdateHeadlessHostSettingsRequest {
  string host_id = 1;
  optional string name = 2;
}

message UpdateHeadlessHostSettingsResponse {}

message ShutdownHeadlessHostRequest {
  string host_id = 1;
}

message ShutdownHeadlessHostResponse {}

message GetHeadlessHostLogsRequest {
  string host_id = 1;
  oneof query {
    // limit が指定されている場合は、最新のログから limit 件取得する
    int32 limit = 2;
    // until が指定されている場合は、until 以前のログを全て取得する
    google.protobuf.Timestamp until = 3;
    // since が指定されている場合は、since 以降のログを全て取得する
    google.protobuf.Timestamp since = 4;
  }
}

message GetHeadlessHostLogsResponse {
  message Log {
    google.protobuf.Timestamp timestamp = 1;
    bool is_error = 2;
    string body = 3;
  }
  // 時系列に並んだログ
  repeated Log logs = 1;
}

message SearchUserInfoRequest {
  string host_id = 1;
  headless.v1.SearchUserInfoRequest parameters = 2;
}

message KickUserRequest {
  string host_id = 1;
  headless.v1.KickUserRequest parameters = 2;
}

message KickUserResponse {}

message BanUserRequest {
  string host_id = 1;
  headless.v1.BanUserRequest parameters = 2;
}

message BanUserResponse {}

message FetchWorldInfoRequest {
  string host_id = 1;
  string url = 2;
}

message ListHeadlessHostRequest {}

message ListHeadlessHostResponse {
  repeated HeadlessHost hosts = 1;
}

message GetHeadlessHostRequest {
  string host_id = 1;
}

message GetHeadlessHostResponse {
  HeadlessHost host = 1;
}

message AddHeadlessHostRequest {
  string name = 1;
  string address = 2;
}

message AddHeadlessHostResponse {
  HeadlessHost host = 1;
}

message ListSessionsRequest {
  string host_id = 1;
}

message ListSessionsResponse {
  repeated headless.v1.Session sessions = 1;
}

message GetSessionDetailsRequest {
  string host_id = 1;
  string session_id = 2;
}

message GetSessionDetailsResponse {
  headless.v1.Session session = 1;
}

message StartWorldRequest {
  string host_id = 1;
  headless.v1.WorldStartupParameters parameters = 2;
}

message StartWorldResponse {
  headless.v1.Session opened_session = 1;
}

message StopSessionRequest {
  string host_id = 1;
  string session_id = 2;
}

message StopSessionResponse {}

message SaveSessionWorldRequest {
  string host_id = 1;
  string session_id = 2;
}

message SaveSessionWorldResponse {}

message InviteUserRequest {
  string host_id = 1;
  string session_id = 2;
  oneof user {
    string user_id = 3;
    string user_name = 4;
  }
}

message InviteUserResponse {}

message UpdateUserRoleRequest {
  string host_id = 1;
  headless.v1.UpdateUserRoleRequest parameters = 2;
}

message UpdateUserRoleResponse {
  string role = 1;
}

message UpdateSessionParametersRequest {
  string host_id = 1;
  headless.v1.UpdateSessionParametersRequest parameters = 2;
}

message UpdateSessionParametersResponse {}

message ListUsersInSessionRequest {
  string host_id = 1;
  string session_id = 2;
}

message ListUsersInSessionResponse {
  repeated headless.v1.UserInSession users = 1;
}

// models

enum HeadlessHostStatus {
  HEADLESS_HOST_STATUS_UNKNOWN = 0;
  HEADLESS_HOST_STATUS_STARTING = 1;
  HEADLESS_HOST_STATUS_RUNNING = 2;
  HEADLESS_HOST_STATUS_STOPPING = 3;
  HEADLESS_HOST_STATUS_EXITED = 4;
  HEADLESS_HOST_STATUS_CRASHED = 5;
}

message HeadlessHost {
  string id = 1;
  string name = 2;
  string address = 3;
  string resonite_version = 4;
  string account_id = 5;
  string account_name = 6;
  float fps = 7;
  int64 storage_quota_bytes = 8;
  int64 storage_used_bytes = 9;
  HeadlessHostStatus status = 10;
}
