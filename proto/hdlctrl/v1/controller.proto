syntax = "proto3";

package hdlctrl.v1;

import "google/protobuf/timestamp.proto";
import "headless/v1/headless.proto";

service ControllerService {
  // ホスト系
  rpc ListHeadlessHost(ListHeadlessHostRequest) returns (ListHeadlessHostResponse);
  rpc GetHeadlessHost(GetHeadlessHostRequest) returns (GetHeadlessHostResponse);
  rpc GetHeadlessHostLogs(GetHeadlessHostLogsRequest) returns (GetHeadlessHostLogsResponse);
  rpc ShutdownHeadlessHost(ShutdownHeadlessHostRequest) returns (ShutdownHeadlessHostResponse);
  rpc UpdateHeadlessHostSettings(UpdateHeadlessHostSettingsRequest) returns (UpdateHeadlessHostSettingsResponse);
  rpc RestartHeadlessHost(RestartHeadlessHostRequest) returns (RestartHeadlessHostResponse);
  rpc StartHeadlessHost(StartHeadlessHostRequest) returns (StartHeadlessHostResponse);
  rpc AllowHostAccess(AllowHostAccessRequest) returns (AllowHostAccessResponse);
  rpc DenyHostAccess(DenyHostAccessRequest) returns (DenyHostAccessResponse);
  rpc ListHeadlessHostImageTags(ListHeadlessHostImageTagsRequest) returns (ListHeadlessHostImageTagsResponse);
  rpc DeleteHeadlessHost(DeleteHeadlessHostRequest) returns (DeleteHeadlessHostResponse);

  // アカウント系
  rpc CreateHeadlessAccount(CreateHeadlessAccountRequest) returns (CreateHeadlessAccountResponse);
  rpc ListHeadlessAccounts(ListHeadlessAccountsRequest) returns (ListHeadlessAccountsResponse);
  rpc DeleteHeadlessAccount(DeleteHeadlessAccountRequest) returns (DeleteHeadlessAccountResponse);
  rpc UpdateHeadlessAccountCredentials(UpdateHeadlessAccountCredentialsRequest) returns (UpdateHeadlessAccountCredentialsResponse);
  rpc GetHeadlessAccountStorageInfo(GetHeadlessAccountStorageInfoRequest) returns (GetHeadlessAccountStorageInfoResponse);
  rpc RefetchHeadlessAccountInfo(RefetchHeadlessAccountInfoRequest) returns (RefetchHeadlessAccountInfoResponse);

  // Cloud系
  rpc FetchWorldInfo(FetchWorldInfoRequest) returns (headless.v1.FetchWorldInfoResponse);
  rpc SearchUserInfo(SearchUserInfoRequest) returns (headless.v1.SearchUserInfoResponse);
  rpc GetFriendRequests(GetFriendRequestsRequest) returns (GetFriendRequestsResponse);
  rpc AcceptFriendRequests(AcceptFriendRequestsRequest) returns (AcceptFriendRequestsResponse);

  // セッション系
  rpc SearchSessions(SearchSessionsRequest) returns (SearchSessionsResponse);
  rpc GetSessionDetails(GetSessionDetailsRequest) returns (GetSessionDetailsResponse);
  rpc StartWorld(StartWorldRequest) returns (StartWorldResponse);
  rpc StopSession(StopSessionRequest) returns (StopSessionResponse);
  rpc DeleteEndedSession(DeleteEndedSessionRequest) returns (DeleteEndedSessionResponse);
  rpc SaveSessionWorld(SaveSessionWorldRequest) returns (SaveSessionWorldResponse);
  rpc InviteUser(InviteUserRequest) returns (InviteUserResponse);
  rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse);
  rpc UpdateSessionParameters(UpdateSessionParametersRequest) returns (UpdateSessionParametersResponse);
  rpc UpdateSessionExtraSettings(UpdateSessionExtraSettingsRequest) returns (UpdateSessionExtraSettingsResponse);
  rpc ListUsersInSession(ListUsersInSessionRequest) returns (ListUsersInSessionResponse);
  rpc KickUser(KickUserRequest) returns (KickUserResponse);
  rpc BanUser(BanUserRequest) returns (BanUserResponse);
}

message RefetchHeadlessAccountInfoRequest {
  string account_id = 1;
}

message RefetchHeadlessAccountInfoResponse {}

message GetHeadlessAccountStorageInfoRequest {
  string account_id = 1;
}

message GetHeadlessAccountStorageInfoResponse {
  int64 storage_quota_bytes = 1;
  int64 storage_used_bytes = 2;
}

message UpdateHeadlessAccountCredentialsRequest {
  string account_id = 1;
  string credential = 2; // email or userId
  string password = 3;
}

message UpdateHeadlessAccountCredentialsResponse {}

message DeleteHeadlessAccountRequest {
  string account_id = 1;
}

message DeleteHeadlessAccountResponse {}

message DeleteHeadlessHostRequest {
  string host_id = 1;
}

message DeleteHeadlessHostResponse {}

message AllowHostAccessRequest {
  string host_id = 1;
  headless.v1.AllowHostAccessRequest request = 2;
}

message AllowHostAccessResponse {}

message DenyHostAccessRequest {
  string host_id = 1;
  headless.v1.DenyHostAccessRequest request = 2;
}

message DenyHostAccessResponse {}

message StartHeadlessHostRequest {
  string name = 1;
  string headless_account_id = 2;
  optional string image_tag = 3;
  optional headless.v1.StartupConfig startup_config = 4;
  optional HeadlessHostAutoUpdatePolicy auto_update_policy = 5;
  optional string memo = 6;
}

message StartHeadlessHostResponse {
  string host_id = 1;
}

message CreateHeadlessAccountRequest {
  reserved 1; // 廃止したプロパティ
  string credential = 2; // email or userId
  string password = 3;
}

message CreateHeadlessAccountResponse {}

message ListHeadlessAccountsRequest {}

message ListHeadlessAccountsResponse {
  repeated HeadlessAccount accounts = 1;
}

message ListHeadlessHostImageTagsRequest {}

message ListHeadlessHostImageTagsResponse {
  message ContainerImage {
    string tag = 1;
    string resonite_version = 2;
    bool is_prerelease = 3;
    string app_version = 4;
  }
  repeated ContainerImage tags = 1;
}

message AcceptFriendRequestsRequest {
  reserved 1, 2;
  string headless_account_id = 3;
  string target_user_id = 4;
}

message AcceptFriendRequestsResponse {}

message GetFriendRequestsRequest {
  reserved 1;
  string headless_account_id = 2;
}

message GetFriendRequestsResponse {
  repeated UserInfo requested_contacts = 1;
}

message RestartHeadlessHostRequest {
  string host_id = 1;
  bool with_update = 2;
  optional string with_image_tag = 3;
  bool with_world_restart = 4;
  optional int32 timeout_seconds = 5;
}

message RestartHeadlessHostResponse {
  optional string new_host_id = 1;
}

message UpdateHeadlessHostSettingsRequest {
  string host_id = 1;
  optional string name = 2;
  optional float tick_rate = 3;
  optional int32 max_concurrent_asset_transfers = 4;
  optional string username_override = 5;
  bool update_auto_spawn_items = 6;
  repeated string auto_spawn_items = 7;
  optional string universe_id = 8;
}

message UpdateHeadlessHostSettingsResponse {}

message ShutdownHeadlessHostRequest {
  string host_id = 1;
}

message ShutdownHeadlessHostResponse {}

message GetHeadlessHostLogsRequest {
  string host_id = 1;
  oneof query {
    // limit が指定されている場合は、最新のログから limit 件取得する
    int32 limit = 2;
    // until が指定されている場合は、until 以前のログを全て取得する
    google.protobuf.Timestamp until = 3;
    // since が指定されている場合は、since 以降のログを全て取得する
    google.protobuf.Timestamp since = 4;
  }
}

message GetHeadlessHostLogsResponse {
  message Log {
    google.protobuf.Timestamp timestamp = 1;
    bool is_error = 2;
    string body = 3;
  }
  // 時系列に並んだログ
  repeated Log logs = 1;
}

message SearchUserInfoRequest {
  string host_id = 1;
  headless.v1.SearchUserInfoRequest parameters = 2;
}

message KickUserRequest {
  string host_id = 1;
  headless.v1.KickUserRequest parameters = 2;
}

message KickUserResponse {}

message BanUserRequest {
  string host_id = 1;
  headless.v1.BanUserRequest parameters = 2;
}

message BanUserResponse {}

message FetchWorldInfoRequest {
  string host_id = 1;
  string url = 2;
}

message ListHeadlessHostRequest {}

message ListHeadlessHostResponse {
  repeated HeadlessHost hosts = 1;
}

message GetHeadlessHostRequest {
  string host_id = 1;
}

message GetHeadlessHostResponse {
  reserved 2; // 廃止したプロパティ
  HeadlessHost host = 1;
}

message AddHeadlessHostRequest {
  string name = 1;
  string address = 2;
}

message AddHeadlessHostResponse {
  HeadlessHost host = 1;
}

message SearchSessionsRequest {
  message SearchParameters {
    optional string host_id = 1;
    optional SessionStatus status = 2;
  }
  SearchParameters parameters = 1;
}

message SearchSessionsResponse {
  repeated Session sessions = 1;
}

message GetSessionDetailsRequest {
  string host_id = 1 [deprecated = true]; // 指定不要
  string session_id = 2;
}

message GetSessionDetailsResponse {
  Session session = 1;
}

message StartWorldRequest {
  string host_id = 1;
  headless.v1.WorldStartupParameters parameters = 2;
  string memo = 3;
}

message StartWorldResponse {
  Session opened_session = 1;
}

message StopSessionRequest {
  string host_id = 1;
  string session_id = 2;
}

message StopSessionResponse {}

message DeleteEndedSessionRequest {
  string session_id = 1;
}

message DeleteEndedSessionResponse {}

message SaveSessionWorldRequest {
  string host_id = 1;
  string session_id = 2;
}

message SaveSessionWorldResponse {}

message InviteUserRequest {
  string host_id = 1;
  string session_id = 2;
  oneof user {
    string user_id = 3;
    string user_name = 4;
  }
}

message InviteUserResponse {}

message UpdateUserRoleRequest {
  string host_id = 1;
  headless.v1.UpdateUserRoleRequest parameters = 2;
}

message UpdateUserRoleResponse {
  string role = 1;
}

message UpdateSessionParametersRequest {
  string host_id = 1;
  headless.v1.UpdateSessionParametersRequest parameters = 2;
}

message UpdateSessionParametersResponse {}

message UpdateSessionExtraSettingsRequest {
  string session_id = 1;
  optional bool auto_upgrade = 2;
  optional string memo = 3;
}

message UpdateSessionExtraSettingsResponse {}

message ListUsersInSessionRequest {
  string host_id = 1;
  string session_id = 2;
}

message ListUsersInSessionResponse {
  repeated headless.v1.UserInSession users = 1;
}

// models

enum HeadlessHostStatus {
  HEADLESS_HOST_STATUS_UNKNOWN = 0;
  HEADLESS_HOST_STATUS_STARTING = 1;
  HEADLESS_HOST_STATUS_RUNNING = 2;
  HEADLESS_HOST_STATUS_STOPPING = 3;
  HEADLESS_HOST_STATUS_EXITED = 4;
  HEADLESS_HOST_STATUS_CRASHED = 5;
}

enum SessionStatus {
  SESSION_STATUS_UNKNOWN = 0;
  SESSION_STATUS_STARTING = 1;
  SESSION_STATUS_RUNNING = 2;
  SESSION_STATUS_ENDED = 3;
  SESSION_STATUS_CRASHED = 4;
}

enum HeadlessHostAutoUpdatePolicy {
  HEADLESS_HOST_AUTO_UPDATE_POLICY_UNKNOWN = 0;
  HEADLESS_HOST_AUTO_UPDATE_POLICY_NEVER = 1; // 自動更新しない
  HEADLESS_HOST_AUTO_UPDATE_POLICY_USERS_EMPTY = 2; // ユーザがいない場合のみ自動更新する
}

message HeadlessHostSettings {
  optional string universe_id = 1;
  float tick_rate = 2;
  int32 max_concurrent_asset_transfers = 3;
  optional string username_override = 4;
  repeated headless.v1.AllowedAccessEntry allowed_url_hosts = 5;
  repeated string auto_spawn_items = 6;
}

message HeadlessHost {
  reserved 8, 9; // 廃止したプロパティ
  string id = 1;
  string name = 2;
  string resonite_version = 4;
  string app_version = 11;
  string account_id = 5;
  string account_name = 6;
  float fps = 7;
  HeadlessHostStatus status = 10;
  HeadlessHostAutoUpdatePolicy auto_update_policy = 12;
  string memo = 13;
  HeadlessHostSettings host_settings = 14;
}

message Session {
  string id = 1;
  string name = 2;
  string host_id = 3;
  SessionStatus status = 4;
  google.protobuf.Timestamp started_at = 5;
  optional google.protobuf.Timestamp ended_at = 6;
  headless.v1.WorldStartupParameters startup_parameters = 7;
  optional headless.v1.Session current_state = 8;
  optional string owner_id = 9;
  bool auto_upgrade = 10;
  string memo = 11;
}

message HeadlessAccount {
  string user_id = 1;
  string user_name = 2;
  string icon_url = 3;
}

message UserInfo {
  string id = 1;
  string name = 2;
  string icon_url = 3;
}
