// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file hdlctrl/v1/controller.proto (package hdlctrl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Session, WorldStartupParameters } from "../../headless/v1/headless_pb.js";

/**
 * @generated from message hdlctrl.v1.ListHeadlessHostRequest
 */
export class ListHeadlessHostRequest extends Message<ListHeadlessHostRequest> {
  constructor(data?: PartialMessage<ListHeadlessHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.ListHeadlessHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHeadlessHostRequest {
    return new ListHeadlessHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHeadlessHostRequest {
    return new ListHeadlessHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHeadlessHostRequest {
    return new ListHeadlessHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListHeadlessHostRequest | PlainMessage<ListHeadlessHostRequest> | undefined, b: ListHeadlessHostRequest | PlainMessage<ListHeadlessHostRequest> | undefined): boolean {
    return proto3.util.equals(ListHeadlessHostRequest, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.ListHeadlessHostResponse
 */
export class ListHeadlessHostResponse extends Message<ListHeadlessHostResponse> {
  /**
   * @generated from field: repeated hdlctrl.v1.HeadlessHost hosts = 1;
   */
  hosts: HeadlessHost[] = [];

  constructor(data?: PartialMessage<ListHeadlessHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.ListHeadlessHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hosts", kind: "message", T: HeadlessHost, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListHeadlessHostResponse {
    return new ListHeadlessHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListHeadlessHostResponse {
    return new ListHeadlessHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListHeadlessHostResponse {
    return new ListHeadlessHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListHeadlessHostResponse | PlainMessage<ListHeadlessHostResponse> | undefined, b: ListHeadlessHostResponse | PlainMessage<ListHeadlessHostResponse> | undefined): boolean {
    return proto3.util.equals(ListHeadlessHostResponse, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.GetHeadlessHostRequest
 */
export class GetHeadlessHostRequest extends Message<GetHeadlessHostRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetHeadlessHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.GetHeadlessHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHeadlessHostRequest {
    return new GetHeadlessHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHeadlessHostRequest {
    return new GetHeadlessHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHeadlessHostRequest {
    return new GetHeadlessHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHeadlessHostRequest | PlainMessage<GetHeadlessHostRequest> | undefined, b: GetHeadlessHostRequest | PlainMessage<GetHeadlessHostRequest> | undefined): boolean {
    return proto3.util.equals(GetHeadlessHostRequest, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.GetHeadlessHostResponse
 */
export class GetHeadlessHostResponse extends Message<GetHeadlessHostResponse> {
  /**
   * @generated from field: hdlctrl.v1.HeadlessHost host = 1;
   */
  host?: HeadlessHost;

  constructor(data?: PartialMessage<GetHeadlessHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.GetHeadlessHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "message", T: HeadlessHost },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHeadlessHostResponse {
    return new GetHeadlessHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHeadlessHostResponse {
    return new GetHeadlessHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHeadlessHostResponse {
    return new GetHeadlessHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHeadlessHostResponse | PlainMessage<GetHeadlessHostResponse> | undefined, b: GetHeadlessHostResponse | PlainMessage<GetHeadlessHostResponse> | undefined): boolean {
    return proto3.util.equals(GetHeadlessHostResponse, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.AddHeadlessHostRequest
 */
export class AddHeadlessHostRequest extends Message<AddHeadlessHostRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<AddHeadlessHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.AddHeadlessHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddHeadlessHostRequest {
    return new AddHeadlessHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddHeadlessHostRequest {
    return new AddHeadlessHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddHeadlessHostRequest {
    return new AddHeadlessHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddHeadlessHostRequest | PlainMessage<AddHeadlessHostRequest> | undefined, b: AddHeadlessHostRequest | PlainMessage<AddHeadlessHostRequest> | undefined): boolean {
    return proto3.util.equals(AddHeadlessHostRequest, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.AddHeadlessHostResponse
 */
export class AddHeadlessHostResponse extends Message<AddHeadlessHostResponse> {
  /**
   * @generated from field: hdlctrl.v1.HeadlessHost host = 1;
   */
  host?: HeadlessHost;

  constructor(data?: PartialMessage<AddHeadlessHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.AddHeadlessHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "message", T: HeadlessHost },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddHeadlessHostResponse {
    return new AddHeadlessHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddHeadlessHostResponse {
    return new AddHeadlessHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddHeadlessHostResponse {
    return new AddHeadlessHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddHeadlessHostResponse | PlainMessage<AddHeadlessHostResponse> | undefined, b: AddHeadlessHostResponse | PlainMessage<AddHeadlessHostResponse> | undefined): boolean {
    return proto3.util.equals(AddHeadlessHostResponse, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.RemoveHeadlessHostRequest
 */
export class RemoveHeadlessHostRequest extends Message<RemoveHeadlessHostRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<RemoveHeadlessHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.RemoveHeadlessHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveHeadlessHostRequest {
    return new RemoveHeadlessHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveHeadlessHostRequest {
    return new RemoveHeadlessHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveHeadlessHostRequest {
    return new RemoveHeadlessHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveHeadlessHostRequest | PlainMessage<RemoveHeadlessHostRequest> | undefined, b: RemoveHeadlessHostRequest | PlainMessage<RemoveHeadlessHostRequest> | undefined): boolean {
    return proto3.util.equals(RemoveHeadlessHostRequest, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.RemoveHeadlessHostResponse
 */
export class RemoveHeadlessHostResponse extends Message<RemoveHeadlessHostResponse> {
  constructor(data?: PartialMessage<RemoveHeadlessHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.RemoveHeadlessHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveHeadlessHostResponse {
    return new RemoveHeadlessHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveHeadlessHostResponse {
    return new RemoveHeadlessHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveHeadlessHostResponse {
    return new RemoveHeadlessHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveHeadlessHostResponse | PlainMessage<RemoveHeadlessHostResponse> | undefined, b: RemoveHeadlessHostResponse | PlainMessage<RemoveHeadlessHostResponse> | undefined): boolean {
    return proto3.util.equals(RemoveHeadlessHostResponse, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.StartWorldRequest
 */
export class StartWorldRequest extends Message<StartWorldRequest> {
  /**
   * @generated from field: string host_id = 1;
   */
  hostId = "";

  /**
   * @generated from field: headless.v1.WorldStartupParameters parameters = 2;
   */
  parameters?: WorldStartupParameters;

  constructor(data?: PartialMessage<StartWorldRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.StartWorldRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parameters", kind: "message", T: WorldStartupParameters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorldRequest {
    return new StartWorldRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorldRequest {
    return new StartWorldRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorldRequest {
    return new StartWorldRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorldRequest | PlainMessage<StartWorldRequest> | undefined, b: StartWorldRequest | PlainMessage<StartWorldRequest> | undefined): boolean {
    return proto3.util.equals(StartWorldRequest, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.StartWorldResponse
 */
export class StartWorldResponse extends Message<StartWorldResponse> {
  /**
   * @generated from field: headless.v1.Session opened_session = 1;
   */
  openedSession?: Session;

  constructor(data?: PartialMessage<StartWorldResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.StartWorldResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "opened_session", kind: "message", T: Session },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorldResponse {
    return new StartWorldResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorldResponse {
    return new StartWorldResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorldResponse {
    return new StartWorldResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorldResponse | PlainMessage<StartWorldResponse> | undefined, b: StartWorldResponse | PlainMessage<StartWorldResponse> | undefined): boolean {
    return proto3.util.equals(StartWorldResponse, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.StopSessionRequest
 */
export class StopSessionRequest extends Message<StopSessionRequest> {
  /**
   * @generated from field: string host_id = 1;
   */
  hostId = "";

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  constructor(data?: PartialMessage<StopSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.StopSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSessionRequest {
    return new StopSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSessionRequest {
    return new StopSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSessionRequest {
    return new StopSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopSessionRequest | PlainMessage<StopSessionRequest> | undefined, b: StopSessionRequest | PlainMessage<StopSessionRequest> | undefined): boolean {
    return proto3.util.equals(StopSessionRequest, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.StopSessionResponse
 */
export class StopSessionResponse extends Message<StopSessionResponse> {
  constructor(data?: PartialMessage<StopSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.StopSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSessionResponse {
    return new StopSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSessionResponse {
    return new StopSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSessionResponse {
    return new StopSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopSessionResponse | PlainMessage<StopSessionResponse> | undefined, b: StopSessionResponse | PlainMessage<StopSessionResponse> | undefined): boolean {
    return proto3.util.equals(StopSessionResponse, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.InviteUserRequest
 */
export class InviteUserRequest extends Message<InviteUserRequest> {
  /**
   * @generated from field: string host_id = 1;
   */
  hostId = "";

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from oneof hdlctrl.v1.InviteUserRequest.user
   */
  user: {
    /**
     * @generated from field: string user_id = 3;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: string user_name = 4;
     */
    value: string;
    case: "userName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<InviteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.InviteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "user" },
    { no: 4, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "user" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined, b: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserRequest, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.InviteUserResponse
 */
export class InviteUserResponse extends Message<InviteUserResponse> {
  constructor(data?: PartialMessage<InviteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.InviteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined, b: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined): boolean {
    return proto3.util.equals(InviteUserResponse, a, b);
  }
}

/**
 * @generated from message hdlctrl.v1.HeadlessHost
 */
export class HeadlessHost extends Message<HeadlessHost> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  constructor(data?: PartialMessage<HeadlessHost>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hdlctrl.v1.HeadlessHost";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeadlessHost {
    return new HeadlessHost().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeadlessHost {
    return new HeadlessHost().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeadlessHost {
    return new HeadlessHost().fromJsonString(jsonString, options);
  }

  static equals(a: HeadlessHost | PlainMessage<HeadlessHost> | undefined, b: HeadlessHost | PlainMessage<HeadlessHost> | undefined): boolean {
    return proto3.util.equals(HeadlessHost, a, b);
  }
}

