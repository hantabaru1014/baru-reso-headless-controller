// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file headless/v1/headless.proto (package headless.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum headless.v1.AccessLevel
 */
export enum AccessLevel {
  /**
   * @generated from enum value: ACCESS_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACCESS_LEVEL_PRIVATE = 1;
   */
  PRIVATE = 1,

  /**
   * @generated from enum value: ACCESS_LEVEL_LAN = 2;
   */
  LAN = 2,

  /**
   * @generated from enum value: ACCESS_LEVEL_CONTACTS = 3;
   */
  CONTACTS = 3,

  /**
   * @generated from enum value: ACCESS_LEVEL_CONTACTS_PLUS = 4;
   */
  CONTACTS_PLUS = 4,

  /**
   * @generated from enum value: ACCESS_LEVEL_REGISTERED_USERS = 5;
   */
  REGISTERED_USERS = 5,

  /**
   * @generated from enum value: ACCESS_LEVEL_ANYONE = 6;
   */
  ANYONE = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(AccessLevel)
proto3.util.setEnumType(AccessLevel, "headless.v1.AccessLevel", [
  { no: 0, name: "ACCESS_LEVEL_UNSPECIFIED" },
  { no: 1, name: "ACCESS_LEVEL_PRIVATE" },
  { no: 2, name: "ACCESS_LEVEL_LAN" },
  { no: 3, name: "ACCESS_LEVEL_CONTACTS" },
  { no: 4, name: "ACCESS_LEVEL_CONTACTS_PLUS" },
  { no: 5, name: "ACCESS_LEVEL_REGISTERED_USERS" },
  { no: 6, name: "ACCESS_LEVEL_ANYONE" },
]);

/**
 * @generated from message headless.v1.ShutdownRequest
 */
export class ShutdownRequest extends Message<ShutdownRequest> {
  constructor(data?: PartialMessage<ShutdownRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.ShutdownRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownRequest {
    return new ShutdownRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownRequest {
    return new ShutdownRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownRequest {
    return new ShutdownRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownRequest | PlainMessage<ShutdownRequest> | undefined, b: ShutdownRequest | PlainMessage<ShutdownRequest> | undefined): boolean {
    return proto3.util.equals(ShutdownRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.ShutdownResponse
 */
export class ShutdownResponse extends Message<ShutdownResponse> {
  constructor(data?: PartialMessage<ShutdownResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.ShutdownResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownResponse {
    return new ShutdownResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownResponse {
    return new ShutdownResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownResponse {
    return new ShutdownResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownResponse | PlainMessage<ShutdownResponse> | undefined, b: ShutdownResponse | PlainMessage<ShutdownResponse> | undefined): boolean {
    return proto3.util.equals(ShutdownResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.ListSessionsRequest
 */
export class ListSessionsRequest extends Message<ListSessionsRequest> {
  constructor(data?: PartialMessage<ListSessionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.ListSessionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSessionsRequest {
    return new ListSessionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSessionsRequest {
    return new ListSessionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSessionsRequest {
    return new ListSessionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSessionsRequest | PlainMessage<ListSessionsRequest> | undefined, b: ListSessionsRequest | PlainMessage<ListSessionsRequest> | undefined): boolean {
    return proto3.util.equals(ListSessionsRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.ListSessionsResponse
 */
export class ListSessionsResponse extends Message<ListSessionsResponse> {
  /**
   * @generated from field: repeated headless.v1.Session sessions = 1;
   */
  sessions: Session[] = [];

  constructor(data?: PartialMessage<ListSessionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.ListSessionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sessions", kind: "message", T: Session, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSessionsResponse {
    return new ListSessionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSessionsResponse {
    return new ListSessionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSessionsResponse {
    return new ListSessionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSessionsResponse | PlainMessage<ListSessionsResponse> | undefined, b: ListSessionsResponse | PlainMessage<ListSessionsResponse> | undefined): boolean {
    return proto3.util.equals(ListSessionsResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.StartWorldRequest
 */
export class StartWorldRequest extends Message<StartWorldRequest> {
  /**
   * @generated from field: headless.v1.WorldStartupParameters parameters = 1;
   */
  parameters?: WorldStartupParameters;

  constructor(data?: PartialMessage<StartWorldRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.StartWorldRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parameters", kind: "message", T: WorldStartupParameters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorldRequest {
    return new StartWorldRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorldRequest {
    return new StartWorldRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorldRequest {
    return new StartWorldRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorldRequest | PlainMessage<StartWorldRequest> | undefined, b: StartWorldRequest | PlainMessage<StartWorldRequest> | undefined): boolean {
    return proto3.util.equals(StartWorldRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.StartWorldResponse
 */
export class StartWorldResponse extends Message<StartWorldResponse> {
  /**
   * @generated from field: headless.v1.Session opened_session = 1;
   */
  openedSession?: Session;

  constructor(data?: PartialMessage<StartWorldResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.StartWorldResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "opened_session", kind: "message", T: Session },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorldResponse {
    return new StartWorldResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorldResponse {
    return new StartWorldResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorldResponse {
    return new StartWorldResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartWorldResponse | PlainMessage<StartWorldResponse> | undefined, b: StartWorldResponse | PlainMessage<StartWorldResponse> | undefined): boolean {
    return proto3.util.equals(StartWorldResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.StopSessionRequest
 */
export class StopSessionRequest extends Message<StopSessionRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  constructor(data?: PartialMessage<StopSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.StopSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSessionRequest {
    return new StopSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSessionRequest {
    return new StopSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSessionRequest {
    return new StopSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopSessionRequest | PlainMessage<StopSessionRequest> | undefined, b: StopSessionRequest | PlainMessage<StopSessionRequest> | undefined): boolean {
    return proto3.util.equals(StopSessionRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.StopSessionResponse
 */
export class StopSessionResponse extends Message<StopSessionResponse> {
  constructor(data?: PartialMessage<StopSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.StopSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSessionResponse {
    return new StopSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSessionResponse {
    return new StopSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSessionResponse {
    return new StopSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopSessionResponse | PlainMessage<StopSessionResponse> | undefined, b: StopSessionResponse | PlainMessage<StopSessionResponse> | undefined): boolean {
    return proto3.util.equals(StopSessionResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.InviteUserRequest
 */
export class InviteUserRequest extends Message<InviteUserRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from oneof headless.v1.InviteUserRequest.user
   */
  user: {
    /**
     * @generated from field: string user_id = 2;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: string user_name = 3;
     */
    value: string;
    case: "userName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<InviteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.InviteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "user" },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "user" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined, b: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.InviteUserResponse
 */
export class InviteUserResponse extends Message<InviteUserResponse> {
  constructor(data?: PartialMessage<InviteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.InviteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserResponse {
    return new InviteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined, b: InviteUserResponse | PlainMessage<InviteUserResponse> | undefined): boolean {
    return proto3.util.equals(InviteUserResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.UpdateUserRoleRequest
 */
export class UpdateUserRoleRequest extends Message<UpdateUserRoleRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from oneof headless.v1.UpdateUserRoleRequest.user
   */
  user: {
    /**
     * @generated from field: string user_id = 2;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: string user_name = 3;
     */
    value: string;
    case: "userName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<UpdateUserRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.UpdateUserRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "user" },
    { no: 3, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "user" },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRoleRequest {
    return new UpdateUserRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRoleRequest {
    return new UpdateUserRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRoleRequest {
    return new UpdateUserRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRoleRequest | PlainMessage<UpdateUserRoleRequest> | undefined, b: UpdateUserRoleRequest | PlainMessage<UpdateUserRoleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRoleRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.UpdateUserRoleResponse
 */
export class UpdateUserRoleResponse extends Message<UpdateUserRoleResponse> {
  /**
   * 変更後のロール(無効なロールを指定した場合そのままの可能性)
   *
   * @generated from field: string role = 1;
   */
  role = "";

  constructor(data?: PartialMessage<UpdateUserRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.UpdateUserRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRoleResponse {
    return new UpdateUserRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRoleResponse {
    return new UpdateUserRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRoleResponse {
    return new UpdateUserRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRoleResponse | PlainMessage<UpdateUserRoleResponse> | undefined, b: UpdateUserRoleResponse | PlainMessage<UpdateUserRoleResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserRoleResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.UpdateSessionParametersRequest
 */
export class UpdateSessionParametersRequest extends Message<UpdateSessionParametersRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: optional string session_name = 2;
   */
  sessionName?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional int32 max_users = 4;
   */
  maxUsers?: number;

  /**
   * @generated from field: optional headless.v1.AccessLevel access_level = 5;
   */
  accessLevel?: AccessLevel;

  constructor(data?: PartialMessage<UpdateSessionParametersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.UpdateSessionParametersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "max_users", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "access_level", kind: "enum", T: proto3.getEnumType(AccessLevel), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSessionParametersRequest {
    return new UpdateSessionParametersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSessionParametersRequest {
    return new UpdateSessionParametersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSessionParametersRequest {
    return new UpdateSessionParametersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSessionParametersRequest | PlainMessage<UpdateSessionParametersRequest> | undefined, b: UpdateSessionParametersRequest | PlainMessage<UpdateSessionParametersRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSessionParametersRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.UpdateSessionParametersResponse
 */
export class UpdateSessionParametersResponse extends Message<UpdateSessionParametersResponse> {
  constructor(data?: PartialMessage<UpdateSessionParametersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.UpdateSessionParametersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSessionParametersResponse {
    return new UpdateSessionParametersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSessionParametersResponse {
    return new UpdateSessionParametersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSessionParametersResponse {
    return new UpdateSessionParametersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSessionParametersResponse | PlainMessage<UpdateSessionParametersResponse> | undefined, b: UpdateSessionParametersResponse | PlainMessage<UpdateSessionParametersResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSessionParametersResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.ListUsersInSessionRequest
 */
export class ListUsersInSessionRequest extends Message<ListUsersInSessionRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  constructor(data?: PartialMessage<ListUsersInSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.ListUsersInSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersInSessionRequest {
    return new ListUsersInSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersInSessionRequest {
    return new ListUsersInSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersInSessionRequest {
    return new ListUsersInSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersInSessionRequest | PlainMessage<ListUsersInSessionRequest> | undefined, b: ListUsersInSessionRequest | PlainMessage<ListUsersInSessionRequest> | undefined): boolean {
    return proto3.util.equals(ListUsersInSessionRequest, a, b);
  }
}

/**
 * @generated from message headless.v1.ListUsersInSessionResponse
 */
export class ListUsersInSessionResponse extends Message<ListUsersInSessionResponse> {
  /**
   * @generated from field: repeated headless.v1.UserInSession users = 1;
   */
  users: UserInSession[] = [];

  constructor(data?: PartialMessage<ListUsersInSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.ListUsersInSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: UserInSession, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersInSessionResponse {
    return new ListUsersInSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersInSessionResponse {
    return new ListUsersInSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersInSessionResponse {
    return new ListUsersInSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersInSessionResponse | PlainMessage<ListUsersInSessionResponse> | undefined, b: ListUsersInSessionResponse | PlainMessage<ListUsersInSessionResponse> | undefined): boolean {
    return proto3.util.equals(ListUsersInSessionResponse, a, b);
  }
}

/**
 * @generated from message headless.v1.UserInSession
 */
export class UserInSession extends Message<UserInSession> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  /**
   * @generated from field: bool is_present = 4;
   */
  isPresent = false;

  constructor(data?: PartialMessage<UserInSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.UserInSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_present", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInSession {
    return new UserInSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInSession {
    return new UserInSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInSession {
    return new UserInSession().fromJsonString(jsonString, options);
  }

  static equals(a: UserInSession | PlainMessage<UserInSession> | undefined, b: UserInSession | PlainMessage<UserInSession> | undefined): boolean {
    return proto3.util.equals(UserInSession, a, b);
  }
}

/**
 * @generated from message headless.v1.Session
 */
export class Session extends Message<Session> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: headless.v1.AccessLevel access_level = 4;
   */
  accessLevel = AccessLevel.UNSPECIFIED;

  /**
   * @generated from field: optional string thumbnail_url = 5;
   */
  thumbnailUrl?: string;

  /**
   * @generated from field: headless.v1.WorldStartupParameters startup_parameters = 6;
   */
  startupParameters?: WorldStartupParameters;

  constructor(data?: PartialMessage<Session>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.Session";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "access_level", kind: "enum", T: proto3.getEnumType(AccessLevel) },
    { no: 5, name: "thumbnail_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "startup_parameters", kind: "message", T: WorldStartupParameters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session {
    return new Session().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session {
    return new Session().fromJsonString(jsonString, options);
  }

  static equals(a: Session | PlainMessage<Session> | undefined, b: Session | PlainMessage<Session> | undefined): boolean {
    return proto3.util.equals(Session, a, b);
  }
}

/**
 * @generated from message headless.v1.WorldStartupParameters
 */
export class WorldStartupParameters extends Message<WorldStartupParameters> {
  /**
   * @generated from field: optional string session_name = 1;
   */
  sessionName?: string;

  /**
   * @generated from field: optional string custom_session_id = 2;
   */
  customSessionId?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional int32 max_users = 4;
   */
  maxUsers?: number;

  /**
   * @generated from field: headless.v1.AccessLevel access_level = 5;
   */
  accessLevel = AccessLevel.UNSPECIFIED;

  /**
   * @generated from oneof headless.v1.WorldStartupParameters.load_world
   */
  loadWorld: {
    /**
     * @generated from field: string load_world_url = 6;
     */
    value: string;
    case: "loadWorldUrl";
  } | {
    /**
     * @generated from field: string load_world_preset_name = 7;
     */
    value: string;
    case: "loadWorldPresetName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated string auto_invite_usernames = 8;
   */
  autoInviteUsernames: string[] = [];

  constructor(data?: PartialMessage<WorldStartupParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "headless.v1.WorldStartupParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "custom_session_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "max_users", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "access_level", kind: "enum", T: proto3.getEnumType(AccessLevel) },
    { no: 6, name: "load_world_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "load_world" },
    { no: 7, name: "load_world_preset_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "load_world" },
    { no: 8, name: "auto_invite_usernames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorldStartupParameters {
    return new WorldStartupParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorldStartupParameters {
    return new WorldStartupParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorldStartupParameters {
    return new WorldStartupParameters().fromJsonString(jsonString, options);
  }

  static equals(a: WorldStartupParameters | PlainMessage<WorldStartupParameters> | undefined, b: WorldStartupParameters | PlainMessage<WorldStartupParameters> | undefined): boolean {
    return proto3.util.equals(WorldStartupParameters, a, b);
  }
}

