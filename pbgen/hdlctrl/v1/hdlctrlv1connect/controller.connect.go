// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hdlctrl/v1/controller.proto

package hdlctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/hdlctrl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControllerServiceName is the fully-qualified name of the ControllerService service.
	ControllerServiceName = "hdlctrl.v1.ControllerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControllerServiceListHeadlessHostProcedure is the fully-qualified name of the ControllerService's
	// ListHeadlessHost RPC.
	ControllerServiceListHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/ListHeadlessHost"
	// ControllerServiceGetHeadlessHostProcedure is the fully-qualified name of the ControllerService's
	// GetHeadlessHost RPC.
	ControllerServiceGetHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/GetHeadlessHost"
	// ControllerServiceStartWorldProcedure is the fully-qualified name of the ControllerService's
	// StartWorld RPC.
	ControllerServiceStartWorldProcedure = "/hdlctrl.v1.ControllerService/StartWorld"
	// ControllerServiceStopSessionProcedure is the fully-qualified name of the ControllerService's
	// StopSession RPC.
	ControllerServiceStopSessionProcedure = "/hdlctrl.v1.ControllerService/StopSession"
	// ControllerServiceInviteUserProcedure is the fully-qualified name of the ControllerService's
	// InviteUser RPC.
	ControllerServiceInviteUserProcedure = "/hdlctrl.v1.ControllerService/InviteUser"
)

// ControllerServiceClient is a client for the hdlctrl.v1.ControllerService service.
type ControllerServiceClient interface {
	ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error)
	GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
}

// NewControllerServiceClient constructs a client for the hdlctrl.v1.ControllerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controllerServiceMethods := v1.File_hdlctrl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	return &controllerServiceClient{
		listHeadlessHost: connect.NewClient[v1.ListHeadlessHostRequest, v1.ListHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceListHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		getHeadlessHost: connect.NewClient[v1.GetHeadlessHostRequest, v1.GetHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceGetHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		startWorld: connect.NewClient[v1.StartWorldRequest, v1.StartWorldResponse](
			httpClient,
			baseURL+ControllerServiceStartWorldProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StartWorld")),
			connect.WithClientOptions(opts...),
		),
		stopSession: connect.NewClient[v1.StopSessionRequest, v1.StopSessionResponse](
			httpClient,
			baseURL+ControllerServiceStopSessionProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StopSession")),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+ControllerServiceInviteUserProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("InviteUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerServiceClient implements ControllerServiceClient.
type controllerServiceClient struct {
	listHeadlessHost *connect.Client[v1.ListHeadlessHostRequest, v1.ListHeadlessHostResponse]
	getHeadlessHost  *connect.Client[v1.GetHeadlessHostRequest, v1.GetHeadlessHostResponse]
	startWorld       *connect.Client[v1.StartWorldRequest, v1.StartWorldResponse]
	stopSession      *connect.Client[v1.StopSessionRequest, v1.StopSessionResponse]
	inviteUser       *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
}

// ListHeadlessHost calls hdlctrl.v1.ControllerService.ListHeadlessHost.
func (c *controllerServiceClient) ListHeadlessHost(ctx context.Context, req *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error) {
	return c.listHeadlessHost.CallUnary(ctx, req)
}

// GetHeadlessHost calls hdlctrl.v1.ControllerService.GetHeadlessHost.
func (c *controllerServiceClient) GetHeadlessHost(ctx context.Context, req *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error) {
	return c.getHeadlessHost.CallUnary(ctx, req)
}

// StartWorld calls hdlctrl.v1.ControllerService.StartWorld.
func (c *controllerServiceClient) StartWorld(ctx context.Context, req *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return c.startWorld.CallUnary(ctx, req)
}

// StopSession calls hdlctrl.v1.ControllerService.StopSession.
func (c *controllerServiceClient) StopSession(ctx context.Context, req *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return c.stopSession.CallUnary(ctx, req)
}

// InviteUser calls hdlctrl.v1.ControllerService.InviteUser.
func (c *controllerServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// ControllerServiceHandler is an implementation of the hdlctrl.v1.ControllerService service.
type ControllerServiceHandler interface {
	ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error)
	GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
}

// NewControllerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerServiceHandler(svc ControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerServiceMethods := v1.File_hdlctrl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	controllerServiceListHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceListHeadlessHostProcedure,
		svc.ListHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceGetHeadlessHostProcedure,
		svc.GetHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStartWorldHandler := connect.NewUnaryHandler(
		ControllerServiceStartWorldProcedure,
		svc.StartWorld,
		connect.WithSchema(controllerServiceMethods.ByName("StartWorld")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStopSessionHandler := connect.NewUnaryHandler(
		ControllerServiceStopSessionProcedure,
		svc.StopSession,
		connect.WithSchema(controllerServiceMethods.ByName("StopSession")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceInviteUserHandler := connect.NewUnaryHandler(
		ControllerServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(controllerServiceMethods.ByName("InviteUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hdlctrl.v1.ControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerServiceListHeadlessHostProcedure:
			controllerServiceListHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceGetHeadlessHostProcedure:
			controllerServiceGetHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceStartWorldProcedure:
			controllerServiceStartWorldHandler.ServeHTTP(w, r)
		case ControllerServiceStopSessionProcedure:
			controllerServiceStopSessionHandler.ServeHTTP(w, r)
		case ControllerServiceInviteUserProcedure:
			controllerServiceInviteUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerServiceHandler struct{}

func (UnimplementedControllerServiceHandler) ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.GetHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.StartWorld is not implemented"))
}

func (UnimplementedControllerServiceHandler) StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.StopSession is not implemented"))
}

func (UnimplementedControllerServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.InviteUser is not implemented"))
}
