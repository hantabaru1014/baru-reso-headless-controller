// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hdlctrl/v1/controller.proto

package hdlctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/hdlctrl/v1"
	v11 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/headless/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControllerServiceName is the fully-qualified name of the ControllerService service.
	ControllerServiceName = "hdlctrl.v1.ControllerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControllerServiceListHeadlessHostProcedure is the fully-qualified name of the ControllerService's
	// ListHeadlessHost RPC.
	ControllerServiceListHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/ListHeadlessHost"
	// ControllerServiceGetHeadlessHostProcedure is the fully-qualified name of the ControllerService's
	// GetHeadlessHost RPC.
	ControllerServiceGetHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/GetHeadlessHost"
	// ControllerServiceGetHeadlessHostLogsProcedure is the fully-qualified name of the
	// ControllerService's GetHeadlessHostLogs RPC.
	ControllerServiceGetHeadlessHostLogsProcedure = "/hdlctrl.v1.ControllerService/GetHeadlessHostLogs"
	// ControllerServiceShutdownHeadlessHostProcedure is the fully-qualified name of the
	// ControllerService's ShutdownHeadlessHost RPC.
	ControllerServiceShutdownHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/ShutdownHeadlessHost"
	// ControllerServiceUpdateHeadlessHostSettingsProcedure is the fully-qualified name of the
	// ControllerService's UpdateHeadlessHostSettings RPC.
	ControllerServiceUpdateHeadlessHostSettingsProcedure = "/hdlctrl.v1.ControllerService/UpdateHeadlessHostSettings"
	// ControllerServiceRestartHeadlessHostProcedure is the fully-qualified name of the
	// ControllerService's RestartHeadlessHost RPC.
	ControllerServiceRestartHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/RestartHeadlessHost"
	// ControllerServiceStartHeadlessHostProcedure is the fully-qualified name of the
	// ControllerService's StartHeadlessHost RPC.
	ControllerServiceStartHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/StartHeadlessHost"
	// ControllerServiceAllowHostAccessProcedure is the fully-qualified name of the ControllerService's
	// AllowHostAccess RPC.
	ControllerServiceAllowHostAccessProcedure = "/hdlctrl.v1.ControllerService/AllowHostAccess"
	// ControllerServiceDenyHostAccessProcedure is the fully-qualified name of the ControllerService's
	// DenyHostAccess RPC.
	ControllerServiceDenyHostAccessProcedure = "/hdlctrl.v1.ControllerService/DenyHostAccess"
	// ControllerServiceListHeadlessHostImageTagsProcedure is the fully-qualified name of the
	// ControllerService's ListHeadlessHostImageTags RPC.
	ControllerServiceListHeadlessHostImageTagsProcedure = "/hdlctrl.v1.ControllerService/ListHeadlessHostImageTags"
	// ControllerServiceDeleteHeadlessHostProcedure is the fully-qualified name of the
	// ControllerService's DeleteHeadlessHost RPC.
	ControllerServiceDeleteHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/DeleteHeadlessHost"
	// ControllerServiceCreateHeadlessAccountProcedure is the fully-qualified name of the
	// ControllerService's CreateHeadlessAccount RPC.
	ControllerServiceCreateHeadlessAccountProcedure = "/hdlctrl.v1.ControllerService/CreateHeadlessAccount"
	// ControllerServiceListHeadlessAccountsProcedure is the fully-qualified name of the
	// ControllerService's ListHeadlessAccounts RPC.
	ControllerServiceListHeadlessAccountsProcedure = "/hdlctrl.v1.ControllerService/ListHeadlessAccounts"
	// ControllerServiceDeleteHeadlessAccountProcedure is the fully-qualified name of the
	// ControllerService's DeleteHeadlessAccount RPC.
	ControllerServiceDeleteHeadlessAccountProcedure = "/hdlctrl.v1.ControllerService/DeleteHeadlessAccount"
	// ControllerServiceUpdateHeadlessAccountCredentialsProcedure is the fully-qualified name of the
	// ControllerService's UpdateHeadlessAccountCredentials RPC.
	ControllerServiceUpdateHeadlessAccountCredentialsProcedure = "/hdlctrl.v1.ControllerService/UpdateHeadlessAccountCredentials"
	// ControllerServiceFetchWorldInfoProcedure is the fully-qualified name of the ControllerService's
	// FetchWorldInfo RPC.
	ControllerServiceFetchWorldInfoProcedure = "/hdlctrl.v1.ControllerService/FetchWorldInfo"
	// ControllerServiceSearchUserInfoProcedure is the fully-qualified name of the ControllerService's
	// SearchUserInfo RPC.
	ControllerServiceSearchUserInfoProcedure = "/hdlctrl.v1.ControllerService/SearchUserInfo"
	// ControllerServiceGetFriendRequestsProcedure is the fully-qualified name of the
	// ControllerService's GetFriendRequests RPC.
	ControllerServiceGetFriendRequestsProcedure = "/hdlctrl.v1.ControllerService/GetFriendRequests"
	// ControllerServiceAcceptFriendRequestsProcedure is the fully-qualified name of the
	// ControllerService's AcceptFriendRequests RPC.
	ControllerServiceAcceptFriendRequestsProcedure = "/hdlctrl.v1.ControllerService/AcceptFriendRequests"
	// ControllerServiceSearchSessionsProcedure is the fully-qualified name of the ControllerService's
	// SearchSessions RPC.
	ControllerServiceSearchSessionsProcedure = "/hdlctrl.v1.ControllerService/SearchSessions"
	// ControllerServiceGetSessionDetailsProcedure is the fully-qualified name of the
	// ControllerService's GetSessionDetails RPC.
	ControllerServiceGetSessionDetailsProcedure = "/hdlctrl.v1.ControllerService/GetSessionDetails"
	// ControllerServiceStartWorldProcedure is the fully-qualified name of the ControllerService's
	// StartWorld RPC.
	ControllerServiceStartWorldProcedure = "/hdlctrl.v1.ControllerService/StartWorld"
	// ControllerServiceStopSessionProcedure is the fully-qualified name of the ControllerService's
	// StopSession RPC.
	ControllerServiceStopSessionProcedure = "/hdlctrl.v1.ControllerService/StopSession"
	// ControllerServiceDeleteEndedSessionProcedure is the fully-qualified name of the
	// ControllerService's DeleteEndedSession RPC.
	ControllerServiceDeleteEndedSessionProcedure = "/hdlctrl.v1.ControllerService/DeleteEndedSession"
	// ControllerServiceSaveSessionWorldProcedure is the fully-qualified name of the ControllerService's
	// SaveSessionWorld RPC.
	ControllerServiceSaveSessionWorldProcedure = "/hdlctrl.v1.ControllerService/SaveSessionWorld"
	// ControllerServiceInviteUserProcedure is the fully-qualified name of the ControllerService's
	// InviteUser RPC.
	ControllerServiceInviteUserProcedure = "/hdlctrl.v1.ControllerService/InviteUser"
	// ControllerServiceUpdateUserRoleProcedure is the fully-qualified name of the ControllerService's
	// UpdateUserRole RPC.
	ControllerServiceUpdateUserRoleProcedure = "/hdlctrl.v1.ControllerService/UpdateUserRole"
	// ControllerServiceUpdateSessionParametersProcedure is the fully-qualified name of the
	// ControllerService's UpdateSessionParameters RPC.
	ControllerServiceUpdateSessionParametersProcedure = "/hdlctrl.v1.ControllerService/UpdateSessionParameters"
	// ControllerServiceUpdateSessionExtraSettingsProcedure is the fully-qualified name of the
	// ControllerService's UpdateSessionExtraSettings RPC.
	ControllerServiceUpdateSessionExtraSettingsProcedure = "/hdlctrl.v1.ControllerService/UpdateSessionExtraSettings"
	// ControllerServiceListUsersInSessionProcedure is the fully-qualified name of the
	// ControllerService's ListUsersInSession RPC.
	ControllerServiceListUsersInSessionProcedure = "/hdlctrl.v1.ControllerService/ListUsersInSession"
	// ControllerServiceKickUserProcedure is the fully-qualified name of the ControllerService's
	// KickUser RPC.
	ControllerServiceKickUserProcedure = "/hdlctrl.v1.ControllerService/KickUser"
	// ControllerServiceBanUserProcedure is the fully-qualified name of the ControllerService's BanUser
	// RPC.
	ControllerServiceBanUserProcedure = "/hdlctrl.v1.ControllerService/BanUser"
)

// ControllerServiceClient is a client for the hdlctrl.v1.ControllerService service.
type ControllerServiceClient interface {
	// ホスト系
	ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error)
	GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error)
	GetHeadlessHostLogs(context.Context, *connect.Request[v1.GetHeadlessHostLogsRequest]) (*connect.Response[v1.GetHeadlessHostLogsResponse], error)
	ShutdownHeadlessHost(context.Context, *connect.Request[v1.ShutdownHeadlessHostRequest]) (*connect.Response[v1.ShutdownHeadlessHostResponse], error)
	UpdateHeadlessHostSettings(context.Context, *connect.Request[v1.UpdateHeadlessHostSettingsRequest]) (*connect.Response[v1.UpdateHeadlessHostSettingsResponse], error)
	RestartHeadlessHost(context.Context, *connect.Request[v1.RestartHeadlessHostRequest]) (*connect.Response[v1.RestartHeadlessHostResponse], error)
	StartHeadlessHost(context.Context, *connect.Request[v1.StartHeadlessHostRequest]) (*connect.Response[v1.StartHeadlessHostResponse], error)
	AllowHostAccess(context.Context, *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error)
	DenyHostAccess(context.Context, *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error)
	ListHeadlessHostImageTags(context.Context, *connect.Request[v1.ListHeadlessHostImageTagsRequest]) (*connect.Response[v1.ListHeadlessHostImageTagsResponse], error)
	DeleteHeadlessHost(context.Context, *connect.Request[v1.DeleteHeadlessHostRequest]) (*connect.Response[v1.DeleteHeadlessHostResponse], error)
	// アカウント系
	CreateHeadlessAccount(context.Context, *connect.Request[v1.CreateHeadlessAccountRequest]) (*connect.Response[v1.CreateHeadlessAccountResponse], error)
	ListHeadlessAccounts(context.Context, *connect.Request[v1.ListHeadlessAccountsRequest]) (*connect.Response[v1.ListHeadlessAccountsResponse], error)
	DeleteHeadlessAccount(context.Context, *connect.Request[v1.DeleteHeadlessAccountRequest]) (*connect.Response[v1.DeleteHeadlessAccountResponse], error)
	UpdateHeadlessAccountCredentials(context.Context, *connect.Request[v1.UpdateHeadlessAccountCredentialsRequest]) (*connect.Response[v1.UpdateHeadlessAccountCredentialsResponse], error)
	// Cloud系
	FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error)
	SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error)
	GetFriendRequests(context.Context, *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error)
	AcceptFriendRequests(context.Context, *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error)
	// セッション系
	SearchSessions(context.Context, *connect.Request[v1.SearchSessionsRequest]) (*connect.Response[v1.SearchSessionsResponse], error)
	GetSessionDetails(context.Context, *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	DeleteEndedSession(context.Context, *connect.Request[v1.DeleteEndedSessionRequest]) (*connect.Response[v1.DeleteEndedSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	UpdateSessionExtraSettings(context.Context, *connect.Request[v1.UpdateSessionExtraSettingsRequest]) (*connect.Response[v1.UpdateSessionExtraSettingsResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
	KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error)
	BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error)
}

// NewControllerServiceClient constructs a client for the hdlctrl.v1.ControllerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controllerServiceMethods := v1.File_hdlctrl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	return &controllerServiceClient{
		listHeadlessHost: connect.NewClient[v1.ListHeadlessHostRequest, v1.ListHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceListHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		getHeadlessHost: connect.NewClient[v1.GetHeadlessHostRequest, v1.GetHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceGetHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		getHeadlessHostLogs: connect.NewClient[v1.GetHeadlessHostLogsRequest, v1.GetHeadlessHostLogsResponse](
			httpClient,
			baseURL+ControllerServiceGetHeadlessHostLogsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHostLogs")),
			connect.WithClientOptions(opts...),
		),
		shutdownHeadlessHost: connect.NewClient[v1.ShutdownHeadlessHostRequest, v1.ShutdownHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceShutdownHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ShutdownHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		updateHeadlessHostSettings: connect.NewClient[v1.UpdateHeadlessHostSettingsRequest, v1.UpdateHeadlessHostSettingsResponse](
			httpClient,
			baseURL+ControllerServiceUpdateHeadlessHostSettingsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("UpdateHeadlessHostSettings")),
			connect.WithClientOptions(opts...),
		),
		restartHeadlessHost: connect.NewClient[v1.RestartHeadlessHostRequest, v1.RestartHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceRestartHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("RestartHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		startHeadlessHost: connect.NewClient[v1.StartHeadlessHostRequest, v1.StartHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceStartHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StartHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		allowHostAccess: connect.NewClient[v1.AllowHostAccessRequest, v1.AllowHostAccessResponse](
			httpClient,
			baseURL+ControllerServiceAllowHostAccessProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("AllowHostAccess")),
			connect.WithClientOptions(opts...),
		),
		denyHostAccess: connect.NewClient[v1.DenyHostAccessRequest, v1.DenyHostAccessResponse](
			httpClient,
			baseURL+ControllerServiceDenyHostAccessProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("DenyHostAccess")),
			connect.WithClientOptions(opts...),
		),
		listHeadlessHostImageTags: connect.NewClient[v1.ListHeadlessHostImageTagsRequest, v1.ListHeadlessHostImageTagsResponse](
			httpClient,
			baseURL+ControllerServiceListHeadlessHostImageTagsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHostImageTags")),
			connect.WithClientOptions(opts...),
		),
		deleteHeadlessHost: connect.NewClient[v1.DeleteHeadlessHostRequest, v1.DeleteHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceDeleteHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("DeleteHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		createHeadlessAccount: connect.NewClient[v1.CreateHeadlessAccountRequest, v1.CreateHeadlessAccountResponse](
			httpClient,
			baseURL+ControllerServiceCreateHeadlessAccountProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("CreateHeadlessAccount")),
			connect.WithClientOptions(opts...),
		),
		listHeadlessAccounts: connect.NewClient[v1.ListHeadlessAccountsRequest, v1.ListHeadlessAccountsResponse](
			httpClient,
			baseURL+ControllerServiceListHeadlessAccountsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessAccounts")),
			connect.WithClientOptions(opts...),
		),
		deleteHeadlessAccount: connect.NewClient[v1.DeleteHeadlessAccountRequest, v1.DeleteHeadlessAccountResponse](
			httpClient,
			baseURL+ControllerServiceDeleteHeadlessAccountProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("DeleteHeadlessAccount")),
			connect.WithClientOptions(opts...),
		),
		updateHeadlessAccountCredentials: connect.NewClient[v1.UpdateHeadlessAccountCredentialsRequest, v1.UpdateHeadlessAccountCredentialsResponse](
			httpClient,
			baseURL+ControllerServiceUpdateHeadlessAccountCredentialsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("UpdateHeadlessAccountCredentials")),
			connect.WithClientOptions(opts...),
		),
		fetchWorldInfo: connect.NewClient[v1.FetchWorldInfoRequest, v11.FetchWorldInfoResponse](
			httpClient,
			baseURL+ControllerServiceFetchWorldInfoProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("FetchWorldInfo")),
			connect.WithClientOptions(opts...),
		),
		searchUserInfo: connect.NewClient[v1.SearchUserInfoRequest, v11.SearchUserInfoResponse](
			httpClient,
			baseURL+ControllerServiceSearchUserInfoProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("SearchUserInfo")),
			connect.WithClientOptions(opts...),
		),
		getFriendRequests: connect.NewClient[v1.GetFriendRequestsRequest, v1.GetFriendRequestsResponse](
			httpClient,
			baseURL+ControllerServiceGetFriendRequestsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetFriendRequests")),
			connect.WithClientOptions(opts...),
		),
		acceptFriendRequests: connect.NewClient[v1.AcceptFriendRequestsRequest, v1.AcceptFriendRequestsResponse](
			httpClient,
			baseURL+ControllerServiceAcceptFriendRequestsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("AcceptFriendRequests")),
			connect.WithClientOptions(opts...),
		),
		searchSessions: connect.NewClient[v1.SearchSessionsRequest, v1.SearchSessionsResponse](
			httpClient,
			baseURL+ControllerServiceSearchSessionsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("SearchSessions")),
			connect.WithClientOptions(opts...),
		),
		getSessionDetails: connect.NewClient[v1.GetSessionDetailsRequest, v1.GetSessionDetailsResponse](
			httpClient,
			baseURL+ControllerServiceGetSessionDetailsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetSessionDetails")),
			connect.WithClientOptions(opts...),
		),
		startWorld: connect.NewClient[v1.StartWorldRequest, v1.StartWorldResponse](
			httpClient,
			baseURL+ControllerServiceStartWorldProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StartWorld")),
			connect.WithClientOptions(opts...),
		),
		stopSession: connect.NewClient[v1.StopSessionRequest, v1.StopSessionResponse](
			httpClient,
			baseURL+ControllerServiceStopSessionProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StopSession")),
			connect.WithClientOptions(opts...),
		),
		deleteEndedSession: connect.NewClient[v1.DeleteEndedSessionRequest, v1.DeleteEndedSessionResponse](
			httpClient,
			baseURL+ControllerServiceDeleteEndedSessionProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("DeleteEndedSession")),
			connect.WithClientOptions(opts...),
		),
		saveSessionWorld: connect.NewClient[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse](
			httpClient,
			baseURL+ControllerServiceSaveSessionWorldProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("SaveSessionWorld")),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+ControllerServiceInviteUserProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("InviteUser")),
			connect.WithClientOptions(opts...),
		),
		updateUserRole: connect.NewClient[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse](
			httpClient,
			baseURL+ControllerServiceUpdateUserRoleProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("UpdateUserRole")),
			connect.WithClientOptions(opts...),
		),
		updateSessionParameters: connect.NewClient[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse](
			httpClient,
			baseURL+ControllerServiceUpdateSessionParametersProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("UpdateSessionParameters")),
			connect.WithClientOptions(opts...),
		),
		updateSessionExtraSettings: connect.NewClient[v1.UpdateSessionExtraSettingsRequest, v1.UpdateSessionExtraSettingsResponse](
			httpClient,
			baseURL+ControllerServiceUpdateSessionExtraSettingsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("UpdateSessionExtraSettings")),
			connect.WithClientOptions(opts...),
		),
		listUsersInSession: connect.NewClient[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse](
			httpClient,
			baseURL+ControllerServiceListUsersInSessionProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListUsersInSession")),
			connect.WithClientOptions(opts...),
		),
		kickUser: connect.NewClient[v1.KickUserRequest, v1.KickUserResponse](
			httpClient,
			baseURL+ControllerServiceKickUserProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("KickUser")),
			connect.WithClientOptions(opts...),
		),
		banUser: connect.NewClient[v1.BanUserRequest, v1.BanUserResponse](
			httpClient,
			baseURL+ControllerServiceBanUserProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("BanUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerServiceClient implements ControllerServiceClient.
type controllerServiceClient struct {
	listHeadlessHost                 *connect.Client[v1.ListHeadlessHostRequest, v1.ListHeadlessHostResponse]
	getHeadlessHost                  *connect.Client[v1.GetHeadlessHostRequest, v1.GetHeadlessHostResponse]
	getHeadlessHostLogs              *connect.Client[v1.GetHeadlessHostLogsRequest, v1.GetHeadlessHostLogsResponse]
	shutdownHeadlessHost             *connect.Client[v1.ShutdownHeadlessHostRequest, v1.ShutdownHeadlessHostResponse]
	updateHeadlessHostSettings       *connect.Client[v1.UpdateHeadlessHostSettingsRequest, v1.UpdateHeadlessHostSettingsResponse]
	restartHeadlessHost              *connect.Client[v1.RestartHeadlessHostRequest, v1.RestartHeadlessHostResponse]
	startHeadlessHost                *connect.Client[v1.StartHeadlessHostRequest, v1.StartHeadlessHostResponse]
	allowHostAccess                  *connect.Client[v1.AllowHostAccessRequest, v1.AllowHostAccessResponse]
	denyHostAccess                   *connect.Client[v1.DenyHostAccessRequest, v1.DenyHostAccessResponse]
	listHeadlessHostImageTags        *connect.Client[v1.ListHeadlessHostImageTagsRequest, v1.ListHeadlessHostImageTagsResponse]
	deleteHeadlessHost               *connect.Client[v1.DeleteHeadlessHostRequest, v1.DeleteHeadlessHostResponse]
	createHeadlessAccount            *connect.Client[v1.CreateHeadlessAccountRequest, v1.CreateHeadlessAccountResponse]
	listHeadlessAccounts             *connect.Client[v1.ListHeadlessAccountsRequest, v1.ListHeadlessAccountsResponse]
	deleteHeadlessAccount            *connect.Client[v1.DeleteHeadlessAccountRequest, v1.DeleteHeadlessAccountResponse]
	updateHeadlessAccountCredentials *connect.Client[v1.UpdateHeadlessAccountCredentialsRequest, v1.UpdateHeadlessAccountCredentialsResponse]
	fetchWorldInfo                   *connect.Client[v1.FetchWorldInfoRequest, v11.FetchWorldInfoResponse]
	searchUserInfo                   *connect.Client[v1.SearchUserInfoRequest, v11.SearchUserInfoResponse]
	getFriendRequests                *connect.Client[v1.GetFriendRequestsRequest, v1.GetFriendRequestsResponse]
	acceptFriendRequests             *connect.Client[v1.AcceptFriendRequestsRequest, v1.AcceptFriendRequestsResponse]
	searchSessions                   *connect.Client[v1.SearchSessionsRequest, v1.SearchSessionsResponse]
	getSessionDetails                *connect.Client[v1.GetSessionDetailsRequest, v1.GetSessionDetailsResponse]
	startWorld                       *connect.Client[v1.StartWorldRequest, v1.StartWorldResponse]
	stopSession                      *connect.Client[v1.StopSessionRequest, v1.StopSessionResponse]
	deleteEndedSession               *connect.Client[v1.DeleteEndedSessionRequest, v1.DeleteEndedSessionResponse]
	saveSessionWorld                 *connect.Client[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse]
	inviteUser                       *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	updateUserRole                   *connect.Client[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse]
	updateSessionParameters          *connect.Client[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse]
	updateSessionExtraSettings       *connect.Client[v1.UpdateSessionExtraSettingsRequest, v1.UpdateSessionExtraSettingsResponse]
	listUsersInSession               *connect.Client[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse]
	kickUser                         *connect.Client[v1.KickUserRequest, v1.KickUserResponse]
	banUser                          *connect.Client[v1.BanUserRequest, v1.BanUserResponse]
}

// ListHeadlessHost calls hdlctrl.v1.ControllerService.ListHeadlessHost.
func (c *controllerServiceClient) ListHeadlessHost(ctx context.Context, req *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error) {
	return c.listHeadlessHost.CallUnary(ctx, req)
}

// GetHeadlessHost calls hdlctrl.v1.ControllerService.GetHeadlessHost.
func (c *controllerServiceClient) GetHeadlessHost(ctx context.Context, req *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error) {
	return c.getHeadlessHost.CallUnary(ctx, req)
}

// GetHeadlessHostLogs calls hdlctrl.v1.ControllerService.GetHeadlessHostLogs.
func (c *controllerServiceClient) GetHeadlessHostLogs(ctx context.Context, req *connect.Request[v1.GetHeadlessHostLogsRequest]) (*connect.Response[v1.GetHeadlessHostLogsResponse], error) {
	return c.getHeadlessHostLogs.CallUnary(ctx, req)
}

// ShutdownHeadlessHost calls hdlctrl.v1.ControllerService.ShutdownHeadlessHost.
func (c *controllerServiceClient) ShutdownHeadlessHost(ctx context.Context, req *connect.Request[v1.ShutdownHeadlessHostRequest]) (*connect.Response[v1.ShutdownHeadlessHostResponse], error) {
	return c.shutdownHeadlessHost.CallUnary(ctx, req)
}

// UpdateHeadlessHostSettings calls hdlctrl.v1.ControllerService.UpdateHeadlessHostSettings.
func (c *controllerServiceClient) UpdateHeadlessHostSettings(ctx context.Context, req *connect.Request[v1.UpdateHeadlessHostSettingsRequest]) (*connect.Response[v1.UpdateHeadlessHostSettingsResponse], error) {
	return c.updateHeadlessHostSettings.CallUnary(ctx, req)
}

// RestartHeadlessHost calls hdlctrl.v1.ControllerService.RestartHeadlessHost.
func (c *controllerServiceClient) RestartHeadlessHost(ctx context.Context, req *connect.Request[v1.RestartHeadlessHostRequest]) (*connect.Response[v1.RestartHeadlessHostResponse], error) {
	return c.restartHeadlessHost.CallUnary(ctx, req)
}

// StartHeadlessHost calls hdlctrl.v1.ControllerService.StartHeadlessHost.
func (c *controllerServiceClient) StartHeadlessHost(ctx context.Context, req *connect.Request[v1.StartHeadlessHostRequest]) (*connect.Response[v1.StartHeadlessHostResponse], error) {
	return c.startHeadlessHost.CallUnary(ctx, req)
}

// AllowHostAccess calls hdlctrl.v1.ControllerService.AllowHostAccess.
func (c *controllerServiceClient) AllowHostAccess(ctx context.Context, req *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error) {
	return c.allowHostAccess.CallUnary(ctx, req)
}

// DenyHostAccess calls hdlctrl.v1.ControllerService.DenyHostAccess.
func (c *controllerServiceClient) DenyHostAccess(ctx context.Context, req *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error) {
	return c.denyHostAccess.CallUnary(ctx, req)
}

// ListHeadlessHostImageTags calls hdlctrl.v1.ControllerService.ListHeadlessHostImageTags.
func (c *controllerServiceClient) ListHeadlessHostImageTags(ctx context.Context, req *connect.Request[v1.ListHeadlessHostImageTagsRequest]) (*connect.Response[v1.ListHeadlessHostImageTagsResponse], error) {
	return c.listHeadlessHostImageTags.CallUnary(ctx, req)
}

// DeleteHeadlessHost calls hdlctrl.v1.ControllerService.DeleteHeadlessHost.
func (c *controllerServiceClient) DeleteHeadlessHost(ctx context.Context, req *connect.Request[v1.DeleteHeadlessHostRequest]) (*connect.Response[v1.DeleteHeadlessHostResponse], error) {
	return c.deleteHeadlessHost.CallUnary(ctx, req)
}

// CreateHeadlessAccount calls hdlctrl.v1.ControllerService.CreateHeadlessAccount.
func (c *controllerServiceClient) CreateHeadlessAccount(ctx context.Context, req *connect.Request[v1.CreateHeadlessAccountRequest]) (*connect.Response[v1.CreateHeadlessAccountResponse], error) {
	return c.createHeadlessAccount.CallUnary(ctx, req)
}

// ListHeadlessAccounts calls hdlctrl.v1.ControllerService.ListHeadlessAccounts.
func (c *controllerServiceClient) ListHeadlessAccounts(ctx context.Context, req *connect.Request[v1.ListHeadlessAccountsRequest]) (*connect.Response[v1.ListHeadlessAccountsResponse], error) {
	return c.listHeadlessAccounts.CallUnary(ctx, req)
}

// DeleteHeadlessAccount calls hdlctrl.v1.ControllerService.DeleteHeadlessAccount.
func (c *controllerServiceClient) DeleteHeadlessAccount(ctx context.Context, req *connect.Request[v1.DeleteHeadlessAccountRequest]) (*connect.Response[v1.DeleteHeadlessAccountResponse], error) {
	return c.deleteHeadlessAccount.CallUnary(ctx, req)
}

// UpdateHeadlessAccountCredentials calls
// hdlctrl.v1.ControllerService.UpdateHeadlessAccountCredentials.
func (c *controllerServiceClient) UpdateHeadlessAccountCredentials(ctx context.Context, req *connect.Request[v1.UpdateHeadlessAccountCredentialsRequest]) (*connect.Response[v1.UpdateHeadlessAccountCredentialsResponse], error) {
	return c.updateHeadlessAccountCredentials.CallUnary(ctx, req)
}

// FetchWorldInfo calls hdlctrl.v1.ControllerService.FetchWorldInfo.
func (c *controllerServiceClient) FetchWorldInfo(ctx context.Context, req *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error) {
	return c.fetchWorldInfo.CallUnary(ctx, req)
}

// SearchUserInfo calls hdlctrl.v1.ControllerService.SearchUserInfo.
func (c *controllerServiceClient) SearchUserInfo(ctx context.Context, req *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error) {
	return c.searchUserInfo.CallUnary(ctx, req)
}

// GetFriendRequests calls hdlctrl.v1.ControllerService.GetFriendRequests.
func (c *controllerServiceClient) GetFriendRequests(ctx context.Context, req *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error) {
	return c.getFriendRequests.CallUnary(ctx, req)
}

// AcceptFriendRequests calls hdlctrl.v1.ControllerService.AcceptFriendRequests.
func (c *controllerServiceClient) AcceptFriendRequests(ctx context.Context, req *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error) {
	return c.acceptFriendRequests.CallUnary(ctx, req)
}

// SearchSessions calls hdlctrl.v1.ControllerService.SearchSessions.
func (c *controllerServiceClient) SearchSessions(ctx context.Context, req *connect.Request[v1.SearchSessionsRequest]) (*connect.Response[v1.SearchSessionsResponse], error) {
	return c.searchSessions.CallUnary(ctx, req)
}

// GetSessionDetails calls hdlctrl.v1.ControllerService.GetSessionDetails.
func (c *controllerServiceClient) GetSessionDetails(ctx context.Context, req *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error) {
	return c.getSessionDetails.CallUnary(ctx, req)
}

// StartWorld calls hdlctrl.v1.ControllerService.StartWorld.
func (c *controllerServiceClient) StartWorld(ctx context.Context, req *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return c.startWorld.CallUnary(ctx, req)
}

// StopSession calls hdlctrl.v1.ControllerService.StopSession.
func (c *controllerServiceClient) StopSession(ctx context.Context, req *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return c.stopSession.CallUnary(ctx, req)
}

// DeleteEndedSession calls hdlctrl.v1.ControllerService.DeleteEndedSession.
func (c *controllerServiceClient) DeleteEndedSession(ctx context.Context, req *connect.Request[v1.DeleteEndedSessionRequest]) (*connect.Response[v1.DeleteEndedSessionResponse], error) {
	return c.deleteEndedSession.CallUnary(ctx, req)
}

// SaveSessionWorld calls hdlctrl.v1.ControllerService.SaveSessionWorld.
func (c *controllerServiceClient) SaveSessionWorld(ctx context.Context, req *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return c.saveSessionWorld.CallUnary(ctx, req)
}

// InviteUser calls hdlctrl.v1.ControllerService.InviteUser.
func (c *controllerServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// UpdateUserRole calls hdlctrl.v1.ControllerService.UpdateUserRole.
func (c *controllerServiceClient) UpdateUserRole(ctx context.Context, req *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return c.updateUserRole.CallUnary(ctx, req)
}

// UpdateSessionParameters calls hdlctrl.v1.ControllerService.UpdateSessionParameters.
func (c *controllerServiceClient) UpdateSessionParameters(ctx context.Context, req *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return c.updateSessionParameters.CallUnary(ctx, req)
}

// UpdateSessionExtraSettings calls hdlctrl.v1.ControllerService.UpdateSessionExtraSettings.
func (c *controllerServiceClient) UpdateSessionExtraSettings(ctx context.Context, req *connect.Request[v1.UpdateSessionExtraSettingsRequest]) (*connect.Response[v1.UpdateSessionExtraSettingsResponse], error) {
	return c.updateSessionExtraSettings.CallUnary(ctx, req)
}

// ListUsersInSession calls hdlctrl.v1.ControllerService.ListUsersInSession.
func (c *controllerServiceClient) ListUsersInSession(ctx context.Context, req *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return c.listUsersInSession.CallUnary(ctx, req)
}

// KickUser calls hdlctrl.v1.ControllerService.KickUser.
func (c *controllerServiceClient) KickUser(ctx context.Context, req *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error) {
	return c.kickUser.CallUnary(ctx, req)
}

// BanUser calls hdlctrl.v1.ControllerService.BanUser.
func (c *controllerServiceClient) BanUser(ctx context.Context, req *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error) {
	return c.banUser.CallUnary(ctx, req)
}

// ControllerServiceHandler is an implementation of the hdlctrl.v1.ControllerService service.
type ControllerServiceHandler interface {
	// ホスト系
	ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error)
	GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error)
	GetHeadlessHostLogs(context.Context, *connect.Request[v1.GetHeadlessHostLogsRequest]) (*connect.Response[v1.GetHeadlessHostLogsResponse], error)
	ShutdownHeadlessHost(context.Context, *connect.Request[v1.ShutdownHeadlessHostRequest]) (*connect.Response[v1.ShutdownHeadlessHostResponse], error)
	UpdateHeadlessHostSettings(context.Context, *connect.Request[v1.UpdateHeadlessHostSettingsRequest]) (*connect.Response[v1.UpdateHeadlessHostSettingsResponse], error)
	RestartHeadlessHost(context.Context, *connect.Request[v1.RestartHeadlessHostRequest]) (*connect.Response[v1.RestartHeadlessHostResponse], error)
	StartHeadlessHost(context.Context, *connect.Request[v1.StartHeadlessHostRequest]) (*connect.Response[v1.StartHeadlessHostResponse], error)
	AllowHostAccess(context.Context, *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error)
	DenyHostAccess(context.Context, *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error)
	ListHeadlessHostImageTags(context.Context, *connect.Request[v1.ListHeadlessHostImageTagsRequest]) (*connect.Response[v1.ListHeadlessHostImageTagsResponse], error)
	DeleteHeadlessHost(context.Context, *connect.Request[v1.DeleteHeadlessHostRequest]) (*connect.Response[v1.DeleteHeadlessHostResponse], error)
	// アカウント系
	CreateHeadlessAccount(context.Context, *connect.Request[v1.CreateHeadlessAccountRequest]) (*connect.Response[v1.CreateHeadlessAccountResponse], error)
	ListHeadlessAccounts(context.Context, *connect.Request[v1.ListHeadlessAccountsRequest]) (*connect.Response[v1.ListHeadlessAccountsResponse], error)
	DeleteHeadlessAccount(context.Context, *connect.Request[v1.DeleteHeadlessAccountRequest]) (*connect.Response[v1.DeleteHeadlessAccountResponse], error)
	UpdateHeadlessAccountCredentials(context.Context, *connect.Request[v1.UpdateHeadlessAccountCredentialsRequest]) (*connect.Response[v1.UpdateHeadlessAccountCredentialsResponse], error)
	// Cloud系
	FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error)
	SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error)
	GetFriendRequests(context.Context, *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error)
	AcceptFriendRequests(context.Context, *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error)
	// セッション系
	SearchSessions(context.Context, *connect.Request[v1.SearchSessionsRequest]) (*connect.Response[v1.SearchSessionsResponse], error)
	GetSessionDetails(context.Context, *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	DeleteEndedSession(context.Context, *connect.Request[v1.DeleteEndedSessionRequest]) (*connect.Response[v1.DeleteEndedSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	UpdateSessionExtraSettings(context.Context, *connect.Request[v1.UpdateSessionExtraSettingsRequest]) (*connect.Response[v1.UpdateSessionExtraSettingsResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
	KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error)
	BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error)
}

// NewControllerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerServiceHandler(svc ControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerServiceMethods := v1.File_hdlctrl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	controllerServiceListHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceListHeadlessHostProcedure,
		svc.ListHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceGetHeadlessHostProcedure,
		svc.GetHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetHeadlessHostLogsHandler := connect.NewUnaryHandler(
		ControllerServiceGetHeadlessHostLogsProcedure,
		svc.GetHeadlessHostLogs,
		connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHostLogs")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceShutdownHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceShutdownHeadlessHostProcedure,
		svc.ShutdownHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("ShutdownHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceUpdateHeadlessHostSettingsHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateHeadlessHostSettingsProcedure,
		svc.UpdateHeadlessHostSettings,
		connect.WithSchema(controllerServiceMethods.ByName("UpdateHeadlessHostSettings")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceRestartHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceRestartHeadlessHostProcedure,
		svc.RestartHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("RestartHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStartHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceStartHeadlessHostProcedure,
		svc.StartHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("StartHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceAllowHostAccessHandler := connect.NewUnaryHandler(
		ControllerServiceAllowHostAccessProcedure,
		svc.AllowHostAccess,
		connect.WithSchema(controllerServiceMethods.ByName("AllowHostAccess")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceDenyHostAccessHandler := connect.NewUnaryHandler(
		ControllerServiceDenyHostAccessProcedure,
		svc.DenyHostAccess,
		connect.WithSchema(controllerServiceMethods.ByName("DenyHostAccess")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceListHeadlessHostImageTagsHandler := connect.NewUnaryHandler(
		ControllerServiceListHeadlessHostImageTagsProcedure,
		svc.ListHeadlessHostImageTags,
		connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHostImageTags")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceDeleteHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceDeleteHeadlessHostProcedure,
		svc.DeleteHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("DeleteHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceCreateHeadlessAccountHandler := connect.NewUnaryHandler(
		ControllerServiceCreateHeadlessAccountProcedure,
		svc.CreateHeadlessAccount,
		connect.WithSchema(controllerServiceMethods.ByName("CreateHeadlessAccount")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceListHeadlessAccountsHandler := connect.NewUnaryHandler(
		ControllerServiceListHeadlessAccountsProcedure,
		svc.ListHeadlessAccounts,
		connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceDeleteHeadlessAccountHandler := connect.NewUnaryHandler(
		ControllerServiceDeleteHeadlessAccountProcedure,
		svc.DeleteHeadlessAccount,
		connect.WithSchema(controllerServiceMethods.ByName("DeleteHeadlessAccount")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceUpdateHeadlessAccountCredentialsHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateHeadlessAccountCredentialsProcedure,
		svc.UpdateHeadlessAccountCredentials,
		connect.WithSchema(controllerServiceMethods.ByName("UpdateHeadlessAccountCredentials")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceFetchWorldInfoHandler := connect.NewUnaryHandler(
		ControllerServiceFetchWorldInfoProcedure,
		svc.FetchWorldInfo,
		connect.WithSchema(controllerServiceMethods.ByName("FetchWorldInfo")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceSearchUserInfoHandler := connect.NewUnaryHandler(
		ControllerServiceSearchUserInfoProcedure,
		svc.SearchUserInfo,
		connect.WithSchema(controllerServiceMethods.ByName("SearchUserInfo")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetFriendRequestsHandler := connect.NewUnaryHandler(
		ControllerServiceGetFriendRequestsProcedure,
		svc.GetFriendRequests,
		connect.WithSchema(controllerServiceMethods.ByName("GetFriendRequests")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceAcceptFriendRequestsHandler := connect.NewUnaryHandler(
		ControllerServiceAcceptFriendRequestsProcedure,
		svc.AcceptFriendRequests,
		connect.WithSchema(controllerServiceMethods.ByName("AcceptFriendRequests")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceSearchSessionsHandler := connect.NewUnaryHandler(
		ControllerServiceSearchSessionsProcedure,
		svc.SearchSessions,
		connect.WithSchema(controllerServiceMethods.ByName("SearchSessions")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetSessionDetailsHandler := connect.NewUnaryHandler(
		ControllerServiceGetSessionDetailsProcedure,
		svc.GetSessionDetails,
		connect.WithSchema(controllerServiceMethods.ByName("GetSessionDetails")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStartWorldHandler := connect.NewUnaryHandler(
		ControllerServiceStartWorldProcedure,
		svc.StartWorld,
		connect.WithSchema(controllerServiceMethods.ByName("StartWorld")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStopSessionHandler := connect.NewUnaryHandler(
		ControllerServiceStopSessionProcedure,
		svc.StopSession,
		connect.WithSchema(controllerServiceMethods.ByName("StopSession")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceDeleteEndedSessionHandler := connect.NewUnaryHandler(
		ControllerServiceDeleteEndedSessionProcedure,
		svc.DeleteEndedSession,
		connect.WithSchema(controllerServiceMethods.ByName("DeleteEndedSession")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceSaveSessionWorldHandler := connect.NewUnaryHandler(
		ControllerServiceSaveSessionWorldProcedure,
		svc.SaveSessionWorld,
		connect.WithSchema(controllerServiceMethods.ByName("SaveSessionWorld")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceInviteUserHandler := connect.NewUnaryHandler(
		ControllerServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(controllerServiceMethods.ByName("InviteUser")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceUpdateUserRoleHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateUserRoleProcedure,
		svc.UpdateUserRole,
		connect.WithSchema(controllerServiceMethods.ByName("UpdateUserRole")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceUpdateSessionParametersHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateSessionParametersProcedure,
		svc.UpdateSessionParameters,
		connect.WithSchema(controllerServiceMethods.ByName("UpdateSessionParameters")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceUpdateSessionExtraSettingsHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateSessionExtraSettingsProcedure,
		svc.UpdateSessionExtraSettings,
		connect.WithSchema(controllerServiceMethods.ByName("UpdateSessionExtraSettings")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceListUsersInSessionHandler := connect.NewUnaryHandler(
		ControllerServiceListUsersInSessionProcedure,
		svc.ListUsersInSession,
		connect.WithSchema(controllerServiceMethods.ByName("ListUsersInSession")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceKickUserHandler := connect.NewUnaryHandler(
		ControllerServiceKickUserProcedure,
		svc.KickUser,
		connect.WithSchema(controllerServiceMethods.ByName("KickUser")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceBanUserHandler := connect.NewUnaryHandler(
		ControllerServiceBanUserProcedure,
		svc.BanUser,
		connect.WithSchema(controllerServiceMethods.ByName("BanUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hdlctrl.v1.ControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerServiceListHeadlessHostProcedure:
			controllerServiceListHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceGetHeadlessHostProcedure:
			controllerServiceGetHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceGetHeadlessHostLogsProcedure:
			controllerServiceGetHeadlessHostLogsHandler.ServeHTTP(w, r)
		case ControllerServiceShutdownHeadlessHostProcedure:
			controllerServiceShutdownHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateHeadlessHostSettingsProcedure:
			controllerServiceUpdateHeadlessHostSettingsHandler.ServeHTTP(w, r)
		case ControllerServiceRestartHeadlessHostProcedure:
			controllerServiceRestartHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceStartHeadlessHostProcedure:
			controllerServiceStartHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceAllowHostAccessProcedure:
			controllerServiceAllowHostAccessHandler.ServeHTTP(w, r)
		case ControllerServiceDenyHostAccessProcedure:
			controllerServiceDenyHostAccessHandler.ServeHTTP(w, r)
		case ControllerServiceListHeadlessHostImageTagsProcedure:
			controllerServiceListHeadlessHostImageTagsHandler.ServeHTTP(w, r)
		case ControllerServiceDeleteHeadlessHostProcedure:
			controllerServiceDeleteHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceCreateHeadlessAccountProcedure:
			controllerServiceCreateHeadlessAccountHandler.ServeHTTP(w, r)
		case ControllerServiceListHeadlessAccountsProcedure:
			controllerServiceListHeadlessAccountsHandler.ServeHTTP(w, r)
		case ControllerServiceDeleteHeadlessAccountProcedure:
			controllerServiceDeleteHeadlessAccountHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateHeadlessAccountCredentialsProcedure:
			controllerServiceUpdateHeadlessAccountCredentialsHandler.ServeHTTP(w, r)
		case ControllerServiceFetchWorldInfoProcedure:
			controllerServiceFetchWorldInfoHandler.ServeHTTP(w, r)
		case ControllerServiceSearchUserInfoProcedure:
			controllerServiceSearchUserInfoHandler.ServeHTTP(w, r)
		case ControllerServiceGetFriendRequestsProcedure:
			controllerServiceGetFriendRequestsHandler.ServeHTTP(w, r)
		case ControllerServiceAcceptFriendRequestsProcedure:
			controllerServiceAcceptFriendRequestsHandler.ServeHTTP(w, r)
		case ControllerServiceSearchSessionsProcedure:
			controllerServiceSearchSessionsHandler.ServeHTTP(w, r)
		case ControllerServiceGetSessionDetailsProcedure:
			controllerServiceGetSessionDetailsHandler.ServeHTTP(w, r)
		case ControllerServiceStartWorldProcedure:
			controllerServiceStartWorldHandler.ServeHTTP(w, r)
		case ControllerServiceStopSessionProcedure:
			controllerServiceStopSessionHandler.ServeHTTP(w, r)
		case ControllerServiceDeleteEndedSessionProcedure:
			controllerServiceDeleteEndedSessionHandler.ServeHTTP(w, r)
		case ControllerServiceSaveSessionWorldProcedure:
			controllerServiceSaveSessionWorldHandler.ServeHTTP(w, r)
		case ControllerServiceInviteUserProcedure:
			controllerServiceInviteUserHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateUserRoleProcedure:
			controllerServiceUpdateUserRoleHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateSessionParametersProcedure:
			controllerServiceUpdateSessionParametersHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateSessionExtraSettingsProcedure:
			controllerServiceUpdateSessionExtraSettingsHandler.ServeHTTP(w, r)
		case ControllerServiceListUsersInSessionProcedure:
			controllerServiceListUsersInSessionHandler.ServeHTTP(w, r)
		case ControllerServiceKickUserProcedure:
			controllerServiceKickUserHandler.ServeHTTP(w, r)
		case ControllerServiceBanUserProcedure:
			controllerServiceBanUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerServiceHandler struct{}

func (UnimplementedControllerServiceHandler) ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.GetHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetHeadlessHostLogs(context.Context, *connect.Request[v1.GetHeadlessHostLogsRequest]) (*connect.Response[v1.GetHeadlessHostLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.GetHeadlessHostLogs is not implemented"))
}

func (UnimplementedControllerServiceHandler) ShutdownHeadlessHost(context.Context, *connect.Request[v1.ShutdownHeadlessHostRequest]) (*connect.Response[v1.ShutdownHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ShutdownHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateHeadlessHostSettings(context.Context, *connect.Request[v1.UpdateHeadlessHostSettingsRequest]) (*connect.Response[v1.UpdateHeadlessHostSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.UpdateHeadlessHostSettings is not implemented"))
}

func (UnimplementedControllerServiceHandler) RestartHeadlessHost(context.Context, *connect.Request[v1.RestartHeadlessHostRequest]) (*connect.Response[v1.RestartHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.RestartHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) StartHeadlessHost(context.Context, *connect.Request[v1.StartHeadlessHostRequest]) (*connect.Response[v1.StartHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.StartHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) AllowHostAccess(context.Context, *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.AllowHostAccess is not implemented"))
}

func (UnimplementedControllerServiceHandler) DenyHostAccess(context.Context, *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.DenyHostAccess is not implemented"))
}

func (UnimplementedControllerServiceHandler) ListHeadlessHostImageTags(context.Context, *connect.Request[v1.ListHeadlessHostImageTagsRequest]) (*connect.Response[v1.ListHeadlessHostImageTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListHeadlessHostImageTags is not implemented"))
}

func (UnimplementedControllerServiceHandler) DeleteHeadlessHost(context.Context, *connect.Request[v1.DeleteHeadlessHostRequest]) (*connect.Response[v1.DeleteHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.DeleteHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) CreateHeadlessAccount(context.Context, *connect.Request[v1.CreateHeadlessAccountRequest]) (*connect.Response[v1.CreateHeadlessAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.CreateHeadlessAccount is not implemented"))
}

func (UnimplementedControllerServiceHandler) ListHeadlessAccounts(context.Context, *connect.Request[v1.ListHeadlessAccountsRequest]) (*connect.Response[v1.ListHeadlessAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListHeadlessAccounts is not implemented"))
}

func (UnimplementedControllerServiceHandler) DeleteHeadlessAccount(context.Context, *connect.Request[v1.DeleteHeadlessAccountRequest]) (*connect.Response[v1.DeleteHeadlessAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.DeleteHeadlessAccount is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateHeadlessAccountCredentials(context.Context, *connect.Request[v1.UpdateHeadlessAccountCredentialsRequest]) (*connect.Response[v1.UpdateHeadlessAccountCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.UpdateHeadlessAccountCredentials is not implemented"))
}

func (UnimplementedControllerServiceHandler) FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.FetchWorldInfo is not implemented"))
}

func (UnimplementedControllerServiceHandler) SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.SearchUserInfo is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetFriendRequests(context.Context, *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.GetFriendRequests is not implemented"))
}

func (UnimplementedControllerServiceHandler) AcceptFriendRequests(context.Context, *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.AcceptFriendRequests is not implemented"))
}

func (UnimplementedControllerServiceHandler) SearchSessions(context.Context, *connect.Request[v1.SearchSessionsRequest]) (*connect.Response[v1.SearchSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.SearchSessions is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetSessionDetails(context.Context, *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.GetSessionDetails is not implemented"))
}

func (UnimplementedControllerServiceHandler) StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.StartWorld is not implemented"))
}

func (UnimplementedControllerServiceHandler) StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.StopSession is not implemented"))
}

func (UnimplementedControllerServiceHandler) DeleteEndedSession(context.Context, *connect.Request[v1.DeleteEndedSessionRequest]) (*connect.Response[v1.DeleteEndedSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.DeleteEndedSession is not implemented"))
}

func (UnimplementedControllerServiceHandler) SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.SaveSessionWorld is not implemented"))
}

func (UnimplementedControllerServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.InviteUser is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.UpdateUserRole is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.UpdateSessionParameters is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateSessionExtraSettings(context.Context, *connect.Request[v1.UpdateSessionExtraSettingsRequest]) (*connect.Response[v1.UpdateSessionExtraSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.UpdateSessionExtraSettings is not implemented"))
}

func (UnimplementedControllerServiceHandler) ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListUsersInSession is not implemented"))
}

func (UnimplementedControllerServiceHandler) KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.KickUser is not implemented"))
}

func (UnimplementedControllerServiceHandler) BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.BanUser is not implemented"))
}
