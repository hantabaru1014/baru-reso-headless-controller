// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hdlctrl/v1/controller.proto

package hdlctrlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/hdlctrl/v1"
	v11 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/headless/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControllerServiceName is the fully-qualified name of the ControllerService service.
	ControllerServiceName = "hdlctrl.v1.ControllerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControllerServiceListHeadlessHostProcedure is the fully-qualified name of the ControllerService's
	// ListHeadlessHost RPC.
	ControllerServiceListHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/ListHeadlessHost"
	// ControllerServiceGetHeadlessHostProcedure is the fully-qualified name of the ControllerService's
	// GetHeadlessHost RPC.
	ControllerServiceGetHeadlessHostProcedure = "/hdlctrl.v1.ControllerService/GetHeadlessHost"
	// ControllerServiceFetchWorldInfoProcedure is the fully-qualified name of the ControllerService's
	// FetchWorldInfo RPC.
	ControllerServiceFetchWorldInfoProcedure = "/hdlctrl.v1.ControllerService/FetchWorldInfo"
	// ControllerServiceSearchUserInfoProcedure is the fully-qualified name of the ControllerService's
	// SearchUserInfo RPC.
	ControllerServiceSearchUserInfoProcedure = "/hdlctrl.v1.ControllerService/SearchUserInfo"
	// ControllerServiceListSessionsProcedure is the fully-qualified name of the ControllerService's
	// ListSessions RPC.
	ControllerServiceListSessionsProcedure = "/hdlctrl.v1.ControllerService/ListSessions"
	// ControllerServiceGetSessionDetailsProcedure is the fully-qualified name of the
	// ControllerService's GetSessionDetails RPC.
	ControllerServiceGetSessionDetailsProcedure = "/hdlctrl.v1.ControllerService/GetSessionDetails"
	// ControllerServiceStartWorldProcedure is the fully-qualified name of the ControllerService's
	// StartWorld RPC.
	ControllerServiceStartWorldProcedure = "/hdlctrl.v1.ControllerService/StartWorld"
	// ControllerServiceStopSessionProcedure is the fully-qualified name of the ControllerService's
	// StopSession RPC.
	ControllerServiceStopSessionProcedure = "/hdlctrl.v1.ControllerService/StopSession"
	// ControllerServiceSaveSessionWorldProcedure is the fully-qualified name of the ControllerService's
	// SaveSessionWorld RPC.
	ControllerServiceSaveSessionWorldProcedure = "/hdlctrl.v1.ControllerService/SaveSessionWorld"
	// ControllerServiceInviteUserProcedure is the fully-qualified name of the ControllerService's
	// InviteUser RPC.
	ControllerServiceInviteUserProcedure = "/hdlctrl.v1.ControllerService/InviteUser"
	// ControllerServiceUpdateUserRoleProcedure is the fully-qualified name of the ControllerService's
	// UpdateUserRole RPC.
	ControllerServiceUpdateUserRoleProcedure = "/hdlctrl.v1.ControllerService/UpdateUserRole"
	// ControllerServiceUpdateSessionParametersProcedure is the fully-qualified name of the
	// ControllerService's UpdateSessionParameters RPC.
	ControllerServiceUpdateSessionParametersProcedure = "/hdlctrl.v1.ControllerService/UpdateSessionParameters"
	// ControllerServiceListUsersInSessionProcedure is the fully-qualified name of the
	// ControllerService's ListUsersInSession RPC.
	ControllerServiceListUsersInSessionProcedure = "/hdlctrl.v1.ControllerService/ListUsersInSession"
	// ControllerServiceKickUserProcedure is the fully-qualified name of the ControllerService's
	// KickUser RPC.
	ControllerServiceKickUserProcedure = "/hdlctrl.v1.ControllerService/KickUser"
	// ControllerServiceBanUserProcedure is the fully-qualified name of the ControllerService's BanUser
	// RPC.
	ControllerServiceBanUserProcedure = "/hdlctrl.v1.ControllerService/BanUser"
)

// ControllerServiceClient is a client for the hdlctrl.v1.ControllerService service.
type ControllerServiceClient interface {
	ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error)
	GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error)
	FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error)
	SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSessionDetails(context.Context, *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
	KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error)
	BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error)
}

// NewControllerServiceClient constructs a client for the hdlctrl.v1.ControllerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controllerServiceMethods := v1.File_hdlctrl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	return &controllerServiceClient{
		listHeadlessHost: connect.NewClient[v1.ListHeadlessHostRequest, v1.ListHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceListHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		getHeadlessHost: connect.NewClient[v1.GetHeadlessHostRequest, v1.GetHeadlessHostResponse](
			httpClient,
			baseURL+ControllerServiceGetHeadlessHostProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHost")),
			connect.WithClientOptions(opts...),
		),
		fetchWorldInfo: connect.NewClient[v1.FetchWorldInfoRequest, v11.FetchWorldInfoResponse](
			httpClient,
			baseURL+ControllerServiceFetchWorldInfoProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("FetchWorldInfo")),
			connect.WithClientOptions(opts...),
		),
		searchUserInfo: connect.NewClient[v1.SearchUserInfoRequest, v11.SearchUserInfoResponse](
			httpClient,
			baseURL+ControllerServiceSearchUserInfoProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("SearchUserInfo")),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+ControllerServiceListSessionsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		getSessionDetails: connect.NewClient[v1.GetSessionDetailsRequest, v1.GetSessionDetailsResponse](
			httpClient,
			baseURL+ControllerServiceGetSessionDetailsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetSessionDetails")),
			connect.WithClientOptions(opts...),
		),
		startWorld: connect.NewClient[v1.StartWorldRequest, v1.StartWorldResponse](
			httpClient,
			baseURL+ControllerServiceStartWorldProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StartWorld")),
			connect.WithClientOptions(opts...),
		),
		stopSession: connect.NewClient[v1.StopSessionRequest, v1.StopSessionResponse](
			httpClient,
			baseURL+ControllerServiceStopSessionProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StopSession")),
			connect.WithClientOptions(opts...),
		),
		saveSessionWorld: connect.NewClient[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse](
			httpClient,
			baseURL+ControllerServiceSaveSessionWorldProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("SaveSessionWorld")),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+ControllerServiceInviteUserProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("InviteUser")),
			connect.WithClientOptions(opts...),
		),
		updateUserRole: connect.NewClient[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse](
			httpClient,
			baseURL+ControllerServiceUpdateUserRoleProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("UpdateUserRole")),
			connect.WithClientOptions(opts...),
		),
		updateSessionParameters: connect.NewClient[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse](
			httpClient,
			baseURL+ControllerServiceUpdateSessionParametersProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("UpdateSessionParameters")),
			connect.WithClientOptions(opts...),
		),
		listUsersInSession: connect.NewClient[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse](
			httpClient,
			baseURL+ControllerServiceListUsersInSessionProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("ListUsersInSession")),
			connect.WithClientOptions(opts...),
		),
		kickUser: connect.NewClient[v1.KickUserRequest, v1.KickUserResponse](
			httpClient,
			baseURL+ControllerServiceKickUserProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("KickUser")),
			connect.WithClientOptions(opts...),
		),
		banUser: connect.NewClient[v1.BanUserRequest, v1.BanUserResponse](
			httpClient,
			baseURL+ControllerServiceBanUserProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("BanUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerServiceClient implements ControllerServiceClient.
type controllerServiceClient struct {
	listHeadlessHost        *connect.Client[v1.ListHeadlessHostRequest, v1.ListHeadlessHostResponse]
	getHeadlessHost         *connect.Client[v1.GetHeadlessHostRequest, v1.GetHeadlessHostResponse]
	fetchWorldInfo          *connect.Client[v1.FetchWorldInfoRequest, v11.FetchWorldInfoResponse]
	searchUserInfo          *connect.Client[v1.SearchUserInfoRequest, v11.SearchUserInfoResponse]
	listSessions            *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	getSessionDetails       *connect.Client[v1.GetSessionDetailsRequest, v1.GetSessionDetailsResponse]
	startWorld              *connect.Client[v1.StartWorldRequest, v1.StartWorldResponse]
	stopSession             *connect.Client[v1.StopSessionRequest, v1.StopSessionResponse]
	saveSessionWorld        *connect.Client[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse]
	inviteUser              *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	updateUserRole          *connect.Client[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse]
	updateSessionParameters *connect.Client[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse]
	listUsersInSession      *connect.Client[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse]
	kickUser                *connect.Client[v1.KickUserRequest, v1.KickUserResponse]
	banUser                 *connect.Client[v1.BanUserRequest, v1.BanUserResponse]
}

// ListHeadlessHost calls hdlctrl.v1.ControllerService.ListHeadlessHost.
func (c *controllerServiceClient) ListHeadlessHost(ctx context.Context, req *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error) {
	return c.listHeadlessHost.CallUnary(ctx, req)
}

// GetHeadlessHost calls hdlctrl.v1.ControllerService.GetHeadlessHost.
func (c *controllerServiceClient) GetHeadlessHost(ctx context.Context, req *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error) {
	return c.getHeadlessHost.CallUnary(ctx, req)
}

// FetchWorldInfo calls hdlctrl.v1.ControllerService.FetchWorldInfo.
func (c *controllerServiceClient) FetchWorldInfo(ctx context.Context, req *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error) {
	return c.fetchWorldInfo.CallUnary(ctx, req)
}

// SearchUserInfo calls hdlctrl.v1.ControllerService.SearchUserInfo.
func (c *controllerServiceClient) SearchUserInfo(ctx context.Context, req *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error) {
	return c.searchUserInfo.CallUnary(ctx, req)
}

// ListSessions calls hdlctrl.v1.ControllerService.ListSessions.
func (c *controllerServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// GetSessionDetails calls hdlctrl.v1.ControllerService.GetSessionDetails.
func (c *controllerServiceClient) GetSessionDetails(ctx context.Context, req *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error) {
	return c.getSessionDetails.CallUnary(ctx, req)
}

// StartWorld calls hdlctrl.v1.ControllerService.StartWorld.
func (c *controllerServiceClient) StartWorld(ctx context.Context, req *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return c.startWorld.CallUnary(ctx, req)
}

// StopSession calls hdlctrl.v1.ControllerService.StopSession.
func (c *controllerServiceClient) StopSession(ctx context.Context, req *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return c.stopSession.CallUnary(ctx, req)
}

// SaveSessionWorld calls hdlctrl.v1.ControllerService.SaveSessionWorld.
func (c *controllerServiceClient) SaveSessionWorld(ctx context.Context, req *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return c.saveSessionWorld.CallUnary(ctx, req)
}

// InviteUser calls hdlctrl.v1.ControllerService.InviteUser.
func (c *controllerServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// UpdateUserRole calls hdlctrl.v1.ControllerService.UpdateUserRole.
func (c *controllerServiceClient) UpdateUserRole(ctx context.Context, req *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return c.updateUserRole.CallUnary(ctx, req)
}

// UpdateSessionParameters calls hdlctrl.v1.ControllerService.UpdateSessionParameters.
func (c *controllerServiceClient) UpdateSessionParameters(ctx context.Context, req *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return c.updateSessionParameters.CallUnary(ctx, req)
}

// ListUsersInSession calls hdlctrl.v1.ControllerService.ListUsersInSession.
func (c *controllerServiceClient) ListUsersInSession(ctx context.Context, req *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return c.listUsersInSession.CallUnary(ctx, req)
}

// KickUser calls hdlctrl.v1.ControllerService.KickUser.
func (c *controllerServiceClient) KickUser(ctx context.Context, req *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error) {
	return c.kickUser.CallUnary(ctx, req)
}

// BanUser calls hdlctrl.v1.ControllerService.BanUser.
func (c *controllerServiceClient) BanUser(ctx context.Context, req *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error) {
	return c.banUser.CallUnary(ctx, req)
}

// ControllerServiceHandler is an implementation of the hdlctrl.v1.ControllerService service.
type ControllerServiceHandler interface {
	ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error)
	GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error)
	FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error)
	SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSessionDetails(context.Context, *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
	KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error)
	BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error)
}

// NewControllerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerServiceHandler(svc ControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerServiceMethods := v1.File_hdlctrl_v1_controller_proto.Services().ByName("ControllerService").Methods()
	controllerServiceListHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceListHeadlessHostProcedure,
		svc.ListHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("ListHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetHeadlessHostHandler := connect.NewUnaryHandler(
		ControllerServiceGetHeadlessHostProcedure,
		svc.GetHeadlessHost,
		connect.WithSchema(controllerServiceMethods.ByName("GetHeadlessHost")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceFetchWorldInfoHandler := connect.NewUnaryHandler(
		ControllerServiceFetchWorldInfoProcedure,
		svc.FetchWorldInfo,
		connect.WithSchema(controllerServiceMethods.ByName("FetchWorldInfo")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceSearchUserInfoHandler := connect.NewUnaryHandler(
		ControllerServiceSearchUserInfoProcedure,
		svc.SearchUserInfo,
		connect.WithSchema(controllerServiceMethods.ByName("SearchUserInfo")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceListSessionsHandler := connect.NewUnaryHandler(
		ControllerServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(controllerServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceGetSessionDetailsHandler := connect.NewUnaryHandler(
		ControllerServiceGetSessionDetailsProcedure,
		svc.GetSessionDetails,
		connect.WithSchema(controllerServiceMethods.ByName("GetSessionDetails")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStartWorldHandler := connect.NewUnaryHandler(
		ControllerServiceStartWorldProcedure,
		svc.StartWorld,
		connect.WithSchema(controllerServiceMethods.ByName("StartWorld")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStopSessionHandler := connect.NewUnaryHandler(
		ControllerServiceStopSessionProcedure,
		svc.StopSession,
		connect.WithSchema(controllerServiceMethods.ByName("StopSession")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceSaveSessionWorldHandler := connect.NewUnaryHandler(
		ControllerServiceSaveSessionWorldProcedure,
		svc.SaveSessionWorld,
		connect.WithSchema(controllerServiceMethods.ByName("SaveSessionWorld")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceInviteUserHandler := connect.NewUnaryHandler(
		ControllerServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(controllerServiceMethods.ByName("InviteUser")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceUpdateUserRoleHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateUserRoleProcedure,
		svc.UpdateUserRole,
		connect.WithSchema(controllerServiceMethods.ByName("UpdateUserRole")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceUpdateSessionParametersHandler := connect.NewUnaryHandler(
		ControllerServiceUpdateSessionParametersProcedure,
		svc.UpdateSessionParameters,
		connect.WithSchema(controllerServiceMethods.ByName("UpdateSessionParameters")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceListUsersInSessionHandler := connect.NewUnaryHandler(
		ControllerServiceListUsersInSessionProcedure,
		svc.ListUsersInSession,
		connect.WithSchema(controllerServiceMethods.ByName("ListUsersInSession")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceKickUserHandler := connect.NewUnaryHandler(
		ControllerServiceKickUserProcedure,
		svc.KickUser,
		connect.WithSchema(controllerServiceMethods.ByName("KickUser")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceBanUserHandler := connect.NewUnaryHandler(
		ControllerServiceBanUserProcedure,
		svc.BanUser,
		connect.WithSchema(controllerServiceMethods.ByName("BanUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hdlctrl.v1.ControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerServiceListHeadlessHostProcedure:
			controllerServiceListHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceGetHeadlessHostProcedure:
			controllerServiceGetHeadlessHostHandler.ServeHTTP(w, r)
		case ControllerServiceFetchWorldInfoProcedure:
			controllerServiceFetchWorldInfoHandler.ServeHTTP(w, r)
		case ControllerServiceSearchUserInfoProcedure:
			controllerServiceSearchUserInfoHandler.ServeHTTP(w, r)
		case ControllerServiceListSessionsProcedure:
			controllerServiceListSessionsHandler.ServeHTTP(w, r)
		case ControllerServiceGetSessionDetailsProcedure:
			controllerServiceGetSessionDetailsHandler.ServeHTTP(w, r)
		case ControllerServiceStartWorldProcedure:
			controllerServiceStartWorldHandler.ServeHTTP(w, r)
		case ControllerServiceStopSessionProcedure:
			controllerServiceStopSessionHandler.ServeHTTP(w, r)
		case ControllerServiceSaveSessionWorldProcedure:
			controllerServiceSaveSessionWorldHandler.ServeHTTP(w, r)
		case ControllerServiceInviteUserProcedure:
			controllerServiceInviteUserHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateUserRoleProcedure:
			controllerServiceUpdateUserRoleHandler.ServeHTTP(w, r)
		case ControllerServiceUpdateSessionParametersProcedure:
			controllerServiceUpdateSessionParametersHandler.ServeHTTP(w, r)
		case ControllerServiceListUsersInSessionProcedure:
			controllerServiceListUsersInSessionHandler.ServeHTTP(w, r)
		case ControllerServiceKickUserProcedure:
			controllerServiceKickUserHandler.ServeHTTP(w, r)
		case ControllerServiceBanUserProcedure:
			controllerServiceBanUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerServiceHandler struct{}

func (UnimplementedControllerServiceHandler) ListHeadlessHost(context.Context, *connect.Request[v1.ListHeadlessHostRequest]) (*connect.Response[v1.ListHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetHeadlessHost(context.Context, *connect.Request[v1.GetHeadlessHostRequest]) (*connect.Response[v1.GetHeadlessHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.GetHeadlessHost is not implemented"))
}

func (UnimplementedControllerServiceHandler) FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v11.FetchWorldInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.FetchWorldInfo is not implemented"))
}

func (UnimplementedControllerServiceHandler) SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v11.SearchUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.SearchUserInfo is not implemented"))
}

func (UnimplementedControllerServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListSessions is not implemented"))
}

func (UnimplementedControllerServiceHandler) GetSessionDetails(context.Context, *connect.Request[v1.GetSessionDetailsRequest]) (*connect.Response[v1.GetSessionDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.GetSessionDetails is not implemented"))
}

func (UnimplementedControllerServiceHandler) StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.StartWorld is not implemented"))
}

func (UnimplementedControllerServiceHandler) StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.StopSession is not implemented"))
}

func (UnimplementedControllerServiceHandler) SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.SaveSessionWorld is not implemented"))
}

func (UnimplementedControllerServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.InviteUser is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.UpdateUserRole is not implemented"))
}

func (UnimplementedControllerServiceHandler) UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.UpdateSessionParameters is not implemented"))
}

func (UnimplementedControllerServiceHandler) ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.ListUsersInSession is not implemented"))
}

func (UnimplementedControllerServiceHandler) KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.KickUser is not implemented"))
}

func (UnimplementedControllerServiceHandler) BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hdlctrl.v1.ControllerService.BanUser is not implemented"))
}
