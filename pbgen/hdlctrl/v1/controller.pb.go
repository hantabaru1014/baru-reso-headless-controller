// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: hdlctrl/v1/controller.proto

package hdlctrlv1

import (
	v1 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/headless/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHeadlessHostLogsRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	HostId string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// Types that are valid to be assigned to Query:
	//
	//	*GetHeadlessHostLogsRequest_Limit
	//	*GetHeadlessHostLogsRequest_Until
	//	*GetHeadlessHostLogsRequest_Since
	Query         isGetHeadlessHostLogsRequest_Query `protobuf_oneof:"query"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHeadlessHostLogsRequest) Reset() {
	*x = GetHeadlessHostLogsRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHeadlessHostLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadlessHostLogsRequest) ProtoMessage() {}

func (x *GetHeadlessHostLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadlessHostLogsRequest.ProtoReflect.Descriptor instead.
func (*GetHeadlessHostLogsRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{0}
}

func (x *GetHeadlessHostLogsRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *GetHeadlessHostLogsRequest) GetQuery() isGetHeadlessHostLogsRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetHeadlessHostLogsRequest) GetLimit() int32 {
	if x != nil {
		if x, ok := x.Query.(*GetHeadlessHostLogsRequest_Limit); ok {
			return x.Limit
		}
	}
	return 0
}

func (x *GetHeadlessHostLogsRequest) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Query.(*GetHeadlessHostLogsRequest_Until); ok {
			return x.Until
		}
	}
	return nil
}

func (x *GetHeadlessHostLogsRequest) GetSince() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Query.(*GetHeadlessHostLogsRequest_Since); ok {
			return x.Since
		}
	}
	return nil
}

type isGetHeadlessHostLogsRequest_Query interface {
	isGetHeadlessHostLogsRequest_Query()
}

type GetHeadlessHostLogsRequest_Limit struct {
	// limit が指定されている場合は、最新のログから limit 件取得する
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof"`
}

type GetHeadlessHostLogsRequest_Until struct {
	// until が指定されている場合は、until 以前のログを全て取得する
	Until *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=until,proto3,oneof"`
}

type GetHeadlessHostLogsRequest_Since struct {
	// since が指定されている場合は、since 以降のログを全て取得する
	Since *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=since,proto3,oneof"`
}

func (*GetHeadlessHostLogsRequest_Limit) isGetHeadlessHostLogsRequest_Query() {}

func (*GetHeadlessHostLogsRequest_Until) isGetHeadlessHostLogsRequest_Query() {}

func (*GetHeadlessHostLogsRequest_Since) isGetHeadlessHostLogsRequest_Query() {}

type GetHeadlessHostLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 時系列に並んだログ
	Logs          []*GetHeadlessHostLogsResponse_Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHeadlessHostLogsResponse) Reset() {
	*x = GetHeadlessHostLogsResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHeadlessHostLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadlessHostLogsResponse) ProtoMessage() {}

func (x *GetHeadlessHostLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadlessHostLogsResponse.ProtoReflect.Descriptor instead.
func (*GetHeadlessHostLogsResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{1}
}

func (x *GetHeadlessHostLogsResponse) GetLogs() []*GetHeadlessHostLogsResponse_Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type SearchUserInfoRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	HostId        string                    `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Parameters    *v1.SearchUserInfoRequest `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserInfoRequest) Reset() {
	*x = SearchUserInfoRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserInfoRequest) ProtoMessage() {}

func (x *SearchUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserInfoRequest.ProtoReflect.Descriptor instead.
func (*SearchUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{2}
}

func (x *SearchUserInfoRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *SearchUserInfoRequest) GetParameters() *v1.SearchUserInfoRequest {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type KickUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Parameters    *v1.KickUserRequest    `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickUserRequest) Reset() {
	*x = KickUserRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserRequest) ProtoMessage() {}

func (x *KickUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserRequest.ProtoReflect.Descriptor instead.
func (*KickUserRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{3}
}

func (x *KickUserRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *KickUserRequest) GetParameters() *v1.KickUserRequest {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type KickUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickUserResponse) Reset() {
	*x = KickUserResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserResponse) ProtoMessage() {}

func (x *KickUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserResponse.ProtoReflect.Descriptor instead.
func (*KickUserResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{4}
}

type BanUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Parameters    *v1.BanUserRequest     `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BanUserRequest) Reset() {
	*x = BanUserRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserRequest) ProtoMessage() {}

func (x *BanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserRequest.ProtoReflect.Descriptor instead.
func (*BanUserRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{5}
}

func (x *BanUserRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *BanUserRequest) GetParameters() *v1.BanUserRequest {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type BanUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BanUserResponse) Reset() {
	*x = BanUserResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserResponse) ProtoMessage() {}

func (x *BanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserResponse.ProtoReflect.Descriptor instead.
func (*BanUserResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{6}
}

type FetchWorldInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchWorldInfoRequest) Reset() {
	*x = FetchWorldInfoRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchWorldInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchWorldInfoRequest) ProtoMessage() {}

func (x *FetchWorldInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchWorldInfoRequest.ProtoReflect.Descriptor instead.
func (*FetchWorldInfoRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{7}
}

func (x *FetchWorldInfoRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *FetchWorldInfoRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ListHeadlessHostRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHeadlessHostRequest) Reset() {
	*x = ListHeadlessHostRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHeadlessHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeadlessHostRequest) ProtoMessage() {}

func (x *ListHeadlessHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeadlessHostRequest.ProtoReflect.Descriptor instead.
func (*ListHeadlessHostRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{8}
}

type ListHeadlessHostResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hosts         []*HeadlessHost        `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHeadlessHostResponse) Reset() {
	*x = ListHeadlessHostResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHeadlessHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeadlessHostResponse) ProtoMessage() {}

func (x *ListHeadlessHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeadlessHostResponse.ProtoReflect.Descriptor instead.
func (*ListHeadlessHostResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{9}
}

func (x *ListHeadlessHostResponse) GetHosts() []*HeadlessHost {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type GetHeadlessHostRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHeadlessHostRequest) Reset() {
	*x = GetHeadlessHostRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHeadlessHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadlessHostRequest) ProtoMessage() {}

func (x *GetHeadlessHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadlessHostRequest.ProtoReflect.Descriptor instead.
func (*GetHeadlessHostRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{10}
}

func (x *GetHeadlessHostRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetHeadlessHostResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          *HeadlessHost          `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHeadlessHostResponse) Reset() {
	*x = GetHeadlessHostResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHeadlessHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadlessHostResponse) ProtoMessage() {}

func (x *GetHeadlessHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadlessHostResponse.ProtoReflect.Descriptor instead.
func (*GetHeadlessHostResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{11}
}

func (x *GetHeadlessHostResponse) GetHost() *HeadlessHost {
	if x != nil {
		return x.Host
	}
	return nil
}

type AddHeadlessHostRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddHeadlessHostRequest) Reset() {
	*x = AddHeadlessHostRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddHeadlessHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHeadlessHostRequest) ProtoMessage() {}

func (x *AddHeadlessHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHeadlessHostRequest.ProtoReflect.Descriptor instead.
func (*AddHeadlessHostRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{12}
}

func (x *AddHeadlessHostRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddHeadlessHostRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AddHeadlessHostResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          *HeadlessHost          `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddHeadlessHostResponse) Reset() {
	*x = AddHeadlessHostResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddHeadlessHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHeadlessHostResponse) ProtoMessage() {}

func (x *AddHeadlessHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHeadlessHostResponse.ProtoReflect.Descriptor instead.
func (*AddHeadlessHostResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{13}
}

func (x *AddHeadlessHostResponse) GetHost() *HeadlessHost {
	if x != nil {
		return x.Host
	}
	return nil
}

type RemoveHeadlessHostRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHeadlessHostRequest) Reset() {
	*x = RemoveHeadlessHostRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHeadlessHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHeadlessHostRequest) ProtoMessage() {}

func (x *RemoveHeadlessHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHeadlessHostRequest.ProtoReflect.Descriptor instead.
func (*RemoveHeadlessHostRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveHeadlessHostRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveHeadlessHostResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHeadlessHostResponse) Reset() {
	*x = RemoveHeadlessHostResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHeadlessHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHeadlessHostResponse) ProtoMessage() {}

func (x *RemoveHeadlessHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHeadlessHostResponse.ProtoReflect.Descriptor instead.
func (*RemoveHeadlessHostResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{15}
}

type ListSessionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{16}
}

func (x *ListSessionsRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*v1.Session          `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{17}
}

func (x *ListSessionsResponse) GetSessions() []*v1.Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type GetSessionDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionDetailsRequest) Reset() {
	*x = GetSessionDetailsRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionDetailsRequest) ProtoMessage() {}

func (x *GetSessionDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetSessionDetailsRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{18}
}

func (x *GetSessionDetailsRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *GetSessionDetailsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetSessionDetailsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *v1.Session            `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionDetailsResponse) Reset() {
	*x = GetSessionDetailsResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionDetailsResponse) ProtoMessage() {}

func (x *GetSessionDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetSessionDetailsResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{19}
}

func (x *GetSessionDetailsResponse) GetSession() *v1.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type StartWorldRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	HostId        string                     `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Parameters    *v1.WorldStartupParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartWorldRequest) Reset() {
	*x = StartWorldRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorldRequest) ProtoMessage() {}

func (x *StartWorldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorldRequest.ProtoReflect.Descriptor instead.
func (*StartWorldRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{20}
}

func (x *StartWorldRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *StartWorldRequest) GetParameters() *v1.WorldStartupParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type StartWorldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenedSession *v1.Session            `protobuf:"bytes,1,opt,name=opened_session,json=openedSession,proto3" json:"opened_session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartWorldResponse) Reset() {
	*x = StartWorldResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorldResponse) ProtoMessage() {}

func (x *StartWorldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorldResponse.ProtoReflect.Descriptor instead.
func (*StartWorldResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{21}
}

func (x *StartWorldResponse) GetOpenedSession() *v1.Session {
	if x != nil {
		return x.OpenedSession
	}
	return nil
}

type StopSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopSessionRequest) Reset() {
	*x = StopSessionRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSessionRequest) ProtoMessage() {}

func (x *StopSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSessionRequest.ProtoReflect.Descriptor instead.
func (*StopSessionRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{22}
}

func (x *StopSessionRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *StopSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type StopSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopSessionResponse) Reset() {
	*x = StopSessionResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSessionResponse) ProtoMessage() {}

func (x *StopSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSessionResponse.ProtoReflect.Descriptor instead.
func (*StopSessionResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{23}
}

type SaveSessionWorldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveSessionWorldRequest) Reset() {
	*x = SaveSessionWorldRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveSessionWorldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSessionWorldRequest) ProtoMessage() {}

func (x *SaveSessionWorldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSessionWorldRequest.ProtoReflect.Descriptor instead.
func (*SaveSessionWorldRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{24}
}

func (x *SaveSessionWorldRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *SaveSessionWorldRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SaveSessionWorldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveSessionWorldResponse) Reset() {
	*x = SaveSessionWorldResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveSessionWorldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSessionWorldResponse) ProtoMessage() {}

func (x *SaveSessionWorldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSessionWorldResponse.ProtoReflect.Descriptor instead.
func (*SaveSessionWorldResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{25}
}

type InviteUserRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	HostId    string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	SessionId string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to User:
	//
	//	*InviteUserRequest_UserId
	//	*InviteUserRequest_UserName
	User          isInviteUserRequest_User `protobuf_oneof:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InviteUserRequest) Reset() {
	*x = InviteUserRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InviteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserRequest) ProtoMessage() {}

func (x *InviteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserRequest.ProtoReflect.Descriptor instead.
func (*InviteUserRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{26}
}

func (x *InviteUserRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *InviteUserRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *InviteUserRequest) GetUser() isInviteUserRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *InviteUserRequest) GetUserId() string {
	if x != nil {
		if x, ok := x.User.(*InviteUserRequest_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *InviteUserRequest) GetUserName() string {
	if x != nil {
		if x, ok := x.User.(*InviteUserRequest_UserName); ok {
			return x.UserName
		}
	}
	return ""
}

type isInviteUserRequest_User interface {
	isInviteUserRequest_User()
}

type InviteUserRequest_UserId struct {
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof"`
}

type InviteUserRequest_UserName struct {
	UserName string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3,oneof"`
}

func (*InviteUserRequest_UserId) isInviteUserRequest_User() {}

func (*InviteUserRequest_UserName) isInviteUserRequest_User() {}

type InviteUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InviteUserResponse) Reset() {
	*x = InviteUserResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InviteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserResponse) ProtoMessage() {}

func (x *InviteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserResponse.ProtoReflect.Descriptor instead.
func (*InviteUserResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{27}
}

type UpdateUserRoleRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	HostId        string                    `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Parameters    *v1.UpdateUserRoleRequest `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRoleRequest) Reset() {
	*x = UpdateUserRoleRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleRequest) ProtoMessage() {}

func (x *UpdateUserRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateUserRoleRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *UpdateUserRoleRequest) GetParameters() *v1.UpdateUserRoleRequest {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type UpdateUserRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          string                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRoleResponse) Reset() {
	*x = UpdateUserRoleResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleResponse) ProtoMessage() {}

func (x *UpdateUserRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateUserRoleResponse) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type UpdateSessionParametersRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	HostId        string                             `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Parameters    *v1.UpdateSessionParametersRequest `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSessionParametersRequest) Reset() {
	*x = UpdateSessionParametersRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionParametersRequest) ProtoMessage() {}

func (x *UpdateSessionParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionParametersRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionParametersRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateSessionParametersRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *UpdateSessionParametersRequest) GetParameters() *v1.UpdateSessionParametersRequest {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type UpdateSessionParametersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSessionParametersResponse) Reset() {
	*x = UpdateSessionParametersResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionParametersResponse) ProtoMessage() {}

func (x *UpdateSessionParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionParametersResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionParametersResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{31}
}

type ListUsersInSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostId        string                 `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsersInSessionRequest) Reset() {
	*x = ListUsersInSessionRequest{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersInSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersInSessionRequest) ProtoMessage() {}

func (x *ListUsersInSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersInSessionRequest.ProtoReflect.Descriptor instead.
func (*ListUsersInSessionRequest) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{32}
}

func (x *ListUsersInSessionRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ListUsersInSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ListUsersInSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*v1.UserInSession    `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsersInSessionResponse) Reset() {
	*x = ListUsersInSessionResponse{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersInSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersInSessionResponse) ProtoMessage() {}

func (x *ListUsersInSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersInSessionResponse.ProtoReflect.Descriptor instead.
func (*ListUsersInSessionResponse) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{33}
}

func (x *ListUsersInSessionResponse) GetUsers() []*v1.UserInSession {
	if x != nil {
		return x.Users
	}
	return nil
}

type HeadlessHost struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address           string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	ResoniteVersion   string                 `protobuf:"bytes,4,opt,name=resonite_version,json=resoniteVersion,proto3" json:"resonite_version,omitempty"`
	AccountId         string                 `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountName       string                 `protobuf:"bytes,6,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Fps               float32                `protobuf:"fixed32,7,opt,name=fps,proto3" json:"fps,omitempty"`
	StorageQuotaBytes int64                  `protobuf:"varint,8,opt,name=storage_quota_bytes,json=storageQuotaBytes,proto3" json:"storage_quota_bytes,omitempty"`
	StorageUsedBytes  int64                  `protobuf:"varint,9,opt,name=storage_used_bytes,json=storageUsedBytes,proto3" json:"storage_used_bytes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HeadlessHost) Reset() {
	*x = HeadlessHost{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeadlessHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadlessHost) ProtoMessage() {}

func (x *HeadlessHost) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadlessHost.ProtoReflect.Descriptor instead.
func (*HeadlessHost) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{34}
}

func (x *HeadlessHost) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HeadlessHost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HeadlessHost) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HeadlessHost) GetResoniteVersion() string {
	if x != nil {
		return x.ResoniteVersion
	}
	return ""
}

func (x *HeadlessHost) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *HeadlessHost) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *HeadlessHost) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *HeadlessHost) GetStorageQuotaBytes() int64 {
	if x != nil {
		return x.StorageQuotaBytes
	}
	return 0
}

func (x *HeadlessHost) GetStorageUsedBytes() int64 {
	if x != nil {
		return x.StorageUsedBytes
	}
	return 0
}

type GetHeadlessHostLogsResponse_Log struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsError       bool                   `protobuf:"varint,2,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	Body          string                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHeadlessHostLogsResponse_Log) Reset() {
	*x = GetHeadlessHostLogsResponse_Log{}
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHeadlessHostLogsResponse_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadlessHostLogsResponse_Log) ProtoMessage() {}

func (x *GetHeadlessHostLogsResponse_Log) ProtoReflect() protoreflect.Message {
	mi := &file_hdlctrl_v1_controller_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadlessHostLogsResponse_Log.ProtoReflect.Descriptor instead.
func (*GetHeadlessHostLogsResponse_Log) Descriptor() ([]byte, []int) {
	return file_hdlctrl_v1_controller_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetHeadlessHostLogsResponse_Log) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetHeadlessHostLogsResponse_Log) GetIsError() bool {
	if x != nil {
		return x.IsError
	}
	return false
}

func (x *GetHeadlessHostLogsResponse_Log) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

var File_hdlctrl_v1_controller_proto protoreflect.FileDescriptor

var file_hdlctrl_v1_controller_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x68,
	0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x68, 0x65, 0x61, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xce, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x6e, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x74, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x68,
	0x0a, 0x0f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4b, 0x69, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x0e,
	0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a,
	0x17, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x48, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x4b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x51, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x61,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x6e, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0xa5, 0x0b,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68,
	0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x64, 0x6c, 0x63,
	0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x68, 0x64, 0x6c,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x64,
	0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x24, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x1d, 0x2e,
	0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68,
	0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x68, 0x64,
	0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x64,
	0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10,
	0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x12, 0x23, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x68, 0x64, 0x6c, 0x63,
	0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x68, 0x64, 0x6c,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x72, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x68,
	0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x68, 0x64,
	0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x4b, 0x69,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x68,
	0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x64, 0x6c, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xbd, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x64,
	0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x62, 0x61, 0x72,
	0x75, 0x31, 0x30, 0x31, 0x34, 0x2f, 0x62, 0x61, 0x72, 0x75, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72,
	0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x68, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x48, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x48, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0a, 0x48, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x16, 0x48, 0x64, 0x6c, 0x63, 0x74, 0x72, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x48, 0x64, 0x6c, 0x63, 0x74, 0x72,
	0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hdlctrl_v1_controller_proto_rawDescOnce sync.Once
	file_hdlctrl_v1_controller_proto_rawDescData = file_hdlctrl_v1_controller_proto_rawDesc
)

func file_hdlctrl_v1_controller_proto_rawDescGZIP() []byte {
	file_hdlctrl_v1_controller_proto_rawDescOnce.Do(func() {
		file_hdlctrl_v1_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_hdlctrl_v1_controller_proto_rawDescData)
	})
	return file_hdlctrl_v1_controller_proto_rawDescData
}

var file_hdlctrl_v1_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_hdlctrl_v1_controller_proto_goTypes = []any{
	(*GetHeadlessHostLogsRequest)(nil),        // 0: hdlctrl.v1.GetHeadlessHostLogsRequest
	(*GetHeadlessHostLogsResponse)(nil),       // 1: hdlctrl.v1.GetHeadlessHostLogsResponse
	(*SearchUserInfoRequest)(nil),             // 2: hdlctrl.v1.SearchUserInfoRequest
	(*KickUserRequest)(nil),                   // 3: hdlctrl.v1.KickUserRequest
	(*KickUserResponse)(nil),                  // 4: hdlctrl.v1.KickUserResponse
	(*BanUserRequest)(nil),                    // 5: hdlctrl.v1.BanUserRequest
	(*BanUserResponse)(nil),                   // 6: hdlctrl.v1.BanUserResponse
	(*FetchWorldInfoRequest)(nil),             // 7: hdlctrl.v1.FetchWorldInfoRequest
	(*ListHeadlessHostRequest)(nil),           // 8: hdlctrl.v1.ListHeadlessHostRequest
	(*ListHeadlessHostResponse)(nil),          // 9: hdlctrl.v1.ListHeadlessHostResponse
	(*GetHeadlessHostRequest)(nil),            // 10: hdlctrl.v1.GetHeadlessHostRequest
	(*GetHeadlessHostResponse)(nil),           // 11: hdlctrl.v1.GetHeadlessHostResponse
	(*AddHeadlessHostRequest)(nil),            // 12: hdlctrl.v1.AddHeadlessHostRequest
	(*AddHeadlessHostResponse)(nil),           // 13: hdlctrl.v1.AddHeadlessHostResponse
	(*RemoveHeadlessHostRequest)(nil),         // 14: hdlctrl.v1.RemoveHeadlessHostRequest
	(*RemoveHeadlessHostResponse)(nil),        // 15: hdlctrl.v1.RemoveHeadlessHostResponse
	(*ListSessionsRequest)(nil),               // 16: hdlctrl.v1.ListSessionsRequest
	(*ListSessionsResponse)(nil),              // 17: hdlctrl.v1.ListSessionsResponse
	(*GetSessionDetailsRequest)(nil),          // 18: hdlctrl.v1.GetSessionDetailsRequest
	(*GetSessionDetailsResponse)(nil),         // 19: hdlctrl.v1.GetSessionDetailsResponse
	(*StartWorldRequest)(nil),                 // 20: hdlctrl.v1.StartWorldRequest
	(*StartWorldResponse)(nil),                // 21: hdlctrl.v1.StartWorldResponse
	(*StopSessionRequest)(nil),                // 22: hdlctrl.v1.StopSessionRequest
	(*StopSessionResponse)(nil),               // 23: hdlctrl.v1.StopSessionResponse
	(*SaveSessionWorldRequest)(nil),           // 24: hdlctrl.v1.SaveSessionWorldRequest
	(*SaveSessionWorldResponse)(nil),          // 25: hdlctrl.v1.SaveSessionWorldResponse
	(*InviteUserRequest)(nil),                 // 26: hdlctrl.v1.InviteUserRequest
	(*InviteUserResponse)(nil),                // 27: hdlctrl.v1.InviteUserResponse
	(*UpdateUserRoleRequest)(nil),             // 28: hdlctrl.v1.UpdateUserRoleRequest
	(*UpdateUserRoleResponse)(nil),            // 29: hdlctrl.v1.UpdateUserRoleResponse
	(*UpdateSessionParametersRequest)(nil),    // 30: hdlctrl.v1.UpdateSessionParametersRequest
	(*UpdateSessionParametersResponse)(nil),   // 31: hdlctrl.v1.UpdateSessionParametersResponse
	(*ListUsersInSessionRequest)(nil),         // 32: hdlctrl.v1.ListUsersInSessionRequest
	(*ListUsersInSessionResponse)(nil),        // 33: hdlctrl.v1.ListUsersInSessionResponse
	(*HeadlessHost)(nil),                      // 34: hdlctrl.v1.HeadlessHost
	(*GetHeadlessHostLogsResponse_Log)(nil),   // 35: hdlctrl.v1.GetHeadlessHostLogsResponse.Log
	(*timestamppb.Timestamp)(nil),             // 36: google.protobuf.Timestamp
	(*v1.SearchUserInfoRequest)(nil),          // 37: headless.v1.SearchUserInfoRequest
	(*v1.KickUserRequest)(nil),                // 38: headless.v1.KickUserRequest
	(*v1.BanUserRequest)(nil),                 // 39: headless.v1.BanUserRequest
	(*v1.Session)(nil),                        // 40: headless.v1.Session
	(*v1.WorldStartupParameters)(nil),         // 41: headless.v1.WorldStartupParameters
	(*v1.UpdateUserRoleRequest)(nil),          // 42: headless.v1.UpdateUserRoleRequest
	(*v1.UpdateSessionParametersRequest)(nil), // 43: headless.v1.UpdateSessionParametersRequest
	(*v1.UserInSession)(nil),                  // 44: headless.v1.UserInSession
	(*v1.FetchWorldInfoResponse)(nil),         // 45: headless.v1.FetchWorldInfoResponse
	(*v1.SearchUserInfoResponse)(nil),         // 46: headless.v1.SearchUserInfoResponse
}
var file_hdlctrl_v1_controller_proto_depIdxs = []int32{
	36, // 0: hdlctrl.v1.GetHeadlessHostLogsRequest.until:type_name -> google.protobuf.Timestamp
	36, // 1: hdlctrl.v1.GetHeadlessHostLogsRequest.since:type_name -> google.protobuf.Timestamp
	35, // 2: hdlctrl.v1.GetHeadlessHostLogsResponse.logs:type_name -> hdlctrl.v1.GetHeadlessHostLogsResponse.Log
	37, // 3: hdlctrl.v1.SearchUserInfoRequest.parameters:type_name -> headless.v1.SearchUserInfoRequest
	38, // 4: hdlctrl.v1.KickUserRequest.parameters:type_name -> headless.v1.KickUserRequest
	39, // 5: hdlctrl.v1.BanUserRequest.parameters:type_name -> headless.v1.BanUserRequest
	34, // 6: hdlctrl.v1.ListHeadlessHostResponse.hosts:type_name -> hdlctrl.v1.HeadlessHost
	34, // 7: hdlctrl.v1.GetHeadlessHostResponse.host:type_name -> hdlctrl.v1.HeadlessHost
	34, // 8: hdlctrl.v1.AddHeadlessHostResponse.host:type_name -> hdlctrl.v1.HeadlessHost
	40, // 9: hdlctrl.v1.ListSessionsResponse.sessions:type_name -> headless.v1.Session
	40, // 10: hdlctrl.v1.GetSessionDetailsResponse.session:type_name -> headless.v1.Session
	41, // 11: hdlctrl.v1.StartWorldRequest.parameters:type_name -> headless.v1.WorldStartupParameters
	40, // 12: hdlctrl.v1.StartWorldResponse.opened_session:type_name -> headless.v1.Session
	42, // 13: hdlctrl.v1.UpdateUserRoleRequest.parameters:type_name -> headless.v1.UpdateUserRoleRequest
	43, // 14: hdlctrl.v1.UpdateSessionParametersRequest.parameters:type_name -> headless.v1.UpdateSessionParametersRequest
	44, // 15: hdlctrl.v1.ListUsersInSessionResponse.users:type_name -> headless.v1.UserInSession
	36, // 16: hdlctrl.v1.GetHeadlessHostLogsResponse.Log.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 17: hdlctrl.v1.ControllerService.ListHeadlessHost:input_type -> hdlctrl.v1.ListHeadlessHostRequest
	10, // 18: hdlctrl.v1.ControllerService.GetHeadlessHost:input_type -> hdlctrl.v1.GetHeadlessHostRequest
	0,  // 19: hdlctrl.v1.ControllerService.GetHeadlessHostLogs:input_type -> hdlctrl.v1.GetHeadlessHostLogsRequest
	7,  // 20: hdlctrl.v1.ControllerService.FetchWorldInfo:input_type -> hdlctrl.v1.FetchWorldInfoRequest
	2,  // 21: hdlctrl.v1.ControllerService.SearchUserInfo:input_type -> hdlctrl.v1.SearchUserInfoRequest
	16, // 22: hdlctrl.v1.ControllerService.ListSessions:input_type -> hdlctrl.v1.ListSessionsRequest
	18, // 23: hdlctrl.v1.ControllerService.GetSessionDetails:input_type -> hdlctrl.v1.GetSessionDetailsRequest
	20, // 24: hdlctrl.v1.ControllerService.StartWorld:input_type -> hdlctrl.v1.StartWorldRequest
	22, // 25: hdlctrl.v1.ControllerService.StopSession:input_type -> hdlctrl.v1.StopSessionRequest
	24, // 26: hdlctrl.v1.ControllerService.SaveSessionWorld:input_type -> hdlctrl.v1.SaveSessionWorldRequest
	26, // 27: hdlctrl.v1.ControllerService.InviteUser:input_type -> hdlctrl.v1.InviteUserRequest
	28, // 28: hdlctrl.v1.ControllerService.UpdateUserRole:input_type -> hdlctrl.v1.UpdateUserRoleRequest
	30, // 29: hdlctrl.v1.ControllerService.UpdateSessionParameters:input_type -> hdlctrl.v1.UpdateSessionParametersRequest
	32, // 30: hdlctrl.v1.ControllerService.ListUsersInSession:input_type -> hdlctrl.v1.ListUsersInSessionRequest
	3,  // 31: hdlctrl.v1.ControllerService.KickUser:input_type -> hdlctrl.v1.KickUserRequest
	5,  // 32: hdlctrl.v1.ControllerService.BanUser:input_type -> hdlctrl.v1.BanUserRequest
	9,  // 33: hdlctrl.v1.ControllerService.ListHeadlessHost:output_type -> hdlctrl.v1.ListHeadlessHostResponse
	11, // 34: hdlctrl.v1.ControllerService.GetHeadlessHost:output_type -> hdlctrl.v1.GetHeadlessHostResponse
	1,  // 35: hdlctrl.v1.ControllerService.GetHeadlessHostLogs:output_type -> hdlctrl.v1.GetHeadlessHostLogsResponse
	45, // 36: hdlctrl.v1.ControllerService.FetchWorldInfo:output_type -> headless.v1.FetchWorldInfoResponse
	46, // 37: hdlctrl.v1.ControllerService.SearchUserInfo:output_type -> headless.v1.SearchUserInfoResponse
	17, // 38: hdlctrl.v1.ControllerService.ListSessions:output_type -> hdlctrl.v1.ListSessionsResponse
	19, // 39: hdlctrl.v1.ControllerService.GetSessionDetails:output_type -> hdlctrl.v1.GetSessionDetailsResponse
	21, // 40: hdlctrl.v1.ControllerService.StartWorld:output_type -> hdlctrl.v1.StartWorldResponse
	23, // 41: hdlctrl.v1.ControllerService.StopSession:output_type -> hdlctrl.v1.StopSessionResponse
	25, // 42: hdlctrl.v1.ControllerService.SaveSessionWorld:output_type -> hdlctrl.v1.SaveSessionWorldResponse
	27, // 43: hdlctrl.v1.ControllerService.InviteUser:output_type -> hdlctrl.v1.InviteUserResponse
	29, // 44: hdlctrl.v1.ControllerService.UpdateUserRole:output_type -> hdlctrl.v1.UpdateUserRoleResponse
	31, // 45: hdlctrl.v1.ControllerService.UpdateSessionParameters:output_type -> hdlctrl.v1.UpdateSessionParametersResponse
	33, // 46: hdlctrl.v1.ControllerService.ListUsersInSession:output_type -> hdlctrl.v1.ListUsersInSessionResponse
	4,  // 47: hdlctrl.v1.ControllerService.KickUser:output_type -> hdlctrl.v1.KickUserResponse
	6,  // 48: hdlctrl.v1.ControllerService.BanUser:output_type -> hdlctrl.v1.BanUserResponse
	33, // [33:49] is the sub-list for method output_type
	17, // [17:33] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_hdlctrl_v1_controller_proto_init() }
func file_hdlctrl_v1_controller_proto_init() {
	if File_hdlctrl_v1_controller_proto != nil {
		return
	}
	file_hdlctrl_v1_controller_proto_msgTypes[0].OneofWrappers = []any{
		(*GetHeadlessHostLogsRequest_Limit)(nil),
		(*GetHeadlessHostLogsRequest_Until)(nil),
		(*GetHeadlessHostLogsRequest_Since)(nil),
	}
	file_hdlctrl_v1_controller_proto_msgTypes[26].OneofWrappers = []any{
		(*InviteUserRequest_UserId)(nil),
		(*InviteUserRequest_UserName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hdlctrl_v1_controller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hdlctrl_v1_controller_proto_goTypes,
		DependencyIndexes: file_hdlctrl_v1_controller_proto_depIdxs,
		MessageInfos:      file_hdlctrl_v1_controller_proto_msgTypes,
	}.Build()
	File_hdlctrl_v1_controller_proto = out.File
	file_hdlctrl_v1_controller_proto_rawDesc = nil
	file_hdlctrl_v1_controller_proto_goTypes = nil
	file_hdlctrl_v1_controller_proto_depIdxs = nil
}
