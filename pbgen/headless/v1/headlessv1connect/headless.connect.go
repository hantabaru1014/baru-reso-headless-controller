// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: headless/v1/headless.proto

package headlessv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/headless/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HeadlessControlServiceName is the fully-qualified name of the HeadlessControlService service.
	HeadlessControlServiceName = "headless.v1.HeadlessControlService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HeadlessControlServiceGetAboutProcedure is the fully-qualified name of the
	// HeadlessControlService's GetAbout RPC.
	HeadlessControlServiceGetAboutProcedure = "/headless.v1.HeadlessControlService/GetAbout"
	// HeadlessControlServiceGetStatusProcedure is the fully-qualified name of the
	// HeadlessControlService's GetStatus RPC.
	HeadlessControlServiceGetStatusProcedure = "/headless.v1.HeadlessControlService/GetStatus"
	// HeadlessControlServiceShutdownProcedure is the fully-qualified name of the
	// HeadlessControlService's Shutdown RPC.
	HeadlessControlServiceShutdownProcedure = "/headless.v1.HeadlessControlService/Shutdown"
	// HeadlessControlServiceListSessionsProcedure is the fully-qualified name of the
	// HeadlessControlService's ListSessions RPC.
	HeadlessControlServiceListSessionsProcedure = "/headless.v1.HeadlessControlService/ListSessions"
	// HeadlessControlServiceStartWorldProcedure is the fully-qualified name of the
	// HeadlessControlService's StartWorld RPC.
	HeadlessControlServiceStartWorldProcedure = "/headless.v1.HeadlessControlService/StartWorld"
	// HeadlessControlServiceStopSessionProcedure is the fully-qualified name of the
	// HeadlessControlService's StopSession RPC.
	HeadlessControlServiceStopSessionProcedure = "/headless.v1.HeadlessControlService/StopSession"
	// HeadlessControlServiceSaveSessionWorldProcedure is the fully-qualified name of the
	// HeadlessControlService's SaveSessionWorld RPC.
	HeadlessControlServiceSaveSessionWorldProcedure = "/headless.v1.HeadlessControlService/SaveSessionWorld"
	// HeadlessControlServiceInviteUserProcedure is the fully-qualified name of the
	// HeadlessControlService's InviteUser RPC.
	HeadlessControlServiceInviteUserProcedure = "/headless.v1.HeadlessControlService/InviteUser"
	// HeadlessControlServiceUpdateUserRoleProcedure is the fully-qualified name of the
	// HeadlessControlService's UpdateUserRole RPC.
	HeadlessControlServiceUpdateUserRoleProcedure = "/headless.v1.HeadlessControlService/UpdateUserRole"
	// HeadlessControlServiceUpdateSessionParametersProcedure is the fully-qualified name of the
	// HeadlessControlService's UpdateSessionParameters RPC.
	HeadlessControlServiceUpdateSessionParametersProcedure = "/headless.v1.HeadlessControlService/UpdateSessionParameters"
	// HeadlessControlServiceListUsersInSessionProcedure is the fully-qualified name of the
	// HeadlessControlService's ListUsersInSession RPC.
	HeadlessControlServiceListUsersInSessionProcedure = "/headless.v1.HeadlessControlService/ListUsersInSession"
)

// HeadlessControlServiceClient is a client for the headless.v1.HeadlessControlService service.
type HeadlessControlServiceClient interface {
	GetAbout(context.Context, *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
}

// NewHeadlessControlServiceClient constructs a client for the headless.v1.HeadlessControlService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHeadlessControlServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HeadlessControlServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	headlessControlServiceMethods := v1.File_headless_v1_headless_proto.Services().ByName("HeadlessControlService").Methods()
	return &headlessControlServiceClient{
		getAbout: connect.NewClient[v1.GetAboutRequest, v1.GetAboutResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetAboutProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetAbout")),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetStatusProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
		shutdown: connect.NewClient[v1.ShutdownRequest, v1.ShutdownResponse](
			httpClient,
			baseURL+HeadlessControlServiceShutdownProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("Shutdown")),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+HeadlessControlServiceListSessionsProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		startWorld: connect.NewClient[v1.StartWorldRequest, v1.StartWorldResponse](
			httpClient,
			baseURL+HeadlessControlServiceStartWorldProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("StartWorld")),
			connect.WithClientOptions(opts...),
		),
		stopSession: connect.NewClient[v1.StopSessionRequest, v1.StopSessionResponse](
			httpClient,
			baseURL+HeadlessControlServiceStopSessionProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("StopSession")),
			connect.WithClientOptions(opts...),
		),
		saveSessionWorld: connect.NewClient[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse](
			httpClient,
			baseURL+HeadlessControlServiceSaveSessionWorldProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("SaveSessionWorld")),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+HeadlessControlServiceInviteUserProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("InviteUser")),
			connect.WithClientOptions(opts...),
		),
		updateUserRole: connect.NewClient[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse](
			httpClient,
			baseURL+HeadlessControlServiceUpdateUserRoleProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("UpdateUserRole")),
			connect.WithClientOptions(opts...),
		),
		updateSessionParameters: connect.NewClient[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse](
			httpClient,
			baseURL+HeadlessControlServiceUpdateSessionParametersProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("UpdateSessionParameters")),
			connect.WithClientOptions(opts...),
		),
		listUsersInSession: connect.NewClient[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse](
			httpClient,
			baseURL+HeadlessControlServiceListUsersInSessionProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("ListUsersInSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// headlessControlServiceClient implements HeadlessControlServiceClient.
type headlessControlServiceClient struct {
	getAbout                *connect.Client[v1.GetAboutRequest, v1.GetAboutResponse]
	getStatus               *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
	shutdown                *connect.Client[v1.ShutdownRequest, v1.ShutdownResponse]
	listSessions            *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	startWorld              *connect.Client[v1.StartWorldRequest, v1.StartWorldResponse]
	stopSession             *connect.Client[v1.StopSessionRequest, v1.StopSessionResponse]
	saveSessionWorld        *connect.Client[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse]
	inviteUser              *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	updateUserRole          *connect.Client[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse]
	updateSessionParameters *connect.Client[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse]
	listUsersInSession      *connect.Client[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse]
}

// GetAbout calls headless.v1.HeadlessControlService.GetAbout.
func (c *headlessControlServiceClient) GetAbout(ctx context.Context, req *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error) {
	return c.getAbout.CallUnary(ctx, req)
}

// GetStatus calls headless.v1.HeadlessControlService.GetStatus.
func (c *headlessControlServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// Shutdown calls headless.v1.HeadlessControlService.Shutdown.
func (c *headlessControlServiceClient) Shutdown(ctx context.Context, req *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error) {
	return c.shutdown.CallUnary(ctx, req)
}

// ListSessions calls headless.v1.HeadlessControlService.ListSessions.
func (c *headlessControlServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// StartWorld calls headless.v1.HeadlessControlService.StartWorld.
func (c *headlessControlServiceClient) StartWorld(ctx context.Context, req *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return c.startWorld.CallUnary(ctx, req)
}

// StopSession calls headless.v1.HeadlessControlService.StopSession.
func (c *headlessControlServiceClient) StopSession(ctx context.Context, req *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return c.stopSession.CallUnary(ctx, req)
}

// SaveSessionWorld calls headless.v1.HeadlessControlService.SaveSessionWorld.
func (c *headlessControlServiceClient) SaveSessionWorld(ctx context.Context, req *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return c.saveSessionWorld.CallUnary(ctx, req)
}

// InviteUser calls headless.v1.HeadlessControlService.InviteUser.
func (c *headlessControlServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// UpdateUserRole calls headless.v1.HeadlessControlService.UpdateUserRole.
func (c *headlessControlServiceClient) UpdateUserRole(ctx context.Context, req *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return c.updateUserRole.CallUnary(ctx, req)
}

// UpdateSessionParameters calls headless.v1.HeadlessControlService.UpdateSessionParameters.
func (c *headlessControlServiceClient) UpdateSessionParameters(ctx context.Context, req *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return c.updateSessionParameters.CallUnary(ctx, req)
}

// ListUsersInSession calls headless.v1.HeadlessControlService.ListUsersInSession.
func (c *headlessControlServiceClient) ListUsersInSession(ctx context.Context, req *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return c.listUsersInSession.CallUnary(ctx, req)
}

// HeadlessControlServiceHandler is an implementation of the headless.v1.HeadlessControlService
// service.
type HeadlessControlServiceHandler interface {
	GetAbout(context.Context, *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
}

// NewHeadlessControlServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHeadlessControlServiceHandler(svc HeadlessControlServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	headlessControlServiceMethods := v1.File_headless_v1_headless_proto.Services().ByName("HeadlessControlService").Methods()
	headlessControlServiceGetAboutHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetAboutProcedure,
		svc.GetAbout,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetAbout")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetStatusHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceShutdownHandler := connect.NewUnaryHandler(
		HeadlessControlServiceShutdownProcedure,
		svc.Shutdown,
		connect.WithSchema(headlessControlServiceMethods.ByName("Shutdown")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceListSessionsHandler := connect.NewUnaryHandler(
		HeadlessControlServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(headlessControlServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceStartWorldHandler := connect.NewUnaryHandler(
		HeadlessControlServiceStartWorldProcedure,
		svc.StartWorld,
		connect.WithSchema(headlessControlServiceMethods.ByName("StartWorld")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceStopSessionHandler := connect.NewUnaryHandler(
		HeadlessControlServiceStopSessionProcedure,
		svc.StopSession,
		connect.WithSchema(headlessControlServiceMethods.ByName("StopSession")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceSaveSessionWorldHandler := connect.NewUnaryHandler(
		HeadlessControlServiceSaveSessionWorldProcedure,
		svc.SaveSessionWorld,
		connect.WithSchema(headlessControlServiceMethods.ByName("SaveSessionWorld")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceInviteUserHandler := connect.NewUnaryHandler(
		HeadlessControlServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(headlessControlServiceMethods.ByName("InviteUser")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceUpdateUserRoleHandler := connect.NewUnaryHandler(
		HeadlessControlServiceUpdateUserRoleProcedure,
		svc.UpdateUserRole,
		connect.WithSchema(headlessControlServiceMethods.ByName("UpdateUserRole")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceUpdateSessionParametersHandler := connect.NewUnaryHandler(
		HeadlessControlServiceUpdateSessionParametersProcedure,
		svc.UpdateSessionParameters,
		connect.WithSchema(headlessControlServiceMethods.ByName("UpdateSessionParameters")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceListUsersInSessionHandler := connect.NewUnaryHandler(
		HeadlessControlServiceListUsersInSessionProcedure,
		svc.ListUsersInSession,
		connect.WithSchema(headlessControlServiceMethods.ByName("ListUsersInSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/headless.v1.HeadlessControlService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HeadlessControlServiceGetAboutProcedure:
			headlessControlServiceGetAboutHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetStatusProcedure:
			headlessControlServiceGetStatusHandler.ServeHTTP(w, r)
		case HeadlessControlServiceShutdownProcedure:
			headlessControlServiceShutdownHandler.ServeHTTP(w, r)
		case HeadlessControlServiceListSessionsProcedure:
			headlessControlServiceListSessionsHandler.ServeHTTP(w, r)
		case HeadlessControlServiceStartWorldProcedure:
			headlessControlServiceStartWorldHandler.ServeHTTP(w, r)
		case HeadlessControlServiceStopSessionProcedure:
			headlessControlServiceStopSessionHandler.ServeHTTP(w, r)
		case HeadlessControlServiceSaveSessionWorldProcedure:
			headlessControlServiceSaveSessionWorldHandler.ServeHTTP(w, r)
		case HeadlessControlServiceInviteUserProcedure:
			headlessControlServiceInviteUserHandler.ServeHTTP(w, r)
		case HeadlessControlServiceUpdateUserRoleProcedure:
			headlessControlServiceUpdateUserRoleHandler.ServeHTTP(w, r)
		case HeadlessControlServiceUpdateSessionParametersProcedure:
			headlessControlServiceUpdateSessionParametersHandler.ServeHTTP(w, r)
		case HeadlessControlServiceListUsersInSessionProcedure:
			headlessControlServiceListUsersInSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHeadlessControlServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHeadlessControlServiceHandler struct{}

func (UnimplementedHeadlessControlServiceHandler) GetAbout(context.Context, *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetAbout is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetStatus is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.Shutdown is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.ListSessions is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.StartWorld is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.StopSession is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.SaveSessionWorld is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.InviteUser is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.UpdateUserRole is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.UpdateSessionParameters is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.ListUsersInSession is not implemented"))
}
