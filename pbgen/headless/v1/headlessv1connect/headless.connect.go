// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: headless/v1/headless.proto

package headlessv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hantabaru1014/baru-reso-headless-controller/pbgen/headless/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HeadlessControlServiceName is the fully-qualified name of the HeadlessControlService service.
	HeadlessControlServiceName = "headless.v1.HeadlessControlService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HeadlessControlServiceGetAboutProcedure is the fully-qualified name of the
	// HeadlessControlService's GetAbout RPC.
	HeadlessControlServiceGetAboutProcedure = "/headless.v1.HeadlessControlService/GetAbout"
	// HeadlessControlServiceGetStatusProcedure is the fully-qualified name of the
	// HeadlessControlService's GetStatus RPC.
	HeadlessControlServiceGetStatusProcedure = "/headless.v1.HeadlessControlService/GetStatus"
	// HeadlessControlServiceShutdownProcedure is the fully-qualified name of the
	// HeadlessControlService's Shutdown RPC.
	HeadlessControlServiceShutdownProcedure = "/headless.v1.HeadlessControlService/Shutdown"
	// HeadlessControlServiceListSessionsProcedure is the fully-qualified name of the
	// HeadlessControlService's ListSessions RPC.
	HeadlessControlServiceListSessionsProcedure = "/headless.v1.HeadlessControlService/ListSessions"
	// HeadlessControlServiceGetSessionProcedure is the fully-qualified name of the
	// HeadlessControlService's GetSession RPC.
	HeadlessControlServiceGetSessionProcedure = "/headless.v1.HeadlessControlService/GetSession"
	// HeadlessControlServiceStartWorldProcedure is the fully-qualified name of the
	// HeadlessControlService's StartWorld RPC.
	HeadlessControlServiceStartWorldProcedure = "/headless.v1.HeadlessControlService/StartWorld"
	// HeadlessControlServiceStopSessionProcedure is the fully-qualified name of the
	// HeadlessControlService's StopSession RPC.
	HeadlessControlServiceStopSessionProcedure = "/headless.v1.HeadlessControlService/StopSession"
	// HeadlessControlServiceSaveSessionWorldProcedure is the fully-qualified name of the
	// HeadlessControlService's SaveSessionWorld RPC.
	HeadlessControlServiceSaveSessionWorldProcedure = "/headless.v1.HeadlessControlService/SaveSessionWorld"
	// HeadlessControlServiceSaveAsSessionWorldProcedure is the fully-qualified name of the
	// HeadlessControlService's SaveAsSessionWorld RPC.
	HeadlessControlServiceSaveAsSessionWorldProcedure = "/headless.v1.HeadlessControlService/SaveAsSessionWorld"
	// HeadlessControlServiceInviteUserProcedure is the fully-qualified name of the
	// HeadlessControlService's InviteUser RPC.
	HeadlessControlServiceInviteUserProcedure = "/headless.v1.HeadlessControlService/InviteUser"
	// HeadlessControlServiceAllowUserToJoinProcedure is the fully-qualified name of the
	// HeadlessControlService's AllowUserToJoin RPC.
	HeadlessControlServiceAllowUserToJoinProcedure = "/headless.v1.HeadlessControlService/AllowUserToJoin"
	// HeadlessControlServiceUpdateUserRoleProcedure is the fully-qualified name of the
	// HeadlessControlService's UpdateUserRole RPC.
	HeadlessControlServiceUpdateUserRoleProcedure = "/headless.v1.HeadlessControlService/UpdateUserRole"
	// HeadlessControlServiceUpdateSessionParametersProcedure is the fully-qualified name of the
	// HeadlessControlService's UpdateSessionParameters RPC.
	HeadlessControlServiceUpdateSessionParametersProcedure = "/headless.v1.HeadlessControlService/UpdateSessionParameters"
	// HeadlessControlServiceListUsersInSessionProcedure is the fully-qualified name of the
	// HeadlessControlService's ListUsersInSession RPC.
	HeadlessControlServiceListUsersInSessionProcedure = "/headless.v1.HeadlessControlService/ListUsersInSession"
	// HeadlessControlServiceKickUserProcedure is the fully-qualified name of the
	// HeadlessControlService's KickUser RPC.
	HeadlessControlServiceKickUserProcedure = "/headless.v1.HeadlessControlService/KickUser"
	// HeadlessControlServiceBanUserProcedure is the fully-qualified name of the
	// HeadlessControlService's BanUser RPC.
	HeadlessControlServiceBanUserProcedure = "/headless.v1.HeadlessControlService/BanUser"
	// HeadlessControlServiceGetHostSettingsProcedure is the fully-qualified name of the
	// HeadlessControlService's GetHostSettings RPC.
	HeadlessControlServiceGetHostSettingsProcedure = "/headless.v1.HeadlessControlService/GetHostSettings"
	// HeadlessControlServiceUpdateHostSettingsProcedure is the fully-qualified name of the
	// HeadlessControlService's UpdateHostSettings RPC.
	HeadlessControlServiceUpdateHostSettingsProcedure = "/headless.v1.HeadlessControlService/UpdateHostSettings"
	// HeadlessControlServiceAllowHostAccessProcedure is the fully-qualified name of the
	// HeadlessControlService's AllowHostAccess RPC.
	HeadlessControlServiceAllowHostAccessProcedure = "/headless.v1.HeadlessControlService/AllowHostAccess"
	// HeadlessControlServiceDenyHostAccessProcedure is the fully-qualified name of the
	// HeadlessControlService's DenyHostAccess RPC.
	HeadlessControlServiceDenyHostAccessProcedure = "/headless.v1.HeadlessControlService/DenyHostAccess"
	// HeadlessControlServiceGetStartupConfigToRestoreProcedure is the fully-qualified name of the
	// HeadlessControlService's GetStartupConfigToRestore RPC.
	HeadlessControlServiceGetStartupConfigToRestoreProcedure = "/headless.v1.HeadlessControlService/GetStartupConfigToRestore"
	// HeadlessControlServiceGetAccountInfoProcedure is the fully-qualified name of the
	// HeadlessControlService's GetAccountInfo RPC.
	HeadlessControlServiceGetAccountInfoProcedure = "/headless.v1.HeadlessControlService/GetAccountInfo"
	// HeadlessControlServiceFetchWorldInfoProcedure is the fully-qualified name of the
	// HeadlessControlService's FetchWorldInfo RPC.
	HeadlessControlServiceFetchWorldInfoProcedure = "/headless.v1.HeadlessControlService/FetchWorldInfo"
	// HeadlessControlServiceSearchUserInfoProcedure is the fully-qualified name of the
	// HeadlessControlService's SearchUserInfo RPC.
	HeadlessControlServiceSearchUserInfoProcedure = "/headless.v1.HeadlessControlService/SearchUserInfo"
	// HeadlessControlServiceGetFriendRequestsProcedure is the fully-qualified name of the
	// HeadlessControlService's GetFriendRequests RPC.
	HeadlessControlServiceGetFriendRequestsProcedure = "/headless.v1.HeadlessControlService/GetFriendRequests"
	// HeadlessControlServiceAcceptFriendRequestsProcedure is the fully-qualified name of the
	// HeadlessControlService's AcceptFriendRequests RPC.
	HeadlessControlServiceAcceptFriendRequestsProcedure = "/headless.v1.HeadlessControlService/AcceptFriendRequests"
	// HeadlessControlServiceListContactsProcedure is the fully-qualified name of the
	// HeadlessControlService's ListContacts RPC.
	HeadlessControlServiceListContactsProcedure = "/headless.v1.HeadlessControlService/ListContacts"
	// HeadlessControlServiceGetContactMessagesProcedure is the fully-qualified name of the
	// HeadlessControlService's GetContactMessages RPC.
	HeadlessControlServiceGetContactMessagesProcedure = "/headless.v1.HeadlessControlService/GetContactMessages"
	// HeadlessControlServiceSendContactMessageProcedure is the fully-qualified name of the
	// HeadlessControlService's SendContactMessage RPC.
	HeadlessControlServiceSendContactMessageProcedure = "/headless.v1.HeadlessControlService/SendContactMessage"
)

// HeadlessControlServiceClient is a client for the headless.v1.HeadlessControlService service.
type HeadlessControlServiceClient interface {
	GetAbout(context.Context, *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	SaveAsSessionWorld(context.Context, *connect.Request[v1.SaveAsSessionWorldRequest]) (*connect.Response[v1.SaveAsSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	AllowUserToJoin(context.Context, *connect.Request[v1.AllowUserToJoinRequest]) (*connect.Response[v1.AllowUserToJoinResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
	KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error)
	BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error)
	GetHostSettings(context.Context, *connect.Request[v1.GetHostSettingsRequest]) (*connect.Response[v1.GetHostSettingsResponse], error)
	UpdateHostSettings(context.Context, *connect.Request[v1.UpdateHostSettingsRequest]) (*connect.Response[v1.UpdateHostSettingsResponse], error)
	AllowHostAccess(context.Context, *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error)
	DenyHostAccess(context.Context, *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error)
	GetStartupConfigToRestore(context.Context, *connect.Request[v1.GetStartupConfigToRestoreRequest]) (*connect.Response[v1.GetStartupConfigToRestoreResponse], error)
	// Cloud系
	GetAccountInfo(context.Context, *connect.Request[v1.GetAccountInfoRequest]) (*connect.Response[v1.GetAccountInfoResponse], error)
	FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v1.FetchWorldInfoResponse], error)
	SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v1.SearchUserInfoResponse], error)
	GetFriendRequests(context.Context, *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error)
	AcceptFriendRequests(context.Context, *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error)
	ListContacts(context.Context, *connect.Request[v1.ListContactsRequest]) (*connect.Response[v1.ListContactsResponse], error)
	GetContactMessages(context.Context, *connect.Request[v1.GetContactMessagesRequest]) (*connect.Response[v1.GetContactMessagesResponse], error)
	SendContactMessage(context.Context, *connect.Request[v1.SendContactMessageRequest]) (*connect.Response[v1.SendContactMessageResponse], error)
}

// NewHeadlessControlServiceClient constructs a client for the headless.v1.HeadlessControlService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHeadlessControlServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HeadlessControlServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	headlessControlServiceMethods := v1.File_headless_v1_headless_proto.Services().ByName("HeadlessControlService").Methods()
	return &headlessControlServiceClient{
		getAbout: connect.NewClient[v1.GetAboutRequest, v1.GetAboutResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetAboutProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetAbout")),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetStatusProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
		shutdown: connect.NewClient[v1.ShutdownRequest, v1.ShutdownResponse](
			httpClient,
			baseURL+HeadlessControlServiceShutdownProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("Shutdown")),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+HeadlessControlServiceListSessionsProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		getSession: connect.NewClient[v1.GetSessionRequest, v1.GetSessionResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetSessionProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetSession")),
			connect.WithClientOptions(opts...),
		),
		startWorld: connect.NewClient[v1.StartWorldRequest, v1.StartWorldResponse](
			httpClient,
			baseURL+HeadlessControlServiceStartWorldProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("StartWorld")),
			connect.WithClientOptions(opts...),
		),
		stopSession: connect.NewClient[v1.StopSessionRequest, v1.StopSessionResponse](
			httpClient,
			baseURL+HeadlessControlServiceStopSessionProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("StopSession")),
			connect.WithClientOptions(opts...),
		),
		saveSessionWorld: connect.NewClient[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse](
			httpClient,
			baseURL+HeadlessControlServiceSaveSessionWorldProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("SaveSessionWorld")),
			connect.WithClientOptions(opts...),
		),
		saveAsSessionWorld: connect.NewClient[v1.SaveAsSessionWorldRequest, v1.SaveAsSessionWorldResponse](
			httpClient,
			baseURL+HeadlessControlServiceSaveAsSessionWorldProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("SaveAsSessionWorld")),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+HeadlessControlServiceInviteUserProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("InviteUser")),
			connect.WithClientOptions(opts...),
		),
		allowUserToJoin: connect.NewClient[v1.AllowUserToJoinRequest, v1.AllowUserToJoinResponse](
			httpClient,
			baseURL+HeadlessControlServiceAllowUserToJoinProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("AllowUserToJoin")),
			connect.WithClientOptions(opts...),
		),
		updateUserRole: connect.NewClient[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse](
			httpClient,
			baseURL+HeadlessControlServiceUpdateUserRoleProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("UpdateUserRole")),
			connect.WithClientOptions(opts...),
		),
		updateSessionParameters: connect.NewClient[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse](
			httpClient,
			baseURL+HeadlessControlServiceUpdateSessionParametersProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("UpdateSessionParameters")),
			connect.WithClientOptions(opts...),
		),
		listUsersInSession: connect.NewClient[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse](
			httpClient,
			baseURL+HeadlessControlServiceListUsersInSessionProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("ListUsersInSession")),
			connect.WithClientOptions(opts...),
		),
		kickUser: connect.NewClient[v1.KickUserRequest, v1.KickUserResponse](
			httpClient,
			baseURL+HeadlessControlServiceKickUserProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("KickUser")),
			connect.WithClientOptions(opts...),
		),
		banUser: connect.NewClient[v1.BanUserRequest, v1.BanUserResponse](
			httpClient,
			baseURL+HeadlessControlServiceBanUserProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("BanUser")),
			connect.WithClientOptions(opts...),
		),
		getHostSettings: connect.NewClient[v1.GetHostSettingsRequest, v1.GetHostSettingsResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetHostSettingsProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetHostSettings")),
			connect.WithClientOptions(opts...),
		),
		updateHostSettings: connect.NewClient[v1.UpdateHostSettingsRequest, v1.UpdateHostSettingsResponse](
			httpClient,
			baseURL+HeadlessControlServiceUpdateHostSettingsProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("UpdateHostSettings")),
			connect.WithClientOptions(opts...),
		),
		allowHostAccess: connect.NewClient[v1.AllowHostAccessRequest, v1.AllowHostAccessResponse](
			httpClient,
			baseURL+HeadlessControlServiceAllowHostAccessProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("AllowHostAccess")),
			connect.WithClientOptions(opts...),
		),
		denyHostAccess: connect.NewClient[v1.DenyHostAccessRequest, v1.DenyHostAccessResponse](
			httpClient,
			baseURL+HeadlessControlServiceDenyHostAccessProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("DenyHostAccess")),
			connect.WithClientOptions(opts...),
		),
		getStartupConfigToRestore: connect.NewClient[v1.GetStartupConfigToRestoreRequest, v1.GetStartupConfigToRestoreResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetStartupConfigToRestoreProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetStartupConfigToRestore")),
			connect.WithClientOptions(opts...),
		),
		getAccountInfo: connect.NewClient[v1.GetAccountInfoRequest, v1.GetAccountInfoResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetAccountInfoProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetAccountInfo")),
			connect.WithClientOptions(opts...),
		),
		fetchWorldInfo: connect.NewClient[v1.FetchWorldInfoRequest, v1.FetchWorldInfoResponse](
			httpClient,
			baseURL+HeadlessControlServiceFetchWorldInfoProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("FetchWorldInfo")),
			connect.WithClientOptions(opts...),
		),
		searchUserInfo: connect.NewClient[v1.SearchUserInfoRequest, v1.SearchUserInfoResponse](
			httpClient,
			baseURL+HeadlessControlServiceSearchUserInfoProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("SearchUserInfo")),
			connect.WithClientOptions(opts...),
		),
		getFriendRequests: connect.NewClient[v1.GetFriendRequestsRequest, v1.GetFriendRequestsResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetFriendRequestsProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetFriendRequests")),
			connect.WithClientOptions(opts...),
		),
		acceptFriendRequests: connect.NewClient[v1.AcceptFriendRequestsRequest, v1.AcceptFriendRequestsResponse](
			httpClient,
			baseURL+HeadlessControlServiceAcceptFriendRequestsProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("AcceptFriendRequests")),
			connect.WithClientOptions(opts...),
		),
		listContacts: connect.NewClient[v1.ListContactsRequest, v1.ListContactsResponse](
			httpClient,
			baseURL+HeadlessControlServiceListContactsProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("ListContacts")),
			connect.WithClientOptions(opts...),
		),
		getContactMessages: connect.NewClient[v1.GetContactMessagesRequest, v1.GetContactMessagesResponse](
			httpClient,
			baseURL+HeadlessControlServiceGetContactMessagesProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("GetContactMessages")),
			connect.WithClientOptions(opts...),
		),
		sendContactMessage: connect.NewClient[v1.SendContactMessageRequest, v1.SendContactMessageResponse](
			httpClient,
			baseURL+HeadlessControlServiceSendContactMessageProcedure,
			connect.WithSchema(headlessControlServiceMethods.ByName("SendContactMessage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// headlessControlServiceClient implements HeadlessControlServiceClient.
type headlessControlServiceClient struct {
	getAbout                  *connect.Client[v1.GetAboutRequest, v1.GetAboutResponse]
	getStatus                 *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
	shutdown                  *connect.Client[v1.ShutdownRequest, v1.ShutdownResponse]
	listSessions              *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	getSession                *connect.Client[v1.GetSessionRequest, v1.GetSessionResponse]
	startWorld                *connect.Client[v1.StartWorldRequest, v1.StartWorldResponse]
	stopSession               *connect.Client[v1.StopSessionRequest, v1.StopSessionResponse]
	saveSessionWorld          *connect.Client[v1.SaveSessionWorldRequest, v1.SaveSessionWorldResponse]
	saveAsSessionWorld        *connect.Client[v1.SaveAsSessionWorldRequest, v1.SaveAsSessionWorldResponse]
	inviteUser                *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	allowUserToJoin           *connect.Client[v1.AllowUserToJoinRequest, v1.AllowUserToJoinResponse]
	updateUserRole            *connect.Client[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse]
	updateSessionParameters   *connect.Client[v1.UpdateSessionParametersRequest, v1.UpdateSessionParametersResponse]
	listUsersInSession        *connect.Client[v1.ListUsersInSessionRequest, v1.ListUsersInSessionResponse]
	kickUser                  *connect.Client[v1.KickUserRequest, v1.KickUserResponse]
	banUser                   *connect.Client[v1.BanUserRequest, v1.BanUserResponse]
	getHostSettings           *connect.Client[v1.GetHostSettingsRequest, v1.GetHostSettingsResponse]
	updateHostSettings        *connect.Client[v1.UpdateHostSettingsRequest, v1.UpdateHostSettingsResponse]
	allowHostAccess           *connect.Client[v1.AllowHostAccessRequest, v1.AllowHostAccessResponse]
	denyHostAccess            *connect.Client[v1.DenyHostAccessRequest, v1.DenyHostAccessResponse]
	getStartupConfigToRestore *connect.Client[v1.GetStartupConfigToRestoreRequest, v1.GetStartupConfigToRestoreResponse]
	getAccountInfo            *connect.Client[v1.GetAccountInfoRequest, v1.GetAccountInfoResponse]
	fetchWorldInfo            *connect.Client[v1.FetchWorldInfoRequest, v1.FetchWorldInfoResponse]
	searchUserInfo            *connect.Client[v1.SearchUserInfoRequest, v1.SearchUserInfoResponse]
	getFriendRequests         *connect.Client[v1.GetFriendRequestsRequest, v1.GetFriendRequestsResponse]
	acceptFriendRequests      *connect.Client[v1.AcceptFriendRequestsRequest, v1.AcceptFriendRequestsResponse]
	listContacts              *connect.Client[v1.ListContactsRequest, v1.ListContactsResponse]
	getContactMessages        *connect.Client[v1.GetContactMessagesRequest, v1.GetContactMessagesResponse]
	sendContactMessage        *connect.Client[v1.SendContactMessageRequest, v1.SendContactMessageResponse]
}

// GetAbout calls headless.v1.HeadlessControlService.GetAbout.
func (c *headlessControlServiceClient) GetAbout(ctx context.Context, req *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error) {
	return c.getAbout.CallUnary(ctx, req)
}

// GetStatus calls headless.v1.HeadlessControlService.GetStatus.
func (c *headlessControlServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// Shutdown calls headless.v1.HeadlessControlService.Shutdown.
func (c *headlessControlServiceClient) Shutdown(ctx context.Context, req *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error) {
	return c.shutdown.CallUnary(ctx, req)
}

// ListSessions calls headless.v1.HeadlessControlService.ListSessions.
func (c *headlessControlServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// GetSession calls headless.v1.HeadlessControlService.GetSession.
func (c *headlessControlServiceClient) GetSession(ctx context.Context, req *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// StartWorld calls headless.v1.HeadlessControlService.StartWorld.
func (c *headlessControlServiceClient) StartWorld(ctx context.Context, req *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return c.startWorld.CallUnary(ctx, req)
}

// StopSession calls headless.v1.HeadlessControlService.StopSession.
func (c *headlessControlServiceClient) StopSession(ctx context.Context, req *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return c.stopSession.CallUnary(ctx, req)
}

// SaveSessionWorld calls headless.v1.HeadlessControlService.SaveSessionWorld.
func (c *headlessControlServiceClient) SaveSessionWorld(ctx context.Context, req *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return c.saveSessionWorld.CallUnary(ctx, req)
}

// SaveAsSessionWorld calls headless.v1.HeadlessControlService.SaveAsSessionWorld.
func (c *headlessControlServiceClient) SaveAsSessionWorld(ctx context.Context, req *connect.Request[v1.SaveAsSessionWorldRequest]) (*connect.Response[v1.SaveAsSessionWorldResponse], error) {
	return c.saveAsSessionWorld.CallUnary(ctx, req)
}

// InviteUser calls headless.v1.HeadlessControlService.InviteUser.
func (c *headlessControlServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// AllowUserToJoin calls headless.v1.HeadlessControlService.AllowUserToJoin.
func (c *headlessControlServiceClient) AllowUserToJoin(ctx context.Context, req *connect.Request[v1.AllowUserToJoinRequest]) (*connect.Response[v1.AllowUserToJoinResponse], error) {
	return c.allowUserToJoin.CallUnary(ctx, req)
}

// UpdateUserRole calls headless.v1.HeadlessControlService.UpdateUserRole.
func (c *headlessControlServiceClient) UpdateUserRole(ctx context.Context, req *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return c.updateUserRole.CallUnary(ctx, req)
}

// UpdateSessionParameters calls headless.v1.HeadlessControlService.UpdateSessionParameters.
func (c *headlessControlServiceClient) UpdateSessionParameters(ctx context.Context, req *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return c.updateSessionParameters.CallUnary(ctx, req)
}

// ListUsersInSession calls headless.v1.HeadlessControlService.ListUsersInSession.
func (c *headlessControlServiceClient) ListUsersInSession(ctx context.Context, req *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return c.listUsersInSession.CallUnary(ctx, req)
}

// KickUser calls headless.v1.HeadlessControlService.KickUser.
func (c *headlessControlServiceClient) KickUser(ctx context.Context, req *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error) {
	return c.kickUser.CallUnary(ctx, req)
}

// BanUser calls headless.v1.HeadlessControlService.BanUser.
func (c *headlessControlServiceClient) BanUser(ctx context.Context, req *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error) {
	return c.banUser.CallUnary(ctx, req)
}

// GetHostSettings calls headless.v1.HeadlessControlService.GetHostSettings.
func (c *headlessControlServiceClient) GetHostSettings(ctx context.Context, req *connect.Request[v1.GetHostSettingsRequest]) (*connect.Response[v1.GetHostSettingsResponse], error) {
	return c.getHostSettings.CallUnary(ctx, req)
}

// UpdateHostSettings calls headless.v1.HeadlessControlService.UpdateHostSettings.
func (c *headlessControlServiceClient) UpdateHostSettings(ctx context.Context, req *connect.Request[v1.UpdateHostSettingsRequest]) (*connect.Response[v1.UpdateHostSettingsResponse], error) {
	return c.updateHostSettings.CallUnary(ctx, req)
}

// AllowHostAccess calls headless.v1.HeadlessControlService.AllowHostAccess.
func (c *headlessControlServiceClient) AllowHostAccess(ctx context.Context, req *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error) {
	return c.allowHostAccess.CallUnary(ctx, req)
}

// DenyHostAccess calls headless.v1.HeadlessControlService.DenyHostAccess.
func (c *headlessControlServiceClient) DenyHostAccess(ctx context.Context, req *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error) {
	return c.denyHostAccess.CallUnary(ctx, req)
}

// GetStartupConfigToRestore calls headless.v1.HeadlessControlService.GetStartupConfigToRestore.
func (c *headlessControlServiceClient) GetStartupConfigToRestore(ctx context.Context, req *connect.Request[v1.GetStartupConfigToRestoreRequest]) (*connect.Response[v1.GetStartupConfigToRestoreResponse], error) {
	return c.getStartupConfigToRestore.CallUnary(ctx, req)
}

// GetAccountInfo calls headless.v1.HeadlessControlService.GetAccountInfo.
func (c *headlessControlServiceClient) GetAccountInfo(ctx context.Context, req *connect.Request[v1.GetAccountInfoRequest]) (*connect.Response[v1.GetAccountInfoResponse], error) {
	return c.getAccountInfo.CallUnary(ctx, req)
}

// FetchWorldInfo calls headless.v1.HeadlessControlService.FetchWorldInfo.
func (c *headlessControlServiceClient) FetchWorldInfo(ctx context.Context, req *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v1.FetchWorldInfoResponse], error) {
	return c.fetchWorldInfo.CallUnary(ctx, req)
}

// SearchUserInfo calls headless.v1.HeadlessControlService.SearchUserInfo.
func (c *headlessControlServiceClient) SearchUserInfo(ctx context.Context, req *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v1.SearchUserInfoResponse], error) {
	return c.searchUserInfo.CallUnary(ctx, req)
}

// GetFriendRequests calls headless.v1.HeadlessControlService.GetFriendRequests.
func (c *headlessControlServiceClient) GetFriendRequests(ctx context.Context, req *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error) {
	return c.getFriendRequests.CallUnary(ctx, req)
}

// AcceptFriendRequests calls headless.v1.HeadlessControlService.AcceptFriendRequests.
func (c *headlessControlServiceClient) AcceptFriendRequests(ctx context.Context, req *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error) {
	return c.acceptFriendRequests.CallUnary(ctx, req)
}

// ListContacts calls headless.v1.HeadlessControlService.ListContacts.
func (c *headlessControlServiceClient) ListContacts(ctx context.Context, req *connect.Request[v1.ListContactsRequest]) (*connect.Response[v1.ListContactsResponse], error) {
	return c.listContacts.CallUnary(ctx, req)
}

// GetContactMessages calls headless.v1.HeadlessControlService.GetContactMessages.
func (c *headlessControlServiceClient) GetContactMessages(ctx context.Context, req *connect.Request[v1.GetContactMessagesRequest]) (*connect.Response[v1.GetContactMessagesResponse], error) {
	return c.getContactMessages.CallUnary(ctx, req)
}

// SendContactMessage calls headless.v1.HeadlessControlService.SendContactMessage.
func (c *headlessControlServiceClient) SendContactMessage(ctx context.Context, req *connect.Request[v1.SendContactMessageRequest]) (*connect.Response[v1.SendContactMessageResponse], error) {
	return c.sendContactMessage.CallUnary(ctx, req)
}

// HeadlessControlServiceHandler is an implementation of the headless.v1.HeadlessControlService
// service.
type HeadlessControlServiceHandler interface {
	GetAbout(context.Context, *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error)
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error)
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error)
	StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error)
	SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error)
	SaveAsSessionWorld(context.Context, *connect.Request[v1.SaveAsSessionWorldRequest]) (*connect.Response[v1.SaveAsSessionWorldResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	AllowUserToJoin(context.Context, *connect.Request[v1.AllowUserToJoinRequest]) (*connect.Response[v1.AllowUserToJoinResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error)
	ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error)
	KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error)
	BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error)
	GetHostSettings(context.Context, *connect.Request[v1.GetHostSettingsRequest]) (*connect.Response[v1.GetHostSettingsResponse], error)
	UpdateHostSettings(context.Context, *connect.Request[v1.UpdateHostSettingsRequest]) (*connect.Response[v1.UpdateHostSettingsResponse], error)
	AllowHostAccess(context.Context, *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error)
	DenyHostAccess(context.Context, *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error)
	GetStartupConfigToRestore(context.Context, *connect.Request[v1.GetStartupConfigToRestoreRequest]) (*connect.Response[v1.GetStartupConfigToRestoreResponse], error)
	// Cloud系
	GetAccountInfo(context.Context, *connect.Request[v1.GetAccountInfoRequest]) (*connect.Response[v1.GetAccountInfoResponse], error)
	FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v1.FetchWorldInfoResponse], error)
	SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v1.SearchUserInfoResponse], error)
	GetFriendRequests(context.Context, *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error)
	AcceptFriendRequests(context.Context, *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error)
	ListContacts(context.Context, *connect.Request[v1.ListContactsRequest]) (*connect.Response[v1.ListContactsResponse], error)
	GetContactMessages(context.Context, *connect.Request[v1.GetContactMessagesRequest]) (*connect.Response[v1.GetContactMessagesResponse], error)
	SendContactMessage(context.Context, *connect.Request[v1.SendContactMessageRequest]) (*connect.Response[v1.SendContactMessageResponse], error)
}

// NewHeadlessControlServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHeadlessControlServiceHandler(svc HeadlessControlServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	headlessControlServiceMethods := v1.File_headless_v1_headless_proto.Services().ByName("HeadlessControlService").Methods()
	headlessControlServiceGetAboutHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetAboutProcedure,
		svc.GetAbout,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetAbout")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetStatusHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceShutdownHandler := connect.NewUnaryHandler(
		HeadlessControlServiceShutdownProcedure,
		svc.Shutdown,
		connect.WithSchema(headlessControlServiceMethods.ByName("Shutdown")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceListSessionsHandler := connect.NewUnaryHandler(
		HeadlessControlServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(headlessControlServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetSessionHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetSession")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceStartWorldHandler := connect.NewUnaryHandler(
		HeadlessControlServiceStartWorldProcedure,
		svc.StartWorld,
		connect.WithSchema(headlessControlServiceMethods.ByName("StartWorld")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceStopSessionHandler := connect.NewUnaryHandler(
		HeadlessControlServiceStopSessionProcedure,
		svc.StopSession,
		connect.WithSchema(headlessControlServiceMethods.ByName("StopSession")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceSaveSessionWorldHandler := connect.NewUnaryHandler(
		HeadlessControlServiceSaveSessionWorldProcedure,
		svc.SaveSessionWorld,
		connect.WithSchema(headlessControlServiceMethods.ByName("SaveSessionWorld")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceSaveAsSessionWorldHandler := connect.NewUnaryHandler(
		HeadlessControlServiceSaveAsSessionWorldProcedure,
		svc.SaveAsSessionWorld,
		connect.WithSchema(headlessControlServiceMethods.ByName("SaveAsSessionWorld")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceInviteUserHandler := connect.NewUnaryHandler(
		HeadlessControlServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(headlessControlServiceMethods.ByName("InviteUser")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceAllowUserToJoinHandler := connect.NewUnaryHandler(
		HeadlessControlServiceAllowUserToJoinProcedure,
		svc.AllowUserToJoin,
		connect.WithSchema(headlessControlServiceMethods.ByName("AllowUserToJoin")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceUpdateUserRoleHandler := connect.NewUnaryHandler(
		HeadlessControlServiceUpdateUserRoleProcedure,
		svc.UpdateUserRole,
		connect.WithSchema(headlessControlServiceMethods.ByName("UpdateUserRole")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceUpdateSessionParametersHandler := connect.NewUnaryHandler(
		HeadlessControlServiceUpdateSessionParametersProcedure,
		svc.UpdateSessionParameters,
		connect.WithSchema(headlessControlServiceMethods.ByName("UpdateSessionParameters")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceListUsersInSessionHandler := connect.NewUnaryHandler(
		HeadlessControlServiceListUsersInSessionProcedure,
		svc.ListUsersInSession,
		connect.WithSchema(headlessControlServiceMethods.ByName("ListUsersInSession")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceKickUserHandler := connect.NewUnaryHandler(
		HeadlessControlServiceKickUserProcedure,
		svc.KickUser,
		connect.WithSchema(headlessControlServiceMethods.ByName("KickUser")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceBanUserHandler := connect.NewUnaryHandler(
		HeadlessControlServiceBanUserProcedure,
		svc.BanUser,
		connect.WithSchema(headlessControlServiceMethods.ByName("BanUser")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetHostSettingsHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetHostSettingsProcedure,
		svc.GetHostSettings,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetHostSettings")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceUpdateHostSettingsHandler := connect.NewUnaryHandler(
		HeadlessControlServiceUpdateHostSettingsProcedure,
		svc.UpdateHostSettings,
		connect.WithSchema(headlessControlServiceMethods.ByName("UpdateHostSettings")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceAllowHostAccessHandler := connect.NewUnaryHandler(
		HeadlessControlServiceAllowHostAccessProcedure,
		svc.AllowHostAccess,
		connect.WithSchema(headlessControlServiceMethods.ByName("AllowHostAccess")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceDenyHostAccessHandler := connect.NewUnaryHandler(
		HeadlessControlServiceDenyHostAccessProcedure,
		svc.DenyHostAccess,
		connect.WithSchema(headlessControlServiceMethods.ByName("DenyHostAccess")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetStartupConfigToRestoreHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetStartupConfigToRestoreProcedure,
		svc.GetStartupConfigToRestore,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetStartupConfigToRestore")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetAccountInfoHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetAccountInfoProcedure,
		svc.GetAccountInfo,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetAccountInfo")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceFetchWorldInfoHandler := connect.NewUnaryHandler(
		HeadlessControlServiceFetchWorldInfoProcedure,
		svc.FetchWorldInfo,
		connect.WithSchema(headlessControlServiceMethods.ByName("FetchWorldInfo")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceSearchUserInfoHandler := connect.NewUnaryHandler(
		HeadlessControlServiceSearchUserInfoProcedure,
		svc.SearchUserInfo,
		connect.WithSchema(headlessControlServiceMethods.ByName("SearchUserInfo")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetFriendRequestsHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetFriendRequestsProcedure,
		svc.GetFriendRequests,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetFriendRequests")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceAcceptFriendRequestsHandler := connect.NewUnaryHandler(
		HeadlessControlServiceAcceptFriendRequestsProcedure,
		svc.AcceptFriendRequests,
		connect.WithSchema(headlessControlServiceMethods.ByName("AcceptFriendRequests")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceListContactsHandler := connect.NewUnaryHandler(
		HeadlessControlServiceListContactsProcedure,
		svc.ListContacts,
		connect.WithSchema(headlessControlServiceMethods.ByName("ListContacts")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceGetContactMessagesHandler := connect.NewUnaryHandler(
		HeadlessControlServiceGetContactMessagesProcedure,
		svc.GetContactMessages,
		connect.WithSchema(headlessControlServiceMethods.ByName("GetContactMessages")),
		connect.WithHandlerOptions(opts...),
	)
	headlessControlServiceSendContactMessageHandler := connect.NewUnaryHandler(
		HeadlessControlServiceSendContactMessageProcedure,
		svc.SendContactMessage,
		connect.WithSchema(headlessControlServiceMethods.ByName("SendContactMessage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/headless.v1.HeadlessControlService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HeadlessControlServiceGetAboutProcedure:
			headlessControlServiceGetAboutHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetStatusProcedure:
			headlessControlServiceGetStatusHandler.ServeHTTP(w, r)
		case HeadlessControlServiceShutdownProcedure:
			headlessControlServiceShutdownHandler.ServeHTTP(w, r)
		case HeadlessControlServiceListSessionsProcedure:
			headlessControlServiceListSessionsHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetSessionProcedure:
			headlessControlServiceGetSessionHandler.ServeHTTP(w, r)
		case HeadlessControlServiceStartWorldProcedure:
			headlessControlServiceStartWorldHandler.ServeHTTP(w, r)
		case HeadlessControlServiceStopSessionProcedure:
			headlessControlServiceStopSessionHandler.ServeHTTP(w, r)
		case HeadlessControlServiceSaveSessionWorldProcedure:
			headlessControlServiceSaveSessionWorldHandler.ServeHTTP(w, r)
		case HeadlessControlServiceSaveAsSessionWorldProcedure:
			headlessControlServiceSaveAsSessionWorldHandler.ServeHTTP(w, r)
		case HeadlessControlServiceInviteUserProcedure:
			headlessControlServiceInviteUserHandler.ServeHTTP(w, r)
		case HeadlessControlServiceAllowUserToJoinProcedure:
			headlessControlServiceAllowUserToJoinHandler.ServeHTTP(w, r)
		case HeadlessControlServiceUpdateUserRoleProcedure:
			headlessControlServiceUpdateUserRoleHandler.ServeHTTP(w, r)
		case HeadlessControlServiceUpdateSessionParametersProcedure:
			headlessControlServiceUpdateSessionParametersHandler.ServeHTTP(w, r)
		case HeadlessControlServiceListUsersInSessionProcedure:
			headlessControlServiceListUsersInSessionHandler.ServeHTTP(w, r)
		case HeadlessControlServiceKickUserProcedure:
			headlessControlServiceKickUserHandler.ServeHTTP(w, r)
		case HeadlessControlServiceBanUserProcedure:
			headlessControlServiceBanUserHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetHostSettingsProcedure:
			headlessControlServiceGetHostSettingsHandler.ServeHTTP(w, r)
		case HeadlessControlServiceUpdateHostSettingsProcedure:
			headlessControlServiceUpdateHostSettingsHandler.ServeHTTP(w, r)
		case HeadlessControlServiceAllowHostAccessProcedure:
			headlessControlServiceAllowHostAccessHandler.ServeHTTP(w, r)
		case HeadlessControlServiceDenyHostAccessProcedure:
			headlessControlServiceDenyHostAccessHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetStartupConfigToRestoreProcedure:
			headlessControlServiceGetStartupConfigToRestoreHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetAccountInfoProcedure:
			headlessControlServiceGetAccountInfoHandler.ServeHTTP(w, r)
		case HeadlessControlServiceFetchWorldInfoProcedure:
			headlessControlServiceFetchWorldInfoHandler.ServeHTTP(w, r)
		case HeadlessControlServiceSearchUserInfoProcedure:
			headlessControlServiceSearchUserInfoHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetFriendRequestsProcedure:
			headlessControlServiceGetFriendRequestsHandler.ServeHTTP(w, r)
		case HeadlessControlServiceAcceptFriendRequestsProcedure:
			headlessControlServiceAcceptFriendRequestsHandler.ServeHTTP(w, r)
		case HeadlessControlServiceListContactsProcedure:
			headlessControlServiceListContactsHandler.ServeHTTP(w, r)
		case HeadlessControlServiceGetContactMessagesProcedure:
			headlessControlServiceGetContactMessagesHandler.ServeHTTP(w, r)
		case HeadlessControlServiceSendContactMessageProcedure:
			headlessControlServiceSendContactMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHeadlessControlServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHeadlessControlServiceHandler struct{}

func (UnimplementedHeadlessControlServiceHandler) GetAbout(context.Context, *connect.Request[v1.GetAboutRequest]) (*connect.Response[v1.GetAboutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetAbout is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetStatus is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.ShutdownResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.Shutdown is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.ListSessions is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetSession is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) StartWorld(context.Context, *connect.Request[v1.StartWorldRequest]) (*connect.Response[v1.StartWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.StartWorld is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) StopSession(context.Context, *connect.Request[v1.StopSessionRequest]) (*connect.Response[v1.StopSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.StopSession is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) SaveSessionWorld(context.Context, *connect.Request[v1.SaveSessionWorldRequest]) (*connect.Response[v1.SaveSessionWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.SaveSessionWorld is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) SaveAsSessionWorld(context.Context, *connect.Request[v1.SaveAsSessionWorldRequest]) (*connect.Response[v1.SaveAsSessionWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.SaveAsSessionWorld is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.InviteUser is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) AllowUserToJoin(context.Context, *connect.Request[v1.AllowUserToJoinRequest]) (*connect.Response[v1.AllowUserToJoinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.AllowUserToJoin is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.UpdateUserRole is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) UpdateSessionParameters(context.Context, *connect.Request[v1.UpdateSessionParametersRequest]) (*connect.Response[v1.UpdateSessionParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.UpdateSessionParameters is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) ListUsersInSession(context.Context, *connect.Request[v1.ListUsersInSessionRequest]) (*connect.Response[v1.ListUsersInSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.ListUsersInSession is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) KickUser(context.Context, *connect.Request[v1.KickUserRequest]) (*connect.Response[v1.KickUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.KickUser is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) BanUser(context.Context, *connect.Request[v1.BanUserRequest]) (*connect.Response[v1.BanUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.BanUser is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetHostSettings(context.Context, *connect.Request[v1.GetHostSettingsRequest]) (*connect.Response[v1.GetHostSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetHostSettings is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) UpdateHostSettings(context.Context, *connect.Request[v1.UpdateHostSettingsRequest]) (*connect.Response[v1.UpdateHostSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.UpdateHostSettings is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) AllowHostAccess(context.Context, *connect.Request[v1.AllowHostAccessRequest]) (*connect.Response[v1.AllowHostAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.AllowHostAccess is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) DenyHostAccess(context.Context, *connect.Request[v1.DenyHostAccessRequest]) (*connect.Response[v1.DenyHostAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.DenyHostAccess is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetStartupConfigToRestore(context.Context, *connect.Request[v1.GetStartupConfigToRestoreRequest]) (*connect.Response[v1.GetStartupConfigToRestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetStartupConfigToRestore is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetAccountInfo(context.Context, *connect.Request[v1.GetAccountInfoRequest]) (*connect.Response[v1.GetAccountInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetAccountInfo is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) FetchWorldInfo(context.Context, *connect.Request[v1.FetchWorldInfoRequest]) (*connect.Response[v1.FetchWorldInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.FetchWorldInfo is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) SearchUserInfo(context.Context, *connect.Request[v1.SearchUserInfoRequest]) (*connect.Response[v1.SearchUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.SearchUserInfo is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetFriendRequests(context.Context, *connect.Request[v1.GetFriendRequestsRequest]) (*connect.Response[v1.GetFriendRequestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetFriendRequests is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) AcceptFriendRequests(context.Context, *connect.Request[v1.AcceptFriendRequestsRequest]) (*connect.Response[v1.AcceptFriendRequestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.AcceptFriendRequests is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) ListContacts(context.Context, *connect.Request[v1.ListContactsRequest]) (*connect.Response[v1.ListContactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.ListContacts is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) GetContactMessages(context.Context, *connect.Request[v1.GetContactMessagesRequest]) (*connect.Response[v1.GetContactMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.GetContactMessages is not implemented"))
}

func (UnimplementedHeadlessControlServiceHandler) SendContactMessage(context.Context, *connect.Request[v1.SendContactMessageRequest]) (*connect.Response[v1.SendContactMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("headless.v1.HeadlessControlService.SendContactMessage is not implemented"))
}
