// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: headless/v1/headless.proto

package headlessv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HeadlessControlService_GetAbout_FullMethodName                = "/headless.v1.HeadlessControlService/GetAbout"
	HeadlessControlService_GetStatus_FullMethodName               = "/headless.v1.HeadlessControlService/GetStatus"
	HeadlessControlService_Shutdown_FullMethodName                = "/headless.v1.HeadlessControlService/Shutdown"
	HeadlessControlService_ListSessions_FullMethodName            = "/headless.v1.HeadlessControlService/ListSessions"
	HeadlessControlService_GetSession_FullMethodName              = "/headless.v1.HeadlessControlService/GetSession"
	HeadlessControlService_StartWorld_FullMethodName              = "/headless.v1.HeadlessControlService/StartWorld"
	HeadlessControlService_StopSession_FullMethodName             = "/headless.v1.HeadlessControlService/StopSession"
	HeadlessControlService_SaveSessionWorld_FullMethodName        = "/headless.v1.HeadlessControlService/SaveSessionWorld"
	HeadlessControlService_InviteUser_FullMethodName              = "/headless.v1.HeadlessControlService/InviteUser"
	HeadlessControlService_UpdateUserRole_FullMethodName          = "/headless.v1.HeadlessControlService/UpdateUserRole"
	HeadlessControlService_UpdateSessionParameters_FullMethodName = "/headless.v1.HeadlessControlService/UpdateSessionParameters"
	HeadlessControlService_ListUsersInSession_FullMethodName      = "/headless.v1.HeadlessControlService/ListUsersInSession"
	HeadlessControlService_KickUser_FullMethodName                = "/headless.v1.HeadlessControlService/KickUser"
	HeadlessControlService_BanUser_FullMethodName                 = "/headless.v1.HeadlessControlService/BanUser"
	HeadlessControlService_GetAccountInfo_FullMethodName          = "/headless.v1.HeadlessControlService/GetAccountInfo"
	HeadlessControlService_FetchWorldInfo_FullMethodName          = "/headless.v1.HeadlessControlService/FetchWorldInfo"
	HeadlessControlService_SearchUserInfo_FullMethodName          = "/headless.v1.HeadlessControlService/SearchUserInfo"
)

// HeadlessControlServiceClient is the client API for HeadlessControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeadlessControlServiceClient interface {
	GetAbout(ctx context.Context, in *GetAboutRequest, opts ...grpc.CallOption) (*GetAboutResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	StartWorld(ctx context.Context, in *StartWorldRequest, opts ...grpc.CallOption) (*StartWorldResponse, error)
	StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*StopSessionResponse, error)
	SaveSessionWorld(ctx context.Context, in *SaveSessionWorldRequest, opts ...grpc.CallOption) (*SaveSessionWorldResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error)
	UpdateSessionParameters(ctx context.Context, in *UpdateSessionParametersRequest, opts ...grpc.CallOption) (*UpdateSessionParametersResponse, error)
	ListUsersInSession(ctx context.Context, in *ListUsersInSessionRequest, opts ...grpc.CallOption) (*ListUsersInSessionResponse, error)
	KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*KickUserResponse, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error)
	// Cloudç³»
	GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error)
	FetchWorldInfo(ctx context.Context, in *FetchWorldInfoRequest, opts ...grpc.CallOption) (*FetchWorldInfoResponse, error)
	SearchUserInfo(ctx context.Context, in *SearchUserInfoRequest, opts ...grpc.CallOption) (*SearchUserInfoResponse, error)
}

type headlessControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeadlessControlServiceClient(cc grpc.ClientConnInterface) HeadlessControlServiceClient {
	return &headlessControlServiceClient{cc}
}

func (c *headlessControlServiceClient) GetAbout(ctx context.Context, in *GetAboutRequest, opts ...grpc.CallOption) (*GetAboutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAboutResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_GetAbout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) StartWorld(ctx context.Context, in *StartWorldRequest, opts ...grpc.CallOption) (*StartWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartWorldResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_StartWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*StopSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSessionResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_StopSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) SaveSessionWorld(ctx context.Context, in *SaveSessionWorldRequest, opts ...grpc.CallOption) (*SaveSessionWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveSessionWorldResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_SaveSessionWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_InviteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRoleResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_UpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) UpdateSessionParameters(ctx context.Context, in *UpdateSessionParametersRequest, opts ...grpc.CallOption) (*UpdateSessionParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSessionParametersResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_UpdateSessionParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) ListUsersInSession(ctx context.Context, in *ListUsersInSessionRequest, opts ...grpc.CallOption) (*ListUsersInSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersInSessionResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_ListUsersInSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*KickUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickUserResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_KickUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanUserResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_BanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountInfoResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_GetAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) FetchWorldInfo(ctx context.Context, in *FetchWorldInfoRequest, opts ...grpc.CallOption) (*FetchWorldInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchWorldInfoResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_FetchWorldInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlServiceClient) SearchUserInfo(ctx context.Context, in *SearchUserInfoRequest, opts ...grpc.CallOption) (*SearchUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserInfoResponse)
	err := c.cc.Invoke(ctx, HeadlessControlService_SearchUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeadlessControlServiceServer is the server API for HeadlessControlService service.
// All implementations must embed UnimplementedHeadlessControlServiceServer
// for forward compatibility.
type HeadlessControlServiceServer interface {
	GetAbout(context.Context, *GetAboutRequest) (*GetAboutResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	StartWorld(context.Context, *StartWorldRequest) (*StartWorldResponse, error)
	StopSession(context.Context, *StopSessionRequest) (*StopSessionResponse, error)
	SaveSessionWorld(context.Context, *SaveSessionWorldRequest) (*SaveSessionWorldResponse, error)
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error)
	UpdateSessionParameters(context.Context, *UpdateSessionParametersRequest) (*UpdateSessionParametersResponse, error)
	ListUsersInSession(context.Context, *ListUsersInSessionRequest) (*ListUsersInSessionResponse, error)
	KickUser(context.Context, *KickUserRequest) (*KickUserResponse, error)
	BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error)
	// Cloudç³»
	GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error)
	FetchWorldInfo(context.Context, *FetchWorldInfoRequest) (*FetchWorldInfoResponse, error)
	SearchUserInfo(context.Context, *SearchUserInfoRequest) (*SearchUserInfoResponse, error)
	mustEmbedUnimplementedHeadlessControlServiceServer()
}

// UnimplementedHeadlessControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHeadlessControlServiceServer struct{}

func (UnimplementedHeadlessControlServiceServer) GetAbout(context.Context, *GetAboutRequest) (*GetAboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbout not implemented")
}
func (UnimplementedHeadlessControlServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedHeadlessControlServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedHeadlessControlServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedHeadlessControlServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedHeadlessControlServiceServer) StartWorld(context.Context, *StartWorldRequest) (*StartWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorld not implemented")
}
func (UnimplementedHeadlessControlServiceServer) StopSession(context.Context, *StopSessionRequest) (*StopSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSession not implemented")
}
func (UnimplementedHeadlessControlServiceServer) SaveSessionWorld(context.Context, *SaveSessionWorldRequest) (*SaveSessionWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSessionWorld not implemented")
}
func (UnimplementedHeadlessControlServiceServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedHeadlessControlServiceServer) UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedHeadlessControlServiceServer) UpdateSessionParameters(context.Context, *UpdateSessionParametersRequest) (*UpdateSessionParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionParameters not implemented")
}
func (UnimplementedHeadlessControlServiceServer) ListUsersInSession(context.Context, *ListUsersInSessionRequest) (*ListUsersInSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersInSession not implemented")
}
func (UnimplementedHeadlessControlServiceServer) KickUser(context.Context, *KickUserRequest) (*KickUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (UnimplementedHeadlessControlServiceServer) BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedHeadlessControlServiceServer) GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedHeadlessControlServiceServer) FetchWorldInfo(context.Context, *FetchWorldInfoRequest) (*FetchWorldInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchWorldInfo not implemented")
}
func (UnimplementedHeadlessControlServiceServer) SearchUserInfo(context.Context, *SearchUserInfoRequest) (*SearchUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserInfo not implemented")
}
func (UnimplementedHeadlessControlServiceServer) mustEmbedUnimplementedHeadlessControlServiceServer() {
}
func (UnimplementedHeadlessControlServiceServer) testEmbeddedByValue() {}

// UnsafeHeadlessControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeadlessControlServiceServer will
// result in compilation errors.
type UnsafeHeadlessControlServiceServer interface {
	mustEmbedUnimplementedHeadlessControlServiceServer()
}

func RegisterHeadlessControlServiceServer(s grpc.ServiceRegistrar, srv HeadlessControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedHeadlessControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HeadlessControlService_ServiceDesc, srv)
}

func _HeadlessControlService_GetAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).GetAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_GetAbout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).GetAbout(ctx, req.(*GetAboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_StartWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).StartWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_StartWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).StartWorld(ctx, req.(*StartWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_StopSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).StopSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_StopSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).StopSession(ctx, req.(*StopSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_SaveSessionWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSessionWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).SaveSessionWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_SaveSessionWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).SaveSessionWorld(ctx, req.(*SaveSessionWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).UpdateUserRole(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_UpdateSessionParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).UpdateSessionParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_UpdateSessionParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).UpdateSessionParameters(ctx, req.(*UpdateSessionParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_ListUsersInSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersInSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).ListUsersInSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_ListUsersInSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).ListUsersInSession(ctx, req.(*ListUsersInSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_KickUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).KickUser(ctx, req.(*KickUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_FetchWorldInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWorldInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).FetchWorldInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_FetchWorldInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).FetchWorldInfo(ctx, req.(*FetchWorldInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControlService_SearchUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServiceServer).SearchUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeadlessControlService_SearchUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServiceServer).SearchUserInfo(ctx, req.(*SearchUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeadlessControlService_ServiceDesc is the grpc.ServiceDesc for HeadlessControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeadlessControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "headless.v1.HeadlessControlService",
	HandlerType: (*HeadlessControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAbout",
			Handler:    _HeadlessControlService_GetAbout_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _HeadlessControlService_GetStatus_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _HeadlessControlService_Shutdown_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _HeadlessControlService_ListSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _HeadlessControlService_GetSession_Handler,
		},
		{
			MethodName: "StartWorld",
			Handler:    _HeadlessControlService_StartWorld_Handler,
		},
		{
			MethodName: "StopSession",
			Handler:    _HeadlessControlService_StopSession_Handler,
		},
		{
			MethodName: "SaveSessionWorld",
			Handler:    _HeadlessControlService_SaveSessionWorld_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _HeadlessControlService_InviteUser_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _HeadlessControlService_UpdateUserRole_Handler,
		},
		{
			MethodName: "UpdateSessionParameters",
			Handler:    _HeadlessControlService_UpdateSessionParameters_Handler,
		},
		{
			MethodName: "ListUsersInSession",
			Handler:    _HeadlessControlService_ListUsersInSession_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _HeadlessControlService_KickUser_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _HeadlessControlService_BanUser_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _HeadlessControlService_GetAccountInfo_Handler,
		},
		{
			MethodName: "FetchWorldInfo",
			Handler:    _HeadlessControlService_FetchWorldInfo_Handler,
		},
		{
			MethodName: "SearchUserInfo",
			Handler:    _HeadlessControlService_SearchUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "headless/v1/headless.proto",
}
