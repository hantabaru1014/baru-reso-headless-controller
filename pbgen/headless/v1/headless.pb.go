// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: headless/v1/headless.proto

package headlessv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessLevel int32

const (
	AccessLevel_ACCESS_LEVEL_UNSPECIFIED      AccessLevel = 0
	AccessLevel_ACCESS_LEVEL_PRIVATE          AccessLevel = 1
	AccessLevel_ACCESS_LEVEL_LAN              AccessLevel = 2
	AccessLevel_ACCESS_LEVEL_CONTACTS         AccessLevel = 3
	AccessLevel_ACCESS_LEVEL_CONTACTS_PLUS    AccessLevel = 4
	AccessLevel_ACCESS_LEVEL_REGISTERED_USERS AccessLevel = 5
	AccessLevel_ACCESS_LEVEL_ANYONE           AccessLevel = 6
)

// Enum value maps for AccessLevel.
var (
	AccessLevel_name = map[int32]string{
		0: "ACCESS_LEVEL_UNSPECIFIED",
		1: "ACCESS_LEVEL_PRIVATE",
		2: "ACCESS_LEVEL_LAN",
		3: "ACCESS_LEVEL_CONTACTS",
		4: "ACCESS_LEVEL_CONTACTS_PLUS",
		5: "ACCESS_LEVEL_REGISTERED_USERS",
		6: "ACCESS_LEVEL_ANYONE",
	}
	AccessLevel_value = map[string]int32{
		"ACCESS_LEVEL_UNSPECIFIED":      0,
		"ACCESS_LEVEL_PRIVATE":          1,
		"ACCESS_LEVEL_LAN":              2,
		"ACCESS_LEVEL_CONTACTS":         3,
		"ACCESS_LEVEL_CONTACTS_PLUS":    4,
		"ACCESS_LEVEL_REGISTERED_USERS": 5,
		"ACCESS_LEVEL_ANYONE":           6,
	}
)

func (x AccessLevel) Enum() *AccessLevel {
	p := new(AccessLevel)
	*p = x
	return p
}

func (x AccessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_headless_v1_headless_proto_enumTypes[0].Descriptor()
}

func (AccessLevel) Type() protoreflect.EnumType {
	return &file_headless_v1_headless_proto_enumTypes[0]
}

func (x AccessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLevel.Descriptor instead.
func (AccessLevel) EnumDescriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{0}
}

type KickUserRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to User:
	//
	//	*KickUserRequest_UserId
	//	*KickUserRequest_UserName
	User          isKickUserRequest_User `protobuf_oneof:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickUserRequest) Reset() {
	*x = KickUserRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserRequest) ProtoMessage() {}

func (x *KickUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserRequest.ProtoReflect.Descriptor instead.
func (*KickUserRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{0}
}

func (x *KickUserRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KickUserRequest) GetUser() isKickUserRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *KickUserRequest) GetUserId() string {
	if x != nil {
		if x, ok := x.User.(*KickUserRequest_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *KickUserRequest) GetUserName() string {
	if x != nil {
		if x, ok := x.User.(*KickUserRequest_UserName); ok {
			return x.UserName
		}
	}
	return ""
}

type isKickUserRequest_User interface {
	isKickUserRequest_User()
}

type KickUserRequest_UserId struct {
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof"`
}

type KickUserRequest_UserName struct {
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3,oneof"`
}

func (*KickUserRequest_UserId) isKickUserRequest_User() {}

func (*KickUserRequest_UserName) isKickUserRequest_User() {}

type KickUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickUserResponse) Reset() {
	*x = KickUserResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserResponse) ProtoMessage() {}

func (x *KickUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserResponse.ProtoReflect.Descriptor instead.
func (*KickUserResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{1}
}

type BanUserRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to User:
	//
	//	*BanUserRequest_UserId
	//	*BanUserRequest_UserName
	User          isBanUserRequest_User `protobuf_oneof:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BanUserRequest) Reset() {
	*x = BanUserRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserRequest) ProtoMessage() {}

func (x *BanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserRequest.ProtoReflect.Descriptor instead.
func (*BanUserRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{2}
}

func (x *BanUserRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BanUserRequest) GetUser() isBanUserRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *BanUserRequest) GetUserId() string {
	if x != nil {
		if x, ok := x.User.(*BanUserRequest_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *BanUserRequest) GetUserName() string {
	if x != nil {
		if x, ok := x.User.(*BanUserRequest_UserName); ok {
			return x.UserName
		}
	}
	return ""
}

type isBanUserRequest_User interface {
	isBanUserRequest_User()
}

type BanUserRequest_UserId struct {
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof"`
}

type BanUserRequest_UserName struct {
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3,oneof"`
}

func (*BanUserRequest_UserId) isBanUserRequest_User() {}

func (*BanUserRequest_UserName) isBanUserRequest_User() {}

type BanUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BanUserResponse) Reset() {
	*x = BanUserResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserResponse) ProtoMessage() {}

func (x *BanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserResponse.ProtoReflect.Descriptor instead.
func (*BanUserResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{3}
}

type SearchUserInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to User:
	//
	//	*SearchUserInfoRequest_UserId
	//	*SearchUserInfoRequest_UserName
	User           isSearchUserInfoRequest_User `protobuf_oneof:"user"`
	OnlyInContacts bool                         `protobuf:"varint,3,opt,name=only_in_contacts,json=onlyInContacts,proto3" json:"only_in_contacts,omitempty"`
	PartialMatch   bool                         `protobuf:"varint,4,opt,name=partial_match,json=partialMatch,proto3" json:"partial_match,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SearchUserInfoRequest) Reset() {
	*x = SearchUserInfoRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserInfoRequest) ProtoMessage() {}

func (x *SearchUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserInfoRequest.ProtoReflect.Descriptor instead.
func (*SearchUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{4}
}

func (x *SearchUserInfoRequest) GetUser() isSearchUserInfoRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SearchUserInfoRequest) GetUserId() string {
	if x != nil {
		if x, ok := x.User.(*SearchUserInfoRequest_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *SearchUserInfoRequest) GetUserName() string {
	if x != nil {
		if x, ok := x.User.(*SearchUserInfoRequest_UserName); ok {
			return x.UserName
		}
	}
	return ""
}

func (x *SearchUserInfoRequest) GetOnlyInContacts() bool {
	if x != nil {
		return x.OnlyInContacts
	}
	return false
}

func (x *SearchUserInfoRequest) GetPartialMatch() bool {
	if x != nil {
		return x.PartialMatch
	}
	return false
}

type isSearchUserInfoRequest_User interface {
	isSearchUserInfoRequest_User()
}

type SearchUserInfoRequest_UserId struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof"`
}

type SearchUserInfoRequest_UserName struct {
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3,oneof"`
}

func (*SearchUserInfoRequest_UserId) isSearchUserInfoRequest_User() {}

func (*SearchUserInfoRequest_UserName) isSearchUserInfoRequest_User() {}

type SearchUserInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*UserInfo            `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserInfoResponse) Reset() {
	*x = SearchUserInfoResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserInfoResponse) ProtoMessage() {}

func (x *SearchUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserInfoResponse.ProtoReflect.Descriptor instead.
func (*SearchUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{5}
}

func (x *SearchUserInfoResponse) GetUsers() []*UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetAccountInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountInfoRequest) Reset() {
	*x = GetAccountInfoRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountInfoRequest) ProtoMessage() {}

func (x *GetAccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{6}
}

type GetAccountInfoResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserId            string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DisplayName       string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	StorageQuotaBytes int64                  `protobuf:"varint,3,opt,name=storage_quota_bytes,json=storageQuotaBytes,proto3" json:"storage_quota_bytes,omitempty"`
	StorageUsedBytes  int64                  `protobuf:"varint,4,opt,name=storage_used_bytes,json=storageUsedBytes,proto3" json:"storage_used_bytes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetAccountInfoResponse) Reset() {
	*x = GetAccountInfoResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountInfoResponse) ProtoMessage() {}

func (x *GetAccountInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAccountInfoResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{7}
}

func (x *GetAccountInfoResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetAccountInfoResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GetAccountInfoResponse) GetStorageQuotaBytes() int64 {
	if x != nil {
		return x.StorageQuotaBytes
	}
	return 0
}

func (x *GetAccountInfoResponse) GetStorageUsedBytes() int64 {
	if x != nil {
		return x.StorageUsedBytes
	}
	return 0
}

type FetchWorldInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchWorldInfoRequest) Reset() {
	*x = FetchWorldInfoRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchWorldInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchWorldInfoRequest) ProtoMessage() {}

func (x *FetchWorldInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchWorldInfoRequest.ProtoReflect.Descriptor instead.
func (*FetchWorldInfoRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{8}
}

func (x *FetchWorldInfoRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FetchWorldInfoResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ThumbnailUrl    string                 `protobuf:"bytes,3,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	DefaultMaxUsers int32                  `protobuf:"varint,4,opt,name=default_max_users,json=defaultMaxUsers,proto3" json:"default_max_users,omitempty"`
	OwnerId         string                 `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	IsPublic        bool                   `protobuf:"varint,6,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	CanModify       bool                   `protobuf:"varint,7,opt,name=can_modify,json=canModify,proto3" json:"can_modify,omitempty"`
	IsReadonly      bool                   `protobuf:"varint,8,opt,name=is_readonly,json=isReadonly,proto3" json:"is_readonly,omitempty"`
	Tags            []string               `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FetchWorldInfoResponse) Reset() {
	*x = FetchWorldInfoResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchWorldInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchWorldInfoResponse) ProtoMessage() {}

func (x *FetchWorldInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchWorldInfoResponse.ProtoReflect.Descriptor instead.
func (*FetchWorldInfoResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{9}
}

func (x *FetchWorldInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FetchWorldInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FetchWorldInfoResponse) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *FetchWorldInfoResponse) GetDefaultMaxUsers() int32 {
	if x != nil {
		return x.DefaultMaxUsers
	}
	return 0
}

func (x *FetchWorldInfoResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *FetchWorldInfoResponse) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *FetchWorldInfoResponse) GetCanModify() bool {
	if x != nil {
		return x.CanModify
	}
	return false
}

func (x *FetchWorldInfoResponse) GetIsReadonly() bool {
	if x != nil {
		return x.IsReadonly
	}
	return false
}

func (x *FetchWorldInfoResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetAboutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAboutRequest) Reset() {
	*x = GetAboutRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAboutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAboutRequest) ProtoMessage() {}

func (x *GetAboutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAboutRequest.ProtoReflect.Descriptor instead.
func (*GetAboutRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{10}
}

type GetAboutResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AppVersion      string                 `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	ResoniteVersion string                 `protobuf:"bytes,2,opt,name=resonite_version,json=resoniteVersion,proto3" json:"resonite_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetAboutResponse) Reset() {
	*x = GetAboutResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAboutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAboutResponse) ProtoMessage() {}

func (x *GetAboutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAboutResponse.ProtoReflect.Descriptor instead.
func (*GetAboutResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{11}
}

func (x *GetAboutResponse) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *GetAboutResponse) GetResoniteVersion() string {
	if x != nil {
		return x.ResoniteVersion
	}
	return ""
}

type GetStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{12}
}

type GetStatusResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Fps                   float32                `protobuf:"fixed32,1,opt,name=fps,proto3" json:"fps,omitempty"`
	TotalEngineUpdateTime float32                `protobuf:"fixed32,2,opt,name=total_engine_update_time,json=totalEngineUpdateTime,proto3" json:"total_engine_update_time,omitempty"`
	SyncingRecordsCount   int32                  `protobuf:"varint,3,opt,name=syncing_records_count,json=syncingRecordsCount,proto3" json:"syncing_records_count,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{13}
}

func (x *GetStatusResponse) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *GetStatusResponse) GetTotalEngineUpdateTime() float32 {
	if x != nil {
		return x.TotalEngineUpdateTime
	}
	return 0
}

func (x *GetStatusResponse) GetSyncingRecordsCount() int32 {
	if x != nil {
		return x.SyncingRecordsCount
	}
	return 0
}

type ShutdownRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{14}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{15}
}

type ListSessionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{16}
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*Session             `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{17}
}

func (x *ListSessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type GetSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{18}
}

func (x *GetSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{19}
}

func (x *GetSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type StartWorldRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Parameters    *WorldStartupParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartWorldRequest) Reset() {
	*x = StartWorldRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorldRequest) ProtoMessage() {}

func (x *StartWorldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorldRequest.ProtoReflect.Descriptor instead.
func (*StartWorldRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{20}
}

func (x *StartWorldRequest) GetParameters() *WorldStartupParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type StartWorldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenedSession *Session               `protobuf:"bytes,1,opt,name=opened_session,json=openedSession,proto3" json:"opened_session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartWorldResponse) Reset() {
	*x = StartWorldResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorldResponse) ProtoMessage() {}

func (x *StartWorldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorldResponse.ProtoReflect.Descriptor instead.
func (*StartWorldResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{21}
}

func (x *StartWorldResponse) GetOpenedSession() *Session {
	if x != nil {
		return x.OpenedSession
	}
	return nil
}

type StopSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopSessionRequest) Reset() {
	*x = StopSessionRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSessionRequest) ProtoMessage() {}

func (x *StopSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSessionRequest.ProtoReflect.Descriptor instead.
func (*StopSessionRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{22}
}

func (x *StopSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type StopSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopSessionResponse) Reset() {
	*x = StopSessionResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSessionResponse) ProtoMessage() {}

func (x *StopSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSessionResponse.ProtoReflect.Descriptor instead.
func (*StopSessionResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{23}
}

type SaveSessionWorldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveSessionWorldRequest) Reset() {
	*x = SaveSessionWorldRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveSessionWorldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSessionWorldRequest) ProtoMessage() {}

func (x *SaveSessionWorldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSessionWorldRequest.ProtoReflect.Descriptor instead.
func (*SaveSessionWorldRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{24}
}

func (x *SaveSessionWorldRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SaveSessionWorldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveSessionWorldResponse) Reset() {
	*x = SaveSessionWorldResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveSessionWorldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSessionWorldResponse) ProtoMessage() {}

func (x *SaveSessionWorldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSessionWorldResponse.ProtoReflect.Descriptor instead.
func (*SaveSessionWorldResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{25}
}

type InviteUserRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to User:
	//
	//	*InviteUserRequest_UserId
	//	*InviteUserRequest_UserName
	User          isInviteUserRequest_User `protobuf_oneof:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InviteUserRequest) Reset() {
	*x = InviteUserRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InviteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserRequest) ProtoMessage() {}

func (x *InviteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserRequest.ProtoReflect.Descriptor instead.
func (*InviteUserRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{26}
}

func (x *InviteUserRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *InviteUserRequest) GetUser() isInviteUserRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *InviteUserRequest) GetUserId() string {
	if x != nil {
		if x, ok := x.User.(*InviteUserRequest_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *InviteUserRequest) GetUserName() string {
	if x != nil {
		if x, ok := x.User.(*InviteUserRequest_UserName); ok {
			return x.UserName
		}
	}
	return ""
}

type isInviteUserRequest_User interface {
	isInviteUserRequest_User()
}

type InviteUserRequest_UserId struct {
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof"`
}

type InviteUserRequest_UserName struct {
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3,oneof"`
}

func (*InviteUserRequest_UserId) isInviteUserRequest_User() {}

func (*InviteUserRequest_UserName) isInviteUserRequest_User() {}

type InviteUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InviteUserResponse) Reset() {
	*x = InviteUserResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InviteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserResponse) ProtoMessage() {}

func (x *InviteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserResponse.ProtoReflect.Descriptor instead.
func (*InviteUserResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{27}
}

type UpdateUserRoleRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to User:
	//
	//	*UpdateUserRoleRequest_UserId
	//	*UpdateUserRoleRequest_UserName
	User          isUpdateUserRoleRequest_User `protobuf_oneof:"user"`
	Role          string                       `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRoleRequest) Reset() {
	*x = UpdateUserRoleRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleRequest) ProtoMessage() {}

func (x *UpdateUserRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateUserRoleRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateUserRoleRequest) GetUser() isUpdateUserRoleRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateUserRoleRequest) GetUserId() string {
	if x != nil {
		if x, ok := x.User.(*UpdateUserRoleRequest_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *UpdateUserRoleRequest) GetUserName() string {
	if x != nil {
		if x, ok := x.User.(*UpdateUserRoleRequest_UserName); ok {
			return x.UserName
		}
	}
	return ""
}

func (x *UpdateUserRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type isUpdateUserRoleRequest_User interface {
	isUpdateUserRoleRequest_User()
}

type UpdateUserRoleRequest_UserId struct {
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof"`
}

type UpdateUserRoleRequest_UserName struct {
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3,oneof"`
}

func (*UpdateUserRoleRequest_UserId) isUpdateUserRoleRequest_User() {}

func (*UpdateUserRoleRequest_UserName) isUpdateUserRoleRequest_User() {}

type UpdateUserRoleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 変更後のロール(無効なロールを指定した場合そのままの可能性)
	Role          string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRoleResponse) Reset() {
	*x = UpdateUserRoleResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleResponse) ProtoMessage() {}

func (x *UpdateUserRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateUserRoleResponse) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type UpdateSessionParametersRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	SessionId                  string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name                       *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description                *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	MaxUsers                   *int32                 `protobuf:"varint,4,opt,name=max_users,json=maxUsers,proto3,oneof" json:"max_users,omitempty"`
	AccessLevel                *AccessLevel           `protobuf:"varint,5,opt,name=access_level,json=accessLevel,proto3,enum=headless.v1.AccessLevel,oneof" json:"access_level,omitempty"`
	AwayKickMinutes            *float32               `protobuf:"fixed32,6,opt,name=away_kick_minutes,json=awayKickMinutes,proto3,oneof" json:"away_kick_minutes,omitempty"`
	IdleRestartIntervalSeconds *int32                 `protobuf:"varint,7,opt,name=idle_restart_interval_seconds,json=idleRestartIntervalSeconds,proto3,oneof" json:"idle_restart_interval_seconds,omitempty"`
	SaveOnExit                 *bool                  `protobuf:"varint,8,opt,name=save_on_exit,json=saveOnExit,proto3,oneof" json:"save_on_exit,omitempty"`
	AutoSaveIntervalSeconds    *int32                 `protobuf:"varint,9,opt,name=auto_save_interval_seconds,json=autoSaveIntervalSeconds,proto3,oneof" json:"auto_save_interval_seconds,omitempty"`
	AutoSleep                  *bool                  `protobuf:"varint,10,opt,name=auto_sleep,json=autoSleep,proto3,oneof" json:"auto_sleep,omitempty"`
	HideFromPublicListing      *bool                  `protobuf:"varint,11,opt,name=hide_from_public_listing,json=hideFromPublicListing,proto3,oneof" json:"hide_from_public_listing,omitempty"`
	UpdateTags                 bool                   `protobuf:"varint,12,opt,name=update_tags,json=updateTags,proto3" json:"update_tags,omitempty"`
	Tags                       []string               `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateSessionParametersRequest) Reset() {
	*x = UpdateSessionParametersRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionParametersRequest) ProtoMessage() {}

func (x *UpdateSessionParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionParametersRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionParametersRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateSessionParametersRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateSessionParametersRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateSessionParametersRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateSessionParametersRequest) GetMaxUsers() int32 {
	if x != nil && x.MaxUsers != nil {
		return *x.MaxUsers
	}
	return 0
}

func (x *UpdateSessionParametersRequest) GetAccessLevel() AccessLevel {
	if x != nil && x.AccessLevel != nil {
		return *x.AccessLevel
	}
	return AccessLevel_ACCESS_LEVEL_UNSPECIFIED
}

func (x *UpdateSessionParametersRequest) GetAwayKickMinutes() float32 {
	if x != nil && x.AwayKickMinutes != nil {
		return *x.AwayKickMinutes
	}
	return 0
}

func (x *UpdateSessionParametersRequest) GetIdleRestartIntervalSeconds() int32 {
	if x != nil && x.IdleRestartIntervalSeconds != nil {
		return *x.IdleRestartIntervalSeconds
	}
	return 0
}

func (x *UpdateSessionParametersRequest) GetSaveOnExit() bool {
	if x != nil && x.SaveOnExit != nil {
		return *x.SaveOnExit
	}
	return false
}

func (x *UpdateSessionParametersRequest) GetAutoSaveIntervalSeconds() int32 {
	if x != nil && x.AutoSaveIntervalSeconds != nil {
		return *x.AutoSaveIntervalSeconds
	}
	return 0
}

func (x *UpdateSessionParametersRequest) GetAutoSleep() bool {
	if x != nil && x.AutoSleep != nil {
		return *x.AutoSleep
	}
	return false
}

func (x *UpdateSessionParametersRequest) GetHideFromPublicListing() bool {
	if x != nil && x.HideFromPublicListing != nil {
		return *x.HideFromPublicListing
	}
	return false
}

func (x *UpdateSessionParametersRequest) GetUpdateTags() bool {
	if x != nil {
		return x.UpdateTags
	}
	return false
}

func (x *UpdateSessionParametersRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateSessionParametersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSessionParametersResponse) Reset() {
	*x = UpdateSessionParametersResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionParametersResponse) ProtoMessage() {}

func (x *UpdateSessionParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionParametersResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionParametersResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{31}
}

type ListUsersInSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsersInSessionRequest) Reset() {
	*x = ListUsersInSessionRequest{}
	mi := &file_headless_v1_headless_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersInSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersInSessionRequest) ProtoMessage() {}

func (x *ListUsersInSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersInSessionRequest.ProtoReflect.Descriptor instead.
func (*ListUsersInSessionRequest) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{32}
}

func (x *ListUsersInSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ListUsersInSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*UserInSession       `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsersInSessionResponse) Reset() {
	*x = ListUsersInSessionResponse{}
	mi := &file_headless_v1_headless_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsersInSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersInSessionResponse) ProtoMessage() {}

func (x *ListUsersInSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersInSessionResponse.ProtoReflect.Descriptor instead.
func (*ListUsersInSessionResponse) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{33}
}

func (x *ListUsersInSessionResponse) GetUsers() []*UserInSession {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserInSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Role          string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	IsPresent     bool                   `protobuf:"varint,4,opt,name=is_present,json=isPresent,proto3" json:"is_present,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInSession) Reset() {
	*x = UserInSession{}
	mi := &file_headless_v1_headless_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInSession) ProtoMessage() {}

func (x *UserInSession) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInSession.ProtoReflect.Descriptor instead.
func (*UserInSession) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{34}
}

func (x *UserInSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInSession) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UserInSession) GetIsPresent() bool {
	if x != nil {
		return x.IsPresent
	}
	return false
}

type UserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconUrl       string                 `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_headless_v1_headless_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{35}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type Session struct {
	state                      protoimpl.MessageState  `protogen:"open.v1"`
	Id                         string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description                string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AccessLevel                AccessLevel             `protobuf:"varint,4,opt,name=access_level,json=accessLevel,proto3,enum=headless.v1.AccessLevel" json:"access_level,omitempty"`
	UsersCount                 int32                   `protobuf:"varint,7,opt,name=users_count,json=usersCount,proto3" json:"users_count,omitempty"`
	MaxUsers                   int32                   `protobuf:"varint,8,opt,name=max_users,json=maxUsers,proto3" json:"max_users,omitempty"`
	ThumbnailUrl               *string                 `protobuf:"bytes,5,opt,name=thumbnail_url,json=thumbnailUrl,proto3,oneof" json:"thumbnail_url,omitempty"`
	StartupParameters          *WorldStartupParameters `protobuf:"bytes,6,opt,name=startup_parameters,json=startupParameters,proto3" json:"startup_parameters,omitempty"`
	SessionUrl                 string                  `protobuf:"bytes,9,opt,name=session_url,json=sessionUrl,proto3" json:"session_url,omitempty"`
	TimeRunningMs              int32                   `protobuf:"varint,10,opt,name=time_running_ms,json=timeRunningMs,proto3" json:"time_running_ms,omitempty"`
	AwayKickMinutes            float32                 `protobuf:"fixed32,11,opt,name=away_kick_minutes,json=awayKickMinutes,proto3" json:"away_kick_minutes,omitempty"`
	IdleRestartIntervalSeconds int32                   `protobuf:"varint,12,opt,name=idle_restart_interval_seconds,json=idleRestartIntervalSeconds,proto3" json:"idle_restart_interval_seconds,omitempty"`
	SaveOnExit                 bool                    `protobuf:"varint,13,opt,name=save_on_exit,json=saveOnExit,proto3" json:"save_on_exit,omitempty"`
	AutoSaveIntervalSeconds    int32                   `protobuf:"varint,14,opt,name=auto_save_interval_seconds,json=autoSaveIntervalSeconds,proto3" json:"auto_save_interval_seconds,omitempty"`
	AutoSleep                  bool                    `protobuf:"varint,15,opt,name=auto_sleep,json=autoSleep,proto3" json:"auto_sleep,omitempty"`
	HideFromPublicListing      bool                    `protobuf:"varint,16,opt,name=hide_from_public_listing,json=hideFromPublicListing,proto3" json:"hide_from_public_listing,omitempty"`
	Tags                       []string                `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty"`
	LastSavedAt                *timestamppb.Timestamp  `protobuf:"bytes,18,opt,name=last_saved_at,json=lastSavedAt,proto3" json:"last_saved_at,omitempty"`
	CanSave                    bool                    `protobuf:"varint,19,opt,name=can_save,json=canSave,proto3" json:"can_save,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_headless_v1_headless_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{36}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Session) GetAccessLevel() AccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return AccessLevel_ACCESS_LEVEL_UNSPECIFIED
}

func (x *Session) GetUsersCount() int32 {
	if x != nil {
		return x.UsersCount
	}
	return 0
}

func (x *Session) GetMaxUsers() int32 {
	if x != nil {
		return x.MaxUsers
	}
	return 0
}

func (x *Session) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *Session) GetStartupParameters() *WorldStartupParameters {
	if x != nil {
		return x.StartupParameters
	}
	return nil
}

func (x *Session) GetSessionUrl() string {
	if x != nil {
		return x.SessionUrl
	}
	return ""
}

func (x *Session) GetTimeRunningMs() int32 {
	if x != nil {
		return x.TimeRunningMs
	}
	return 0
}

func (x *Session) GetAwayKickMinutes() float32 {
	if x != nil {
		return x.AwayKickMinutes
	}
	return 0
}

func (x *Session) GetIdleRestartIntervalSeconds() int32 {
	if x != nil {
		return x.IdleRestartIntervalSeconds
	}
	return 0
}

func (x *Session) GetSaveOnExit() bool {
	if x != nil {
		return x.SaveOnExit
	}
	return false
}

func (x *Session) GetAutoSaveIntervalSeconds() int32 {
	if x != nil {
		return x.AutoSaveIntervalSeconds
	}
	return 0
}

func (x *Session) GetAutoSleep() bool {
	if x != nil {
		return x.AutoSleep
	}
	return false
}

func (x *Session) GetHideFromPublicListing() bool {
	if x != nil {
		return x.HideFromPublicListing
	}
	return false
}

func (x *Session) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Session) GetLastSavedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSavedAt
	}
	return nil
}

func (x *Session) GetCanSave() bool {
	if x != nil {
		return x.CanSave
	}
	return false
}

type DefaultUserRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          string                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultUserRole) Reset() {
	*x = DefaultUserRole{}
	mi := &file_headless_v1_headless_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultUserRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultUserRole) ProtoMessage() {}

func (x *DefaultUserRole) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultUserRole.ProtoReflect.Descriptor instead.
func (*DefaultUserRole) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{37}
}

func (x *DefaultUserRole) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *DefaultUserRole) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type WorldStartupParameters struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            *string                `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	CustomSessionId *string                `protobuf:"bytes,2,opt,name=custom_session_id,json=customSessionId,proto3,oneof" json:"custom_session_id,omitempty"`
	Description     *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags            []string               `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	MaxUsers        *int32                 `protobuf:"varint,4,opt,name=max_users,json=maxUsers,proto3,oneof" json:"max_users,omitempty"`
	AccessLevel     AccessLevel            `protobuf:"varint,5,opt,name=access_level,json=accessLevel,proto3,enum=headless.v1.AccessLevel" json:"access_level,omitempty"`
	// Types that are valid to be assigned to LoadWorld:
	//
	//	*WorldStartupParameters_LoadWorldUrl
	//	*WorldStartupParameters_LoadWorldPresetName
	LoadWorld                  isWorldStartupParameters_LoadWorld `protobuf_oneof:"load_world"`
	AutoInviteUsernames        []string                           `protobuf:"bytes,8,rep,name=auto_invite_usernames,json=autoInviteUsernames,proto3" json:"auto_invite_usernames,omitempty"`
	HideFromPublicListing      bool                               `protobuf:"varint,9,opt,name=hide_from_public_listing,json=hideFromPublicListing,proto3" json:"hide_from_public_listing,omitempty"`
	DefaultUserRoles           []*DefaultUserRole                 `protobuf:"bytes,11,rep,name=default_user_roles,json=defaultUserRoles,proto3" json:"default_user_roles,omitempty"`
	AwayKickMinutes            float32                            `protobuf:"fixed32,12,opt,name=away_kick_minutes,json=awayKickMinutes,proto3" json:"away_kick_minutes,omitempty"`
	IdleRestartIntervalSeconds int32                              `protobuf:"varint,13,opt,name=idle_restart_interval_seconds,json=idleRestartIntervalSeconds,proto3" json:"idle_restart_interval_seconds,omitempty"`
	SaveOnExit                 bool                               `protobuf:"varint,14,opt,name=save_on_exit,json=saveOnExit,proto3" json:"save_on_exit,omitempty"`
	AutoSaveIntervalSeconds    int32                              `protobuf:"varint,15,opt,name=auto_save_interval_seconds,json=autoSaveIntervalSeconds,proto3" json:"auto_save_interval_seconds,omitempty"`
	AutoSleep                  bool                               `protobuf:"varint,16,opt,name=auto_sleep,json=autoSleep,proto3" json:"auto_sleep,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *WorldStartupParameters) Reset() {
	*x = WorldStartupParameters{}
	mi := &file_headless_v1_headless_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldStartupParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldStartupParameters) ProtoMessage() {}

func (x *WorldStartupParameters) ProtoReflect() protoreflect.Message {
	mi := &file_headless_v1_headless_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldStartupParameters.ProtoReflect.Descriptor instead.
func (*WorldStartupParameters) Descriptor() ([]byte, []int) {
	return file_headless_v1_headless_proto_rawDescGZIP(), []int{38}
}

func (x *WorldStartupParameters) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *WorldStartupParameters) GetCustomSessionId() string {
	if x != nil && x.CustomSessionId != nil {
		return *x.CustomSessionId
	}
	return ""
}

func (x *WorldStartupParameters) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *WorldStartupParameters) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *WorldStartupParameters) GetMaxUsers() int32 {
	if x != nil && x.MaxUsers != nil {
		return *x.MaxUsers
	}
	return 0
}

func (x *WorldStartupParameters) GetAccessLevel() AccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return AccessLevel_ACCESS_LEVEL_UNSPECIFIED
}

func (x *WorldStartupParameters) GetLoadWorld() isWorldStartupParameters_LoadWorld {
	if x != nil {
		return x.LoadWorld
	}
	return nil
}

func (x *WorldStartupParameters) GetLoadWorldUrl() string {
	if x != nil {
		if x, ok := x.LoadWorld.(*WorldStartupParameters_LoadWorldUrl); ok {
			return x.LoadWorldUrl
		}
	}
	return ""
}

func (x *WorldStartupParameters) GetLoadWorldPresetName() string {
	if x != nil {
		if x, ok := x.LoadWorld.(*WorldStartupParameters_LoadWorldPresetName); ok {
			return x.LoadWorldPresetName
		}
	}
	return ""
}

func (x *WorldStartupParameters) GetAutoInviteUsernames() []string {
	if x != nil {
		return x.AutoInviteUsernames
	}
	return nil
}

func (x *WorldStartupParameters) GetHideFromPublicListing() bool {
	if x != nil {
		return x.HideFromPublicListing
	}
	return false
}

func (x *WorldStartupParameters) GetDefaultUserRoles() []*DefaultUserRole {
	if x != nil {
		return x.DefaultUserRoles
	}
	return nil
}

func (x *WorldStartupParameters) GetAwayKickMinutes() float32 {
	if x != nil {
		return x.AwayKickMinutes
	}
	return 0
}

func (x *WorldStartupParameters) GetIdleRestartIntervalSeconds() int32 {
	if x != nil {
		return x.IdleRestartIntervalSeconds
	}
	return 0
}

func (x *WorldStartupParameters) GetSaveOnExit() bool {
	if x != nil {
		return x.SaveOnExit
	}
	return false
}

func (x *WorldStartupParameters) GetAutoSaveIntervalSeconds() int32 {
	if x != nil {
		return x.AutoSaveIntervalSeconds
	}
	return 0
}

func (x *WorldStartupParameters) GetAutoSleep() bool {
	if x != nil {
		return x.AutoSleep
	}
	return false
}

type isWorldStartupParameters_LoadWorld interface {
	isWorldStartupParameters_LoadWorld()
}

type WorldStartupParameters_LoadWorldUrl struct {
	LoadWorldUrl string `protobuf:"bytes,6,opt,name=load_world_url,json=loadWorldUrl,proto3,oneof"`
}

type WorldStartupParameters_LoadWorldPresetName struct {
	LoadWorldPresetName string `protobuf:"bytes,7,opt,name=load_world_preset_name,json=loadWorldPresetName,proto3,oneof"`
}

func (*WorldStartupParameters_LoadWorldUrl) isWorldStartupParameters_LoadWorld() {}

func (*WorldStartupParameters_LoadWorldPresetName) isWorldStartupParameters_LoadWorld() {}

var File_headless_v1_headless_proto protoreflect.FileDescriptor

var file_headless_v1_headless_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x0f, 0x4b, 0x69,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x12,
	0x0a, 0x10, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x71, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x11, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0xab, 0x02, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6e, 0x69, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x70, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x79, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x11, 0x0a,
	0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x58, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x12,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74,
	0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xa8, 0x06, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x03, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x79,
	0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x1d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x1a, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0a,
	0x73, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x15, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x66, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x22, 0xb8, 0x06, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x61, 0x79,
	0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x69, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x61, 0x76, 0x65, 0x4f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x61,
	0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x22,
	0x42, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xcc, 0x06, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x16, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x6f,
	0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4a,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x69,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2a, 0xd2, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x4e, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x43, 0x54, 0x53, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41,
	0x4e, 0x59, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x32, 0xc3, 0x0b, 0x0a, 0x16, 0x48, 0x65, 0x61, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x74, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x08, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xc2, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x0d, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x61, 0x6e, 0x74, 0x61, 0x62, 0x61, 0x72, 0x75, 0x31, 0x30, 0x31, 0x34, 0x2f, 0x62, 0x61, 0x72,
	0x75, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x68, 0x65, 0x61,
	0x64, 0x6c, 0x65, 0x73, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x48, 0x58, 0x58, 0xaa, 0x02, 0x0b,
	0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x48, 0x65, 0x61, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_headless_v1_headless_proto_rawDescOnce sync.Once
	file_headless_v1_headless_proto_rawDescData = file_headless_v1_headless_proto_rawDesc
)

func file_headless_v1_headless_proto_rawDescGZIP() []byte {
	file_headless_v1_headless_proto_rawDescOnce.Do(func() {
		file_headless_v1_headless_proto_rawDescData = protoimpl.X.CompressGZIP(file_headless_v1_headless_proto_rawDescData)
	})
	return file_headless_v1_headless_proto_rawDescData
}

var file_headless_v1_headless_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_headless_v1_headless_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_headless_v1_headless_proto_goTypes = []any{
	(AccessLevel)(0),                        // 0: headless.v1.AccessLevel
	(*KickUserRequest)(nil),                 // 1: headless.v1.KickUserRequest
	(*KickUserResponse)(nil),                // 2: headless.v1.KickUserResponse
	(*BanUserRequest)(nil),                  // 3: headless.v1.BanUserRequest
	(*BanUserResponse)(nil),                 // 4: headless.v1.BanUserResponse
	(*SearchUserInfoRequest)(nil),           // 5: headless.v1.SearchUserInfoRequest
	(*SearchUserInfoResponse)(nil),          // 6: headless.v1.SearchUserInfoResponse
	(*GetAccountInfoRequest)(nil),           // 7: headless.v1.GetAccountInfoRequest
	(*GetAccountInfoResponse)(nil),          // 8: headless.v1.GetAccountInfoResponse
	(*FetchWorldInfoRequest)(nil),           // 9: headless.v1.FetchWorldInfoRequest
	(*FetchWorldInfoResponse)(nil),          // 10: headless.v1.FetchWorldInfoResponse
	(*GetAboutRequest)(nil),                 // 11: headless.v1.GetAboutRequest
	(*GetAboutResponse)(nil),                // 12: headless.v1.GetAboutResponse
	(*GetStatusRequest)(nil),                // 13: headless.v1.GetStatusRequest
	(*GetStatusResponse)(nil),               // 14: headless.v1.GetStatusResponse
	(*ShutdownRequest)(nil),                 // 15: headless.v1.ShutdownRequest
	(*ShutdownResponse)(nil),                // 16: headless.v1.ShutdownResponse
	(*ListSessionsRequest)(nil),             // 17: headless.v1.ListSessionsRequest
	(*ListSessionsResponse)(nil),            // 18: headless.v1.ListSessionsResponse
	(*GetSessionRequest)(nil),               // 19: headless.v1.GetSessionRequest
	(*GetSessionResponse)(nil),              // 20: headless.v1.GetSessionResponse
	(*StartWorldRequest)(nil),               // 21: headless.v1.StartWorldRequest
	(*StartWorldResponse)(nil),              // 22: headless.v1.StartWorldResponse
	(*StopSessionRequest)(nil),              // 23: headless.v1.StopSessionRequest
	(*StopSessionResponse)(nil),             // 24: headless.v1.StopSessionResponse
	(*SaveSessionWorldRequest)(nil),         // 25: headless.v1.SaveSessionWorldRequest
	(*SaveSessionWorldResponse)(nil),        // 26: headless.v1.SaveSessionWorldResponse
	(*InviteUserRequest)(nil),               // 27: headless.v1.InviteUserRequest
	(*InviteUserResponse)(nil),              // 28: headless.v1.InviteUserResponse
	(*UpdateUserRoleRequest)(nil),           // 29: headless.v1.UpdateUserRoleRequest
	(*UpdateUserRoleResponse)(nil),          // 30: headless.v1.UpdateUserRoleResponse
	(*UpdateSessionParametersRequest)(nil),  // 31: headless.v1.UpdateSessionParametersRequest
	(*UpdateSessionParametersResponse)(nil), // 32: headless.v1.UpdateSessionParametersResponse
	(*ListUsersInSessionRequest)(nil),       // 33: headless.v1.ListUsersInSessionRequest
	(*ListUsersInSessionResponse)(nil),      // 34: headless.v1.ListUsersInSessionResponse
	(*UserInSession)(nil),                   // 35: headless.v1.UserInSession
	(*UserInfo)(nil),                        // 36: headless.v1.UserInfo
	(*Session)(nil),                         // 37: headless.v1.Session
	(*DefaultUserRole)(nil),                 // 38: headless.v1.DefaultUserRole
	(*WorldStartupParameters)(nil),          // 39: headless.v1.WorldStartupParameters
	(*timestamppb.Timestamp)(nil),           // 40: google.protobuf.Timestamp
}
var file_headless_v1_headless_proto_depIdxs = []int32{
	36, // 0: headless.v1.SearchUserInfoResponse.users:type_name -> headless.v1.UserInfo
	37, // 1: headless.v1.ListSessionsResponse.sessions:type_name -> headless.v1.Session
	37, // 2: headless.v1.GetSessionResponse.session:type_name -> headless.v1.Session
	39, // 3: headless.v1.StartWorldRequest.parameters:type_name -> headless.v1.WorldStartupParameters
	37, // 4: headless.v1.StartWorldResponse.opened_session:type_name -> headless.v1.Session
	0,  // 5: headless.v1.UpdateSessionParametersRequest.access_level:type_name -> headless.v1.AccessLevel
	35, // 6: headless.v1.ListUsersInSessionResponse.users:type_name -> headless.v1.UserInSession
	0,  // 7: headless.v1.Session.access_level:type_name -> headless.v1.AccessLevel
	39, // 8: headless.v1.Session.startup_parameters:type_name -> headless.v1.WorldStartupParameters
	40, // 9: headless.v1.Session.last_saved_at:type_name -> google.protobuf.Timestamp
	0,  // 10: headless.v1.WorldStartupParameters.access_level:type_name -> headless.v1.AccessLevel
	38, // 11: headless.v1.WorldStartupParameters.default_user_roles:type_name -> headless.v1.DefaultUserRole
	11, // 12: headless.v1.HeadlessControlService.GetAbout:input_type -> headless.v1.GetAboutRequest
	13, // 13: headless.v1.HeadlessControlService.GetStatus:input_type -> headless.v1.GetStatusRequest
	15, // 14: headless.v1.HeadlessControlService.Shutdown:input_type -> headless.v1.ShutdownRequest
	17, // 15: headless.v1.HeadlessControlService.ListSessions:input_type -> headless.v1.ListSessionsRequest
	19, // 16: headless.v1.HeadlessControlService.GetSession:input_type -> headless.v1.GetSessionRequest
	21, // 17: headless.v1.HeadlessControlService.StartWorld:input_type -> headless.v1.StartWorldRequest
	23, // 18: headless.v1.HeadlessControlService.StopSession:input_type -> headless.v1.StopSessionRequest
	25, // 19: headless.v1.HeadlessControlService.SaveSessionWorld:input_type -> headless.v1.SaveSessionWorldRequest
	27, // 20: headless.v1.HeadlessControlService.InviteUser:input_type -> headless.v1.InviteUserRequest
	29, // 21: headless.v1.HeadlessControlService.UpdateUserRole:input_type -> headless.v1.UpdateUserRoleRequest
	31, // 22: headless.v1.HeadlessControlService.UpdateSessionParameters:input_type -> headless.v1.UpdateSessionParametersRequest
	33, // 23: headless.v1.HeadlessControlService.ListUsersInSession:input_type -> headless.v1.ListUsersInSessionRequest
	1,  // 24: headless.v1.HeadlessControlService.KickUser:input_type -> headless.v1.KickUserRequest
	3,  // 25: headless.v1.HeadlessControlService.BanUser:input_type -> headless.v1.BanUserRequest
	7,  // 26: headless.v1.HeadlessControlService.GetAccountInfo:input_type -> headless.v1.GetAccountInfoRequest
	9,  // 27: headless.v1.HeadlessControlService.FetchWorldInfo:input_type -> headless.v1.FetchWorldInfoRequest
	5,  // 28: headless.v1.HeadlessControlService.SearchUserInfo:input_type -> headless.v1.SearchUserInfoRequest
	12, // 29: headless.v1.HeadlessControlService.GetAbout:output_type -> headless.v1.GetAboutResponse
	14, // 30: headless.v1.HeadlessControlService.GetStatus:output_type -> headless.v1.GetStatusResponse
	16, // 31: headless.v1.HeadlessControlService.Shutdown:output_type -> headless.v1.ShutdownResponse
	18, // 32: headless.v1.HeadlessControlService.ListSessions:output_type -> headless.v1.ListSessionsResponse
	20, // 33: headless.v1.HeadlessControlService.GetSession:output_type -> headless.v1.GetSessionResponse
	22, // 34: headless.v1.HeadlessControlService.StartWorld:output_type -> headless.v1.StartWorldResponse
	24, // 35: headless.v1.HeadlessControlService.StopSession:output_type -> headless.v1.StopSessionResponse
	26, // 36: headless.v1.HeadlessControlService.SaveSessionWorld:output_type -> headless.v1.SaveSessionWorldResponse
	28, // 37: headless.v1.HeadlessControlService.InviteUser:output_type -> headless.v1.InviteUserResponse
	30, // 38: headless.v1.HeadlessControlService.UpdateUserRole:output_type -> headless.v1.UpdateUserRoleResponse
	32, // 39: headless.v1.HeadlessControlService.UpdateSessionParameters:output_type -> headless.v1.UpdateSessionParametersResponse
	34, // 40: headless.v1.HeadlessControlService.ListUsersInSession:output_type -> headless.v1.ListUsersInSessionResponse
	2,  // 41: headless.v1.HeadlessControlService.KickUser:output_type -> headless.v1.KickUserResponse
	4,  // 42: headless.v1.HeadlessControlService.BanUser:output_type -> headless.v1.BanUserResponse
	8,  // 43: headless.v1.HeadlessControlService.GetAccountInfo:output_type -> headless.v1.GetAccountInfoResponse
	10, // 44: headless.v1.HeadlessControlService.FetchWorldInfo:output_type -> headless.v1.FetchWorldInfoResponse
	6,  // 45: headless.v1.HeadlessControlService.SearchUserInfo:output_type -> headless.v1.SearchUserInfoResponse
	29, // [29:46] is the sub-list for method output_type
	12, // [12:29] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_headless_v1_headless_proto_init() }
func file_headless_v1_headless_proto_init() {
	if File_headless_v1_headless_proto != nil {
		return
	}
	file_headless_v1_headless_proto_msgTypes[0].OneofWrappers = []any{
		(*KickUserRequest_UserId)(nil),
		(*KickUserRequest_UserName)(nil),
	}
	file_headless_v1_headless_proto_msgTypes[2].OneofWrappers = []any{
		(*BanUserRequest_UserId)(nil),
		(*BanUserRequest_UserName)(nil),
	}
	file_headless_v1_headless_proto_msgTypes[4].OneofWrappers = []any{
		(*SearchUserInfoRequest_UserId)(nil),
		(*SearchUserInfoRequest_UserName)(nil),
	}
	file_headless_v1_headless_proto_msgTypes[26].OneofWrappers = []any{
		(*InviteUserRequest_UserId)(nil),
		(*InviteUserRequest_UserName)(nil),
	}
	file_headless_v1_headless_proto_msgTypes[28].OneofWrappers = []any{
		(*UpdateUserRoleRequest_UserId)(nil),
		(*UpdateUserRoleRequest_UserName)(nil),
	}
	file_headless_v1_headless_proto_msgTypes[30].OneofWrappers = []any{}
	file_headless_v1_headless_proto_msgTypes[36].OneofWrappers = []any{}
	file_headless_v1_headless_proto_msgTypes[38].OneofWrappers = []any{
		(*WorldStartupParameters_LoadWorldUrl)(nil),
		(*WorldStartupParameters_LoadWorldPresetName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_headless_v1_headless_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_headless_v1_headless_proto_goTypes,
		DependencyIndexes: file_headless_v1_headless_proto_depIdxs,
		EnumInfos:         file_headless_v1_headless_proto_enumTypes,
		MessageInfos:      file_headless_v1_headless_proto_msgTypes,
	}.Build()
	File_headless_v1_headless_proto = out.File
	file_headless_v1_headless_proto_rawDesc = nil
	file_headless_v1_headless_proto_goTypes = nil
	file_headless_v1_headless_proto_depIdxs = nil
}
